"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –∏ –ø–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
"""

import pytest
import os
import sys
import json
import tempfile
from unittest.mock import Mock, patch, MagicMock, call
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))


class TestBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–æ—Ç–∞"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.test_log_dir = tempfile.mkdtemp()
        self.original_log_dir = 'logs'
    
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        import shutil
        if os.path.exists(self.test_log_dir):
            shutil.rmtree(self.test_log_dir)
    
    @patch('telebot.TeleBot')
    @patch('dotenv.load_dotenv')
    @patch.dict(os.environ, {
        'BOT_TOKEN': '123456789:ABCdefGHIjklMNOpqrsTUVwxyz',
        'ADMIN_CHAT_ID': '123456789',
        'LOG_LEVEL': 'INFO'
    })
    def test_bot_initialization(self, mock_load_dotenv, mock_telebot):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        # –ú–æ–∫–∞–µ–º handlers –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º main
        with patch.dict('sys.modules', {'handlers': Mock(), 'bot.handlers': Mock()}):
            with patch('builtins.open', mock_open()) as mock_file:
                from bot.main import BOT_TOKEN, ADMIN_CHAT_ID
                
                assert BOT_TOKEN == '123456789:ABCdefGHIjklMNOpqrsTUVwxyz'
                assert ADMIN_CHAT_ID == '123456789'
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
                assert True  # –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
    
    @patch('telebot.TeleBot')
    @patch('dotenv.load_dotenv')
    def test_bot_initialization_no_token(self, mock_load_dotenv, mock_telebot):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
        with patch.dict(os.environ, {}, clear=True):
            with patch.dict('sys.modules', {'handlers': Mock(), 'bot.handlers': Mock()}):
                with patch('sys.exit') as mock_exit:
                    with patch('builtins.open', mock_open()) as mock_file:
                        from bot.main import BOT_TOKEN
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
                        assert True  # –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
    
    def test_placeholders_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≥–ª—É—à–µ–∫"""
        test_data = {
            "shelters": [
                {
                    "name": "–£–±–µ–∂–∏—â–µ 1",
                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —É–±–µ–∂–∏—â–∞",
                    "lat": 55.7558,
                    "lon": 37.6176,
                    "map_link": "https://maps.yandex.ru",
                    "photo_path": "test.jpg"
                }
            ],
            "documents": [
                {
                    "title": "–î–æ–∫—É–º–µ–Ω—Ç 1",
                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                    "file_path": "test.pdf"
                }
            ],
            "safety_responses": [
                {
                    "question_keywords": ["–ø–æ–∂–∞—Ä"],
                    "answer": "–ü—Ä–∏ –ø–æ–∂–∞—Ä–µ –∑–≤–æ–Ω–∏—Ç–µ 01",
                    "source": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                }
            ],
            "contacts": {
                "security": "+7-800-555-35-35",
                "safety": "+7-800-555-36-36"
            }
        }
        
        with patch('builtins.open', mock_open(read_data=json.dumps(test_data))):
            with patch.dict('sys.modules', {'handlers': Mock(), 'bot.handlers': Mock()}):
                from bot.main import load_placeholders
                result = load_placeholders()
                
                assert result == test_data
                assert len(result['shelters']) == 1
                assert len(result['documents']) == 1
                assert len(result['safety_responses']) == 1


class TestHandlersIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.test_log_dir = tempfile.mkdtemp()
        self.original_log_dir = 'logs'
    
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        import shutil
        if os.path.exists(self.test_log_dir):
            shutil.rmtree(self.test_log_dir)
    
    def test_danger_report_full_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –ú–æ–∫–∞–µ–º yandex_notifications
        with patch.dict('sys.modules', {'yandex_notifications': Mock()}):
            from bot.handlers import (
                handle_danger_report_text, handle_danger_report_location,
                handle_danger_report_media, finish_danger_report
            )
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            mock_message = Mock()
            mock_message.chat.id = 12345
            mock_message.from_user.username = "test_user"
            mock_message.text = "–ü–æ–∂–∞—Ä –≤ –∑–¥–∞–Ω–∏–∏ –ê"
            
            user_data = {'step': 'description'}
            placeholders = {'contacts': {'security': '+7-800-555-35-35', 'safety': '+7-800-555-36-36'}}
            
            # –®–∞–≥ 1: –û–ø–∏—Å–∞–Ω–∏–µ
            result = handle_danger_report_text(mock_message, user_data, placeholders)
            assert isinstance(result, tuple)
            state, response = result
            assert state == "danger_report"
            assert user_data['step'] == 'location'
            
            # –®–∞–≥ 2: –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º
            mock_message.text = "–ó–¥–∞–Ω–∏–µ –ê, 1 —ç—Ç–∞–∂"
            user_data['step'] = 'location_text'
            result = handle_danger_report_text(mock_message, user_data, placeholders)
            assert isinstance(result, tuple)
            state, response = result
            assert state == "danger_report"
            assert user_data['step'] == 'media'
            
            # –®–∞–≥ 3: –ú–µ–¥–∏–∞—Ñ–∞–π–ª
            mock_message.photo = [Mock(file_size=1024*1024)]
            mock_message.content_type = 'photo'
            user_data['media'] = []
            result = handle_danger_report_media(mock_message, user_data, 20, 300)
            assert "–¥–æ–±–∞–≤–ª–µ–Ω" in result
            assert len(user_data['media']) == 1
            
            # –®–∞–≥ 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            mock_message.text = "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            with patch('bot.handlers.bot_instance', Mock()):
                with patch.dict(os.environ, {'ADMIN_CHAT_ID': '123456789'}):
                    result = finish_danger_report(mock_message, user_data, placeholders)
                    assert isinstance(result, tuple)
                    state, response = result
                    assert state == "main_menu"
                    assert "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" in response['text']
    
    @pytest.mark.skip(reason="–§—É–Ω–∫—Ü–∏–∏ safety consultant –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
    def test_safety_consultant_full_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        pass
    
    def test_improvement_suggestion_full_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        with patch.dict('sys.modules', {'yandex_notifications': Mock()}):
            from bot.handlers import (
                handle_improvement_suggestion_text
            )
            
            mock_message = Mock()
            mock_message.chat.id = 12345
            mock_message.from_user.username = "test_user"
            
            placeholders = {}
            user_data = {}
            
            # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            mock_message.text = "–î–æ–±–∞–≤–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"
            result = handle_improvement_suggestion_text(mock_message, placeholders, user_data)
            assert isinstance(result, tuple)
            state, response = result
            assert state == "main_menu"
            assert "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º" in response['text']


class TestNotificationsIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def test_notification_service_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        from yandex_notifications import NotificationServiceFactory
        
        with patch.dict(os.environ, {
            'YANDEX_SMTP_ENABLED': 'true',
            'YANDEX_SMTP_HOST': 'smtp.test.com',
            'YANDEX_SMTP_PORT': '587',
            'YANDEX_SMTP_USER': 'test@test.com',
            'YANDEX_SMTP_PASSWORD': 'password',
            'YANDEX_SMTP_USE_TLS': 'true',
            'INCIDENT_NOTIFICATION_EMAILS': 'admin@test.com',
            'YANDEX_CLOUD_ENABLED': 'false',
            'INCIDENT_NOTIFICATION_SMS_NUMBERS': '+1234567890'
        }):
            service = NotificationServiceFactory.create_from_env()
            
            assert len(service.channels) == 2  # SMTP + SMS
            assert service.channels[0].__class__.__name__ == 'SMTPNotificationChannel'
            assert service.channels[1].__class__.__name__ == 'SMSNotificationChannel'
    
    def test_incident_notification_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ"""
        from yandex_notifications import send_incident_notification
        
        test_incident = {
            'user_id': 12345,
            'username': 'test_user',
            'description': '–ü–æ–∂–∞—Ä –≤ –∑–¥–∞–Ω–∏–∏ –ê',
            'location_text': '–ó–¥–∞–Ω–∏–µ –ê, 1 —ç—Ç–∞–∂',
            'media_count': 2
        }
        
        with patch('yandex_notifications.notification_service') as mock_service:
            mock_service.send_incident_notification.return_value = (True, "Success")
            
            success, message = send_incident_notification(test_incident)
            
            assert success is True
            assert message == "Success"
            mock_service.send_incident_notification.assert_called_once_with(test_incident)


class TestEndToEndScenarios:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    def test_user_journey_danger_report(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch.dict('sys.modules', {
            'handlers': Mock(),
            'yandex_notifications': Mock()
        }):
            from bot.main import (
                start_danger_report, handle_text, handle_location, handle_media
            )
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
            mock_bot = Mock()
            with patch('bot.main.bot', mock_bot):
                with patch('bot.main.user_states', {}):
                    with patch('bot.main.user_data', {}):
                        with patch('bot.main.user_history', {}):
                            with patch('bot.main.BotStates') as mock_states:
                                # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
                                mock_message = Mock()
                                mock_message.chat.id = 12345
                                mock_message.from_user.username = "test_user"
                                mock_message.from_user.id = 12345
                                mock_message.text = "/start"
                                
                                # –ú–æ–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
                                with patch('bot.main.start_command') as mock_start:
                                    mock_start.return_value = None
                                    # –¢–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å
                                    assert True
    
    def test_user_journey_shelter_finder(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–±–µ–∂–∏—â–∞"""
        with patch.dict('sys.modules', {
            'handlers': Mock(),
            'yandex_notifications': Mock()
        }):
            from bot.main import start_shelter_finder, find_nearest_shelter
            
            # –¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â–∞
            mock_message = Mock()
            mock_message.chat.id = 12345
            mock_message.from_user.username = "test_user"
            
            with patch('bot.main.bot', Mock()):
                with patch('bot.main.user_states', {}):
                    with patch('bot.main.BotStates') as mock_states:
                        # –¢–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å
                        assert True
    
    @pytest.mark.skip(reason="–§—É–Ω–∫—Ü–∏–∏ safety consultant –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
    def test_user_journey_safety_consultant(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        pass
    
    def test_user_journey_improvement_suggestion(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        with patch.dict('sys.modules', {
            'handlers': Mock(),
            'yandex_notifications': Mock()
        }):
            from bot.main import start_improvement_suggestion
            
            mock_message = Mock()
            mock_message.chat.id = 12345
            mock_message.from_user.username = "test_user"
            
            with patch('bot.main.bot', Mock()):
                with patch('bot.main.user_states', {}):
                    with patch('bot.main.user_data', {}):
                        with patch('bot.main.BotStates') as mock_states:
                            # –¢–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å
                            assert True


class TestErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    def test_handlers_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö"""
        with patch.dict('sys.modules', {'yandex_notifications': Mock()}):
            from bot.handlers import log_activity, log_incident, log_suggestion
            
            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            with patch('bot.handlers.open', side_effect=Exception("File error")):
                with patch('bot.handlers.logger') as mock_logger:
                    log_activity(12345, "test_user", "test_action", "test_payload")
                    mock_logger.error.assert_called_once()
    
    def test_main_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ"""
        with patch.dict('sys.modules', {'handlers': Mock()}):
            from bot.main import log_admin_error
            
            # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∞–¥–º–∏–Ω–∞
            with patch('bot.main.logger') as mock_logger:
                error = Exception("Test error")
                log_admin_error("TEST_ERROR", error, {"test": "data"})
                mock_logger.error.assert_called()
                mock_logger.bind.assert_called()
    
    def test_notifications_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        from yandex_notifications import SMTPNotificationChannel, IncidentFormatter
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ SMTP
        smtp_config = {
            'host': 'smtp.test.com',
            'port': 587,
            'user': 'test@test.com',
            'password': 'password',
            'use_tls': True
        }
        
        channel = SMTPNotificationChannel(smtp_config, ['test@test.com'], IncidentFormatter())
        
        with patch('smtplib.SMTP', side_effect=Exception("SMTP Error")):
            success, message = channel.send({'user_id': 12345, 'description': 'Test'})
            assert success is False
            assert "–û—à–∏–±–∫–∞: SMTP Error" in message


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
def mock_open(read_data=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ open"""
    from unittest.mock import mock_open as original_mock_open
    return original_mock_open(read_data=read_data)


if __name__ == "__main__":
    pytest.main([__file__, "-v"])

