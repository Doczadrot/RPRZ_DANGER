"""
Unit-—Ç–µ—Å—Ç—ã –¥–ª—è email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å attachments
–ü—Ä–æ–≤–µ—Ä–∫–∞ Resend API –∏ SMTP fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞
"""

import os
from unittest.mock import MagicMock, Mock, patch

import pytest

from bot.notifications import (
    _format_incident_html,
    send_email_notification,
    send_email_via_smtp,
)


@pytest.fixture
def incident_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
    return {
        "type": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "username": "test_user",
        "user_id": 12345,
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email",
        "location_text": "–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è",
        "timestamp": "2024-01-01 12:00:00",
        "media_count": 2,
    }


@pytest.fixture
def media_files():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
    return [
        {
            "data": b"fake_image_data_1",
            "type": "photo",
            "filename": "photo_abc123.jpg",
            "mime_type": "image/jpeg",
        },
        {
            "data": b"fake_video_data",
            "type": "video",
            "filename": "video_def456.mp4",
            "mime_type": "video/mp4",
        },
    ]


class TestFormatIncidentHTML:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –ø–∏—Å—å–º–∞"""

    def test_format_html_without_media(self, incident_data):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        html = _format_incident_html(incident_data, None)

        assert "üö® –ù–û–í–´–ô –ò–ù–¶–ò–î–ï–ù–¢" in html
        assert "test_user" in html
        assert "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç" in html
        assert "–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è" in html
        assert "üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã" not in html

    def test_format_html_with_photos(self, incident_data, media_files):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–æ—Ç–æ"""
        html = _format_incident_html(incident_data, [media_files[0]])

        assert "üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (1)" in html
        assert "üì∑" in html
        assert "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è" in html
        assert "photo_abc123.jpg" in html

    def test_format_html_with_multiple_media_types(self, incident_data, media_files):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –º–µ–¥–∏–∞"""
        html = _format_incident_html(incident_data, media_files)

        assert "üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (2)" in html
        assert "üì∑" in html  # —Ñ–æ—Ç–æ
        assert "üé•" in html  # –≤–∏–¥–µ–æ
        assert "photo_abc123.jpg" in html
        assert "video_def456.mp4" in html

    def test_format_html_with_document(self, incident_data):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"""
        doc_media = [
            {
                "data": b"fake_doc_data",
                "type": "document",
                "filename": "document.pdf",
                "mime_type": "application/pdf",
            }
        ]

        html = _format_incident_html(incident_data, doc_media)

        assert "üìÑ" in html
        assert "–î–æ–∫—É–º–µ–Ω—Ç" in html
        assert "document.pdf" in html


class TestResendEmailNotification:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Resend API"""

    @patch("bot.notifications.resend")
    @patch.dict(
        os.environ,
        {
            "RESEND_API_KEY": "test_api_key",
            "RESEND_FROM_EMAIL": "test@example.com",
            "ADMIN_EMAIL": "admin@example.com",
        },
    )
    def test_send_email_without_media(self, mock_resend, incident_data):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        mock_resend.Emails.send.return_value = {"id": "test_email_id"}

        result = send_email_notification(incident_data, None)

        assert result is True
        assert mock_resend.Emails.send.called

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ attachments –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏—Å—å
        call_args = mock_resend.Emails.send.call_args[0][0]
        assert "attachments" not in call_args

    @patch("bot.notifications.resend")
    @patch.dict(
        os.environ,
        {
            "RESEND_API_KEY": "test_api_key",
            "RESEND_FROM_EMAIL": "test@example.com",
            "ADMIN_EMAIL": "admin@example.com",
        },
    )
    def test_send_email_with_attachments(self, mock_resend, incident_data, media_files):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"""
        mock_resend.Emails.send.return_value = {"id": "test_email_id"}

        result = send_email_notification(incident_data, media_files)

        assert result is True
        assert mock_resend.Emails.send.called

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ attachments –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        call_args = mock_resend.Emails.send.call_args[0][0]
        assert "attachments" in call_args
        assert len(call_args["attachments"]) == 2

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç attachments
        attachment_1 = call_args["attachments"][0]
        assert "filename" in attachment_1
        assert "content" in attachment_1
        assert attachment_1["filename"] == "photo_abc123.jpg"

    @patch("bot.notifications.resend")
    @patch("bot.notifications.send_email_via_smtp")
    @patch.dict(os.environ, {})  # –ü—É—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    def test_fallback_when_resend_not_configured(
        self, mock_smtp, mock_resend, incident_data, media_files
    ):
        """–¢–µ—Å—Ç fallback –Ω–∞ SMTP –∫–æ–≥–¥–∞ Resend –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"""
        mock_smtp.return_value = True

        result = send_email_notification(incident_data, media_files)

        # Resend –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
        assert not mock_resend.Emails.send.called

        # SMTP –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å—Å—è
        assert mock_smtp.called

    @patch("bot.notifications.resend")
    @patch("bot.notifications.send_email_via_smtp")
    @patch.dict(
        os.environ,
        {
            "RESEND_API_KEY": "test_api_key",
            "RESEND_FROM_EMAIL": "test@example.com",
            "ADMIN_EMAIL": "admin@example.com",
        },
    )
    def test_fallback_when_resend_fails(
        self, mock_smtp, mock_resend, incident_data, media_files
    ):
        """–¢–µ—Å—Ç fallback –Ω–∞ SMTP –ø—Ä–∏ –æ—à–∏–±–∫–µ Resend"""
        mock_resend.Emails.send.side_effect = Exception("Resend API error")
        mock_smtp.return_value = True

        result = send_email_notification(incident_data, media_files)

        # SMTP –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Resend
        assert mock_smtp.called
        assert result is True


class TestSMTPFallback:
    """–¢–µ—Å—Ç—ã –¥–ª—è SMTP fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞"""

    @patch("bot.notifications.smtplib.SMTP")
    @patch.dict(
        os.environ,
        {
            "YANDEX_SMTP_HOST": "smtp.yandex.ru",
            "YANDEX_SMTP_PORT": "587",
            "YANDEX_SMTP_USER": "test@yandex.ru",
            "YANDEX_SMTP_PASSWORD": "test_password",
            "ADMIN_EMAIL": "admin@example.com",
        },
    )
    def test_smtp_send_without_media(self, mock_smtp_class, incident_data):
        """–¢–µ—Å—Ç SMTP –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –º–µ–¥–∏–∞"""
        mock_server = MagicMock()
        mock_smtp_class.return_value.__enter__.return_value = mock_server

        result = send_email_via_smtp(incident_data, None)

        assert result is True
        assert mock_server.starttls.called
        assert mock_server.login.called
        assert mock_server.send_message.called

    @patch("bot.notifications.smtplib.SMTP")
    @patch.dict(
        os.environ,
        {
            "YANDEX_SMTP_HOST": "smtp.yandex.ru",
            "YANDEX_SMTP_PORT": "587",
            "YANDEX_SMTP_USER": "test@yandex.ru",
            "YANDEX_SMTP_PASSWORD": "test_password",
            "ADMIN_EMAIL": "admin@example.com",
        },
    )
    def test_smtp_send_with_attachments(
        self, mock_smtp_class, incident_data, media_files
    ):
        """–¢–µ—Å—Ç SMTP –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"""
        mock_server = MagicMock()
        mock_smtp_class.return_value.__enter__.return_value = mock_server

        result = send_email_via_smtp(incident_data, media_files)

        assert result is True
        assert mock_server.send_message.called

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç attachments
        sent_message = mock_server.send_message.call_args[0][0]
        assert sent_message.is_multipart()

    @patch("bot.notifications.smtplib.SMTP")
    @patch.dict(os.environ, {})  # –ü—É—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    def test_smtp_fails_without_credentials(self, mock_smtp_class, incident_data):
        """–¢–µ—Å—Ç —á—Ç–æ SMTP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ credentials"""
        result = send_email_via_smtp(incident_data, None)

        assert result is False
        assert not mock_smtp_class.called

    @patch("bot.notifications.smtplib.SMTP")
    @patch.dict(
        os.environ,
        {
            "YANDEX_SMTP_HOST": "smtp.yandex.ru",
            "YANDEX_SMTP_PORT": "587",
            "YANDEX_SMTP_USER": "test@yandex.ru",
            "YANDEX_SMTP_PASSWORD": "test_password",
            "ADMIN_EMAIL": "admin@example.com",
        },
    )
    def test_smtp_handles_connection_error(self, mock_smtp_class, incident_data):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SMTP"""
        mock_smtp_class.side_effect = Exception("SMTP connection failed")

        result = send_email_via_smtp(incident_data, None)

        assert result is False


class TestEmailIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã email-—Å–∏—Å—Ç–µ–º—ã"""

    @patch("bot.notifications.resend")
    @patch.dict(
        os.environ,
        {
            "RESEND_API_KEY": "test_key",
            "RESEND_FROM_EMAIL": "test@example.com",
            "ADMIN_EMAIL": "admin@example.com",
        },
    )
    def test_edge_case_empty_media_list(self, mock_resend, incident_data):
        """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –º–µ–¥–∏–∞"""
        mock_resend.Emails.send.return_value = {"id": "test_id"}

        result = send_email_notification(incident_data, [])

        assert result is True
        call_args = mock_resend.Emails.send.call_args[0][0]
        assert (
            "attachments" not in call_args or len(call_args.get("attachments", [])) == 0
        )

    @patch("bot.notifications.resend")
    @patch.dict(
        os.environ,
        {
            "RESEND_API_KEY": "test_key",
            "RESEND_FROM_EMAIL": "test@example.com",
            "ADMIN_EMAIL": "admin@example.com",
        },
    )
    def test_edge_case_three_photos(self, mock_resend, incident_data):
        """–¢–µ—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–æ—Ç–æ (3)"""
        mock_resend.Emails.send.return_value = {"id": "test_id"}

        three_photos = [
            {
                "data": b"photo1",
                "type": "photo",
                "filename": "p1.jpg",
                "mime_type": "image/jpeg",
            },
            {
                "data": b"photo2",
                "type": "photo",
                "filename": "p2.jpg",
                "mime_type": "image/jpeg",
            },
            {
                "data": b"photo3",
                "type": "photo",
                "filename": "p3.jpg",
                "mime_type": "image/jpeg",
            },
        ]

        result = send_email_notification(incident_data, three_photos)

        assert result is True
        call_args = mock_resend.Emails.send.call_args[0][0]
        assert len(call_args["attachments"]) == 3

    @patch("bot.notifications.resend")
    @patch.dict(
        os.environ,
        {
            "RESEND_API_KEY": "test_key",
            "RESEND_FROM_EMAIL": "test@example.com",
            "ADMIN_EMAIL": "admin@example.com",
        },
    )
    def test_edge_case_large_file(self, mock_resend, incident_data):
        """–¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º —Ñ–∞–π–ª–æ–º"""
        mock_resend.Emails.send.return_value = {"id": "test_id"}

        # –°–æ–∑–¥–∞–µ–º "–±–æ–ª—å—à–æ–π" —Ñ–∞–π–ª (—Å–∏–º—É–ª—è—Ü–∏—è)
        large_file = [
            {
                "data": b"x" * (5 * 1024 * 1024),  # 5 MB
                "type": "photo",
                "filename": "large_photo.jpg",
                "mime_type": "image/jpeg",
            }
        ]

        result = send_email_notification(incident_data, large_file)

        assert result is True
        call_args = mock_resend.Emails.send.call_args[0][0]
        assert len(call_args["attachments"]) == 1
        # Base64 —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –Ω–∞ ~33%
        assert len(call_args["attachments"][0]["content"]) > 5 * 1024 * 1024


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
