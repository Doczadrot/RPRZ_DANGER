"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è handlers.py
–ü–æ–∫—Ä—ã–≤–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ edge cases
"""

import pytest
import os
import sys
import json
from unittest.mock import Mock, patch, mock_open
from datetime import datetime

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

with patch.dict('sys.modules', {'yandex_notifications': Mock()}):
    from bot.handlers import (
        log_activity, log_incident, log_suggestion,
        handle_danger_report_text, handle_danger_report_location,
        handle_danger_report_media, finish_danger_report,
        handle_shelter_finder_text,
        handle_improvement_suggestion_text, save_enhanced_suggestion,
        handle_improvement_suggestion_choice, categorize_suggestion,
        handle_suggestion_menu, show_popular_suggestions, show_user_suggestions
    )


class TestDangerReportEdgeCases:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def test_handle_danger_report_text_location_step_skip(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        user_data = {'step': 'location'}
        
        result = handle_danger_report_text(mock_message, user_data, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "danger_report"
        assert user_data['step'] == 'media'
        assert user_data['location_text'] == "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    def test_handle_danger_report_text_location_step_text_input(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º"
        user_data = {'step': 'location'}
        
        result = handle_danger_report_text(mock_message, user_data, {})
        
        assert isinstance(result, tuple)
        assert user_data['step'] == 'location_text'
    
    def test_handle_danger_report_text_location_text_step(self):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "–ó–¥–∞–Ω–∏–µ –¶–ì–¢-025, 4-–π —É—á–∞—Å—Ç–æ–∫"
        user_data = {'step': 'location_text'}
        
        result = handle_danger_report_text(mock_message, user_data, {})
        
        assert isinstance(result, tuple)
        assert user_data['step'] == 'media'
        assert user_data['location_text'] == "–ó–¥–∞–Ω–∏–µ –¶–ì–¢-025, 4-–π —É—á–∞—Å—Ç–æ–∫"
    
    @pytest.mark.skip(reason="–ü–∞—Ç—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    def test_handle_danger_report_text_media_step_continue(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å –º–µ–¥–∏–∞"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        user_data = {'step': 'media', 'description': 'Test', 'location_text': 'Test location'}
        
        with patch('bot.handlers.finish_danger_report') as mock_finish:
            mock_finish.return_value = ("main_menu", {"text": "Done"})
            with patch('bot.handlers.bot_instance', Mock()):
                result = handle_danger_report_text(mock_message, user_data, {})
                mock_finish.assert_called_once()
    
    def test_handle_danger_report_text_media_step_change_location(self):
        """–¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "üìç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ"
        user_data = {'step': 'media'}
        
        result = handle_danger_report_text(mock_message, user_data, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "danger_report"
        assert user_data['step'] == 'location'
    
    def test_handle_danger_report_text_media_step_change_description(self):
        """–¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
        user_data = {'step': 'media'}
        
        result = handle_danger_report_text(mock_message, user_data, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "danger_report"
        assert user_data['step'] == 'description'
    
    def test_handle_danger_report_text_media_step_cancel(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
        user_data = {'step': 'media', 'description': 'Test'}
        
        result = handle_danger_report_text(mock_message, user_data, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "main_menu"
        assert len(user_data) == 0  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–∏—â–µ–Ω–æ
    
    def test_handle_danger_report_media_video(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.photo = None
        mock_message.video = Mock(file_size=50*1024*1024)  # 50MB
        mock_message.document = None
        mock_message.content_type = 'video'
        user_data = {'media': []}
        
        result = handle_danger_report_media(mock_message, user_data, 20, 300)
        
        assert "–¥–æ–±–∞–≤–ª–µ–Ω" in result
        assert len(user_data['media']) == 1
    
    def test_handle_danger_report_media_document(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.photo = None
        mock_message.video = None
        mock_message.document = Mock(file_size=5*1024*1024, file_id='doc123')
        mock_message.content_type = 'document'
        user_data = {'media': []}
        
        result = handle_danger_report_media(mock_message, user_data, 20, 300)
        
        assert "–¥–æ–±–∞–≤–ª–µ–Ω" in result
    
    @patch('bot.handlers.bot_instance')
    @pytest.mark.skip(reason="–ü–∞—Ç—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    @patch('bot.handlers.log_incident')
    @patch('bot.handlers.log_activity')
    @patch.dict(os.environ, {'ADMIN_CHAT_ID': '123456'})
    @patch('bot.handlers.send_incident_notification', return_value=(True, "Success"))
    def test_finish_danger_report_with_admin_notification(self, mock_notify, mock_activity, mock_incident, mock_bot):
        """–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        
        user_data = {
            'description': '–ü–æ–∂–∞—Ä –≤ –∑–¥–∞–Ω–∏–∏',
            'location': {'latitude': 55.7558, 'longitude': 37.6176},
            'location_text': None,
            'media': [{'type': 'photo', 'file_id': 'photo123'}]
        }
        
        placeholders = {
            'contacts': {
                'security': '+7 (495) 123-45-67',
                'safety': '+7 (495) 123-45-68'
            }
        }
        
        result = finish_danger_report(mock_message, user_data, placeholders)
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "main_menu"
        mock_incident.assert_called_once()


class TestImprovementSuggestionEdgeCases:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    
    def test_handle_improvement_suggestion_choice_performance(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "1Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        
        result = handle_improvement_suggestion_choice(mock_message, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "improvement_suggestion"
        assert isinstance(response, dict)
        assert response['category'] == 'performance'
    
    def test_handle_improvement_suggestion_choice_notifications(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "2Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        
        result = handle_improvement_suggestion_choice(mock_message, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "improvement_suggestion"
        assert isinstance(response, dict)
        assert response['category'] == 'notifications'
    
    def test_handle_improvement_suggestion_choice_functionality(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "3Ô∏è‚É£ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
        
        result = handle_improvement_suggestion_choice(mock_message, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "improvement_suggestion"
        assert isinstance(response, dict)
        assert response['category'] == 'functionality'
    
    def test_handle_improvement_suggestion_choice_free_form(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞'"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "4Ô∏è‚É£ –°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞"
        
        result = handle_improvement_suggestion_choice(mock_message, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "improvement_suggestion"
        assert isinstance(response, dict)
        assert response['category'] == 'free_form'
    
    def test_handle_improvement_suggestion_choice_invalid(self):
        """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        
        result = handle_improvement_suggestion_choice(mock_message, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "improvement_suggestion"
        assert isinstance(response, str)
    
    def test_categorize_suggestion_performance(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'"""
        text = "–ù—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"
        category = categorize_suggestion(text)
        assert category == 'performance'
    
    def test_categorize_suggestion_notifications(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'"""
        text = "–î–æ–±–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
        category = categorize_suggestion(text)
        assert category == 'notifications'
    
    def test_categorize_suggestion_functionality(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'"""
        text = "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"
        category = categorize_suggestion(text)
        assert category == 'functionality'
    
    @pytest.mark.skip(reason="–ü–∞—Ç—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    def test_handle_suggestion_menu_popular(self):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        
        with patch('bot.handlers.show_popular_suggestions') as mock_show:
            mock_show.return_value = {"text": "Test", "reply_markup": Mock()}
            result = handle_suggestion_menu(mock_message, {})
            mock_show.assert_called_once()
            assert result == {"text": "Test", "reply_markup": Mock()}
    
    @pytest.mark.skip(reason="–ü–∞—Ç—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    def test_handle_suggestion_menu_my_suggestions(self):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        
        with patch('bot.handlers.show_user_suggestions') as mock_show:
            mock_show.return_value = {"text": "Test", "reply_markup": Mock()}
            result = handle_suggestion_menu(mock_message, {})
            mock_show.assert_called_once()
            assert result == {"text": "Test", "reply_markup": Mock()}
    
    def test_handle_suggestion_menu_new_suggestion(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        
        result = handle_suggestion_menu(mock_message, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "improvement_suggestion"
        assert isinstance(response, str)
    
    def test_handle_suggestion_menu_invalid(self):
        """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        
        result = handle_suggestion_menu(mock_message, {})
        
        # –ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º suggestion_menu
        assert isinstance(result, tuple)
        state, response = result
        assert state == "suggestion_menu"
        assert isinstance(response, str)
    
    @patch('builtins.open', mock_open(read_data='[]'))
    @patch('os.path.exists', return_value=True)
    def test_show_user_suggestions_empty_list(self, mock_exists):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        
        result = show_user_suggestions(mock_message)
        
        assert isinstance(result, dict)
        assert "–Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π" in result['text'].lower()
    
    @patch('os.path.exists', return_value=True)
    def test_show_popular_suggestions_empty(self, mock_exists):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        
        test_data = json.dumps([])
        
        with patch('builtins.open', mock_open(read_data=test_data)):
            result = show_popular_suggestions(mock_message)
            
            assert isinstance(result, dict)
            assert "–Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π" in result['text'].lower()


class TestShelterFinderEdgeCases:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â"""
    
    def test_handle_shelter_finder_text_invalid_input(self):
        """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫–µ —É–±–µ–∂–∏—â"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.text = "–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç"
        
        result = handle_shelter_finder_text(mock_message, {})
        
        assert isinstance(result, tuple)
        state, response = result
        assert state == "shelter_finder"
        assert "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é" in response


class TestLoggingEdgeCases:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @patch('builtins.open', side_effect=PermissionError)
    @patch('bot.handlers.logger')
    def test_log_activity_permission_error(self, mock_logger, mock_open):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        log_activity(12345, "test_user", "test_action", "payload")
        # –§—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–¥–∞—Ç—å
        assert True
    
    @patch('builtins.open', side_effect=IOError)
    @patch('bot.handlers.logger')
    def test_log_incident_io_error(self, mock_logger, mock_open):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ IO –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
        log_incident(12345, {"test": "data"})
        # –§—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–¥–∞—Ç—å
        assert True
    
    @patch('builtins.open', side_effect=Exception("Unknown error"))
    @patch('bot.handlers.logger')
    def test_log_suggestion_generic_error(self, mock_logger, mock_open):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        log_suggestion(12345, {"test": "data"})
        # –§—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–¥–∞—Ç—å
        assert True


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
