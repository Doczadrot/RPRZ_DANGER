"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è main.py
–ü–æ–∫—Ä—ã–≤–∞—é—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
"""

import pytest
import os
import sys
import json
from unittest.mock import Mock, patch, MagicMock, mock_open, call
from datetime import datetime

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# –ú–æ–∫–∞–µ–º handlers –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º main
with patch.dict('sys.modules', {'handlers': Mock()}):
    from bot.main import (
        sanitize_user_input, validate_user_input, mask_sensitive_data,
        check_running_bots, create_process_lock, remove_process_lock,
        show_all_shelters, find_nearest_shelter,
        start_command, help_command, history_command,
        handle_text, start_danger_report, start_shelter_finder, 
        start_improvement_suggestion, handle_location, handle_media
    )


class TestSanitizeUserInput:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    def test_sanitize_removes_script_tags(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è script —Ç–µ–≥–æ–≤"""
        result = sanitize_user_input("<script>alert('xss')</script>")
        assert "script" not in result
        assert "<" not in result
        assert ">" not in result
    
    def test_sanitize_removes_dangerous_commands(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        result = sanitize_user_input("rm -rf / ; DROP TABLE users")
        assert "rm" not in result
        assert "DROP" not in result
        assert ";" not in result
    
    def test_sanitize_preserves_safe_text(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        text = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? 123 test"
        result = sanitize_user_input(text)
        assert "–ü—Ä–∏–≤–µ—Ç" in result
        assert "–ö–∞–∫ –¥–µ–ª–∞" in result
        assert "123" in result
    
    def test_sanitize_handles_unicode(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode"""
        text = "–¢–µ—Å—Ç —Å —ç–º–æ–¥–∑–∏ üöÄ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"
        result = sanitize_user_input(text)
        assert "üöÄ" in result
        assert "–∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π" in result
    
    def test_sanitize_limits_length(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã"""
        long_text = "A" * 2000
        result = sanitize_user_input(long_text)
        assert len(result) <= 1003  # 1000 + "..."
    
    def test_sanitize_removes_multiple_spaces(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
        text = "Test    with    spaces"
        result = sanitize_user_input(text)
        assert "  " not in result


class TestValidateUserInput:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞"""
    
    def test_validate_accepts_valid_input(self):
        """–¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        is_valid, msg = validate_user_input("Normal text 123")
        assert is_valid is True
        assert msg == "OK"
    
    def test_validate_rejects_empty(self):
        """–¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞"""
        is_valid, msg = validate_user_input("")
        assert is_valid is False
        assert "–ü—É—Å—Ç–æ–π –≤–≤–æ–¥" in msg
    
    def test_validate_respects_min_length(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
        is_valid, msg = validate_user_input("abc", min_length=10)
        assert is_valid is False
        assert "–∫–æ—Ä–æ—Ç–∫–∏–π" in msg.lower()
    
    def test_validate_respects_max_length(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
        long_text = "A" * 2000
        is_valid, msg = validate_user_input(long_text, max_length=100)
        assert is_valid is False
        assert "–¥–ª–∏–Ω–Ω—ã–π" in msg.lower()
    
    def test_validate_detects_xss(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è XSS"""
        xss_patterns = [
            "<script>alert('xss')</script>",
            "javascript:alert('xss')",
            "<img onerror=alert('xss')>"
        ]
        for pattern in xss_patterns:
            is_valid, msg = validate_user_input(pattern)
            assert is_valid is False
            assert "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç" in msg
    
    def test_validate_detects_sql_injection(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        sql_patterns = [
            "'; DROP TABLE users; --",
            "1' OR '1'='1",
            "UNION SELECT * FROM"
        ]
        for pattern in sql_patterns:
            is_valid, msg = validate_user_input(pattern)
            # –ü–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–±–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–∏–ª–∞, –ª–∏–±–æ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∏–ª–∞
            if not is_valid:
                assert "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç" in msg


class TestMaskSensitiveData:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_mask_bot_token_format(self):
        """–¢–µ—Å—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        token = "123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
        result = mask_sensitive_data(token)
        assert "123456789:" in result
        assert "wxyz" in result
        assert "ABCdefGHI" not in result
    
    def test_mask_preserves_short_strings(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫"""
        short = "test"
        result = mask_sensitive_data(short)
        assert result == short
    
    def test_mask_handles_none_and_empty(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ None –∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏"""
        assert mask_sensitive_data(None) == ""
        assert mask_sensitive_data("") == ""


class TestProcessLockFunctions:
    """–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    
    @patch('bot.main.psutil.process_iter')
    def test_check_running_bots(self, mock_process_iter):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        # –ú–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
        mock_proc = Mock()
        mock_proc.info = {
            'pid': 12345,
            'name': 'python.exe',
            'cmdline': ['python', 'bot/main.py']
        }
        mock_process_iter.return_value = [mock_proc]
        
        result = check_running_bots()
        assert isinstance(result, list)
        assert len(result) > 0
    
    @patch('bot.main.LOCK_FILE')
    @patch('bot.main.PID_FILE')
    @patch('bot.main.check_running_bots')
    @patch('builtins.open', new_callable=mock_open)
    @patch('os.getpid')
    def test_create_process_lock_success(self, mock_getpid, mock_file, 
                                        mock_check, mock_pid, mock_lock):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        mock_getpid.return_value = 12345
        mock_check.return_value = [12345]  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        
        result = create_process_lock()
        assert result is True
    
    @patch('bot.main.LOCK_FILE')
    @patch('bot.main.PID_FILE')
    def test_remove_process_lock(self, mock_pid, mock_lock):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        mock_lock.exists.return_value = True
        mock_pid.exists.return_value = True
        
        remove_process_lock()
        # –§—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–¥–∞—Ç—å
        assert True


class TestShelterFunctions:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å —É–±–µ–∂–∏—â–∞–º–∏"""
    
    @patch('bot.main.placeholders', {'shelters': []})
    @patch('bot.main.BOT_TOKEN', 'test_token')
    @patch('bot.main.bot', Mock())
    def test_show_all_shelters_empty(self):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–±–µ–∂–∏—â"""
        show_all_shelters(12345)
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert True
    
    @patch('bot.main.placeholders', {'shelters': [
        {
            'name': '–£–±–µ–∂–∏—â–µ 1',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'lat': 55.7558,
            'lon': 37.6176,
            'map_link': 'https://example.com',
            'photo_path': 'nonexistent.jpg'
        }
    ]})
    @patch('bot.main.BOT_TOKEN', 'test_token')
    @patch('bot.main.bot', Mock())
    def test_show_all_shelters_with_data(self):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —É–±–µ–∂–∏—â —Å –¥–∞–Ω–Ω—ã–º–∏"""
        show_all_shelters(12345)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
        assert True
    
    @patch('bot.main.BotStates', Mock())
    @patch('bot.main.user_states', {})
    @patch('bot.main.placeholders', {'shelters': [
        {
            'name': '–£–±–µ–∂–∏—â–µ 1',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'lat': 55.7558,
            'lon': 37.6176,
            'map_link': 'https://example.com',
            'photo_path': ''
        },
        {
            'name': '–£–±–µ–∂–∏—â–µ 2',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ 2',
            'lat': 55.7600,
            'lon': 37.6200,
            'map_link': 'https://example.com',
            'photo_path': ''
        }
    ]})
    @patch('bot.main.BOT_TOKEN', 'test_token')
    @patch('bot.main.bot', Mock())
    def test_find_nearest_shelter(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞"""
        find_nearest_shelter(12345, 55.7558, 37.6176)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
        assert True


class TestCommandHandlers:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    
    @patch('bot.main.log_activity')
    @patch('bot.main.BotStates', Mock())
    @patch('bot.main.user_history', {})
    @patch('bot.main.user_data', {})
    @patch('bot.main.user_states', {})
    @patch('bot.main.bot', Mock())
    def test_start_command(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.from_user.id = 12345
        
        start_command(mock_message)
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert True
    
    @patch('bot.main.log_activity')
    @patch('bot.main.bot', Mock())
    def test_help_command(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        
        help_command(mock_message)
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert True
    
    @patch('os.path.exists', return_value=False)
    @patch('bot.main.log_activity')
    @patch('bot.main.bot', Mock())
    def test_history_command_no_file(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /my_history –±–µ–∑ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        
        history_command(mock_message)
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert True


class TestMessageHandlers:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @patch('bot.main.start_danger_report')
    @patch('bot.main.log_activity')
    @patch('bot.main.BotStates', Mock())
    @patch('bot.main.user_history', {})
    @patch('bot.main.user_data', {})
    @patch('bot.main.user_states', {})
    @patch('bot.main.bot', Mock())
    def test_handle_text_main_menu(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.from_user.id = 12345
        mock_message.text = "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        
        handle_text(mock_message)
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert True
    
    @patch('bot.main.log_activity')
    @patch('bot.main.BotStates', Mock())
    @patch('bot.main.user_data', {})
    @patch('bot.main.user_states', {})
    @patch('bot.main.bot', Mock())
    def test_start_danger_report(self):
        """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        
        start_danger_report(mock_message)
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert True
    
    @patch('bot.main.log_activity')
    @patch('bot.main.BotStates', Mock())
    @patch('bot.main.user_states', {})
    @patch('bot.main.bot', Mock())
    def test_start_shelter_finder(self):
        """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        
        start_shelter_finder(mock_message)
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert True
    
    @patch('bot.main.log_activity')
    @patch('bot.main.BotStates', Mock())
    @patch('bot.main.user_data', {})
    @patch('bot.main.user_states', {})
    @patch('bot.main.bot', Mock())
    def test_start_improvement_suggestion(self):
        """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        
        start_improvement_suggestion(mock_message)
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert True


class TestLocationAndMediaHandlers:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    
    @patch('bot.main.find_nearest_shelter')
    @patch('bot.main.user_states', {12345: 'shelter_finder'})
    @patch('bot.main.bot', Mock())
    def test_handle_location_shelter_finder(self, mock_find):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.from_user.id = 12345
        mock_message.location.latitude = 55.7558
        mock_message.location.longitude = 37.6176
        
        handle_location(mock_message)
        
        mock_find.assert_called_with(12345, 55.7558, 37.6176)
    
    @patch('bot.main.handle_danger_report_location', return_value={'text': 'Test', 'reply_markup': Mock()})
    @patch('bot.main.user_data', {})
    @patch('bot.main.user_states', {12345: 'danger_report'})
    @patch('bot.main.bot', Mock())
    def test_handle_location_danger_report(self, mock_handler):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.from_user.id = 12345
        mock_message.location.latitude = 55.7558
        mock_message.location.longitude = 37.6176
        
        handle_location(mock_message)
        
        mock_handler.assert_called()
    
    @patch('bot.main.handle_danger_report_media', return_value="Test response")
    @patch('bot.main.MAX_VIDEO_SIZE_MB', 300)
    @patch('bot.main.MAX_FILE_SIZE_MB', 20)
    @patch('bot.main.user_data', {})
    @patch('bot.main.user_states', {12345: 'danger_report'})
    @patch('bot.main.bot', Mock())
    def test_handle_media(self, mock_handler):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        mock_message = Mock()
        mock_message.chat.id = 12345
        mock_message.from_user.username = "test_user"
        mock_message.from_user.id = 12345
        mock_message.content_type = 'photo'
        
        handle_media(mock_message)
        
        mock_handler.assert_called()


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
