#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ RPRZ Safety Bot
"""

import os
import sys
import json
import time
import unittest
from unittest.mock import Mock, patch, MagicMock
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'bot'))

# –ò–º–ø–æ—Ä—Ç—ã
from handlers import (
    get_main_menu_keyboard, get_back_keyboard, get_media_keyboard,
    handle_danger_report_text, handle_danger_report_location, handle_danger_report_media,
    handle_shelter_finder_text, handle_shelter_finder_location, show_shelters_list,
    handle_safety_consultant_text, show_documents_list, start_question_mode, handle_safety_question,
    handle_improvement_suggestion_text, finish_danger_report,
    log_activity, log_incident, log_suggestion
)

class TestRPRZBot(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è RPRZ Safety Bot"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.placeholders = {
            'shelters': [
                {
                    'name': '–¢–µ—Å—Ç–æ–≤–æ–µ —É–±–µ–∂–∏—â–µ 1',
                    'description': '–û–ø–∏—Å–∞–Ω–∏–µ —É–±–µ–∂–∏—â–∞ 1',
                    'lat': '55.7558',
                    'lon': '37.6176',
                    'photo_path': 'test_photo1.jpg',
                    'map_link': 'https://test.com/map1'
                }
            ],
            'documents': [
                {
                    'title': '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
                    'description': '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                    'file_path': 'test_doc.pdf'
                }
            ],
            'safety_responses': [
                {
                    'question_keywords': ['–ø–æ–∂–∞—Ä'],
                    'answer': '–ü—Ä–∏ –ø–æ–∂–∞—Ä–µ –∑–≤–æ–Ω–∏—Ç–µ 112',
                    'source': '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
                }
            ],
            'contacts': {
                'security': '+7 (495) 123-45-67',
                'safety': '+7 (495) 123-45-68'
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤
        os.makedirs('test_logs', exist_ok=True)
        
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files = ['test_logs/activity.csv', 'test_logs/incidents.json', 'test_logs/suggestions.json']
        for file_path in test_files:
            if os.path.exists(file_path):
                os.remove(file_path)
    
    def test_keyboards(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        main_kb = get_main_menu_keyboard()
        self.assertIsNotNone(main_kb)
        self.assertEqual(len(main_kb.keyboard), 1)  # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        self.assertEqual(len(main_kb.keyboard[0]), 4)  # –ß–µ—Ç—ã—Ä–µ –∫–Ω–æ–ø–∫–∏
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_kb = get_back_keyboard()
        self.assertIsNotNone(back_kb)
        self.assertEqual(len(back_kb.keyboard), 1)
        self.assertEqual(len(back_kb.keyboard[0]), 1)
        
        # –ú–µ–¥–∏–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        media_kb = get_media_keyboard()
        self.assertIsNotNone(media_kb)
        self.assertEqual(len(media_kb.keyboard), 1)
        self.assertEqual(len(media_kb.keyboard[0]), 2)
        
        print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_danger_report_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = Mock()
        message.chat.id = 12345
        message.from_user.username = "test_user"
        message.text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        
        user_data = {'step': 'description', 'description': '', 'location': None}
        
        # –®–∞–≥ 1: –û–ø–∏—Å–∞–Ω–∏–µ
        result = handle_danger_report_text(message, user_data, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertEqual(new_state, "danger_report")
        self.assertIn("–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", response['text'])
        
        # –®–∞–≥ 2: –ú–µ—Å—Ç–æ (—Ç–µ–∫—Å—Ç–æ–º)
        message.text = "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º"
        user_data['step'] = 'location'
        result = handle_danger_report_text(message, user_data, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertEqual(new_state, "danger_report")
        self.assertIn("–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", response['text'])
        
        # –®–∞–≥ 3: –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
        message.text = "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å"
        user_data['step'] = 'location_text'
        result = handle_danger_report_text(message, user_data, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertEqual(new_state, "danger_report")
        self.assertIn("–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤", response['text'])
        
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_shelter_finder(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â...")
        
        message = Mock()
        message.chat.id = 12345
        message.from_user.username = "test_user"
        message.text = "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â"
        
        # –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —É–±–µ–∂–∏—â
        result = handle_shelter_finder_text(message, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertEqual(new_state, "shelter_finder")
        self.assertIn("shelters", response)
        
        print("‚úÖ –ü–æ–∏—Å–∫ —É–±–µ–∂–∏—â —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_safety_consultant(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞...")
        
        message = Mock()
        message.chat.id = 12345
        message.from_user.username = "test_user"
        message.text = "üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        
        # –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        result = handle_safety_consultant_text(message, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertEqual(new_state, "safety_consultant")
        
        # –¢–µ—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        message.text = "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
        result = handle_safety_consultant_text(message, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertEqual(new_state, "safety_consultant")
        
        # –¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        message.text = "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ?"
        result = handle_safety_question(message, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertEqual(new_state, "safety_consultant")
        self.assertIn("–ø–æ–∂–∞—Ä", response['text'].lower())
        
        print("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_improvement_suggestion(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
        
        message = Mock()
        message.chat.id = 12345
        message.from_user.username = "test_user"
        message.text = "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
        
        result = handle_improvement_suggestion_text(message, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertEqual(new_state, "main_menu")
        self.assertIn("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", response['text'])
        
        print("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_logging_functions(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        log_activity(12345, "test_user", "test_action", "test_payload")
        self.assertTrue(os.path.exists('logs/activity.csv'))
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        incident_data = {
            'description': '–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç',
            'location': {'latitude': 55.7558, 'longitude': 37.6176},
            'user_id': 12345,
            'username': 'test_user'
        }
        log_incident(12345, incident_data)
        self.assertTrue(os.path.exists('logs/incidents.json'))
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestion_data = {
            'text': '–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
            'user_id': 12345,
            'username': 'test_user'
        }
        log_suggestion(12345, suggestion_data)
        self.assertTrue(os.path.exists('logs/suggestions.json'))
        
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_media_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...")
        
        message = Mock()
        message.chat.id = 12345
        message.from_user.username = "test_user"
        message.content_type = "photo"
        message.photo = [Mock(file_id="test_file_id", file_size=1024*1024)]  # 1MB
        message.video = None
        message.document = None
        
        user_data = {'media': []}
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
        result = handle_danger_report_media(message, user_data, 20, 300)
        self.assertIn("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω", result)
        self.assertEqual(len(user_data['media']), 1)
        
        # –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        user_data['media'] = [{'type': 'photo'}, {'type': 'photo'}, {'type': 'photo'}]
        result = handle_danger_report_media(message, user_data, 20, 300)
        self.assertIn("–ú–∞–∫—Å–∏–º—É–º 3 –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞", result)
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_geolocation_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...")
        
        message = Mock()
        message.chat.id = 12345
        message.from_user.username = "test_user"
        message.location = Mock()
        message.location.latitude = 55.7558
        message.location.longitude = 37.6176
        
        user_data = {'step': 'location'}
        
        result = handle_danger_report_location(message, user_data)
        self.assertIsInstance(result, dict)
        self.assertIn("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞", result['text'])
        self.assertEqual(user_data['step'], 'media')
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        message = Mock()
        message.chat.id = 12345
        message.from_user.username = "test_user"
        message.text = "x" * 501  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        user_data = {'step': 'description', 'description': '', 'location': None}
        result = handle_danger_report_text(message, user_data, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertIn("—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ", response)
        
        # –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        message.text = "x" * 1001  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        result = handle_improvement_suggestion_text(message, self.placeholders)
        self.assertIsInstance(result, tuple)
        new_state, response = result
        self.assertIn("—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ", response)
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RPRZ Safety Bot")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestRPRZBot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(result.failures) + len(result.errors)}")
    print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    
    if result.failures:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback}")
    
    if result.errors:
        print(f"\nüí• –û—à–∏–±–∫–∏:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback}")
    
    success_rate = ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun) * 100
    print(f"\nüéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print("üéâ –û—Ç–ª–∏—á–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    elif success_rate >= 70:
        print("‚ö†Ô∏è –•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        return False

if __name__ == '__main__':
    success = run_all_tests()
    sys.exit(0 if success else 1)

