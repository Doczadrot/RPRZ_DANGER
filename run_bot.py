#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ MVP Telegram-–±–æ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó
–° –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
"""

import os
import sys
import subprocess
from pathlib import Path
from loguru import logger

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ MVP –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó")
    
    project_root = Path(__file__).parent
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    try:
        result = subprocess.run([
            sys.executable, "startup_check.py"
        ], cwd=project_root, capture_output=True, text=True)
        
        if result.returncode != 0:
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            logger.error("–í—ã–≤–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            logger.error(result.stdout)
            logger.error(result.stderr)
            sys.exit(1)
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        sys.exit(1)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
    logger.info("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏...")
    try:
        result = subprocess.run([
            sys.executable, "bot_manager.py", "start"
        ], cwd=project_root, capture_output=True, text=True)
        
        if result.returncode != 0:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏")
            logger.error("–í—ã–≤–æ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
            logger.error(result.stdout)
            logger.error(result.stderr)
            sys.exit(1)
        
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        sys.path.append(str(project_root / 'bot'))
        from main import bot, logger as bot_logger
        
        bot_info = bot.get_me()
        bot_logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        
        bot.polling(none_stop=True, interval=3, timeout=20)
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        try:
            subprocess.run([
                sys.executable, "bot_manager.py", "stop"
            ], cwd=project_root)
        except:
            pass
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        try:
            subprocess.run([
                sys.executable, "bot_manager.py", "stop"
            ], cwd=project_root)
        except:
            pass
        sys.exit(1)

if __name__ == '__main__':
    main()
