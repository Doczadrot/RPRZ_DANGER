#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º
"""

import os
import sys
import subprocess
import time
import json
from pathlib import Path

def print_step(step, description):
    """–í—ã–≤–æ–¥–∏—Ç —à–∞–≥ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"\n{'='*60}")
    print(f"–®–∞–≥ {step}: {description}")
    print(f"{'='*60}")

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python")
    
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print_step(2, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    try:
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        result = subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                              capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        else:
            print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def stop_existing_processes():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    print_step(3, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ taskkill
        result = subprocess.run(["taskkill", "/f", "/im", "python.exe"], 
                              capture_output=True, timeout=10)
        
        if result.returncode == 0:
            print("–ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ taskkill")
        else:
            print("taskkill –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º psutil...")
            try:
                import psutil
                python_processes = [p for p in psutil.process_iter(['pid', 'name', 'cmdline']) 
                                  if p.info['name'] == 'python.exe']
                
                for proc in python_processes:
                    try:
                        proc.terminate()
                        print(f"   –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                    except:
                        pass
                print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ psutil")
            except ImportError:
                print("‚ö†Ô∏è psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        time.sleep(3)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return False

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª .env"""
    print_step(4, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env")
    
    if not os.path.exists(".env"):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("BOT_TOKEN=your_telegram_bot_token_here")
        print("ADMIN_CHAT_ID=your_admin_chat_id")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(".env", "r", encoding="utf-8") as f:
        content = f.read()
        
    if "your_telegram_bot_token_here" in content:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        return False
    
    print("‚úÖ –§–∞–π–ª .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return True

def clean_logs():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"""
    print_step(5, "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")
    
    logs_dir = Path("logs")
    if logs_dir.exists():
        removed_count = 0
        for file in logs_dir.glob("*.log"):
            try:
                file.unlink()
                print(f"   –£–¥–∞–ª–µ–Ω: {file.name}")
                removed_count += 1
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file.name}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {removed_count}")
    else:
        print("üìÅ –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...")
        logs_dir.mkdir(exist_ok=True)
        print("‚úÖ –ü–∞–ø–∫–∞ logs —Å–æ–∑–¥–∞–Ω–∞")

def test_bot_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É"""
    print_step(6, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
        sys.path.append("bot")
        from main import bot, BOT_TOKEN
        
        if not BOT_TOKEN or BOT_TOKEN == "your_telegram_bot_token_here":
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        bot_info = bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        print(f"   ID: {bot_info.id}")
        print(f"   –ò–º—è: {bot_info.first_name}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return False

def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    print_step(7, "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        process = subprocess.Popen([sys.executable, "run_bot.py"], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE)
        
        print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        
        # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        time.sleep(5)
        if process.poll() is None:
            print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
            return True
        else:
            print("‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
            stdout, stderr = process.communicate()
            if stderr:
                print(f"–û—à–∏–±–∫–∞: {stderr.decode('utf-8', errors='replace')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º –†–ü–†–ó")
    print("=" * 60)
    
    steps = [
        check_python_version,
        install_dependencies,
        stop_existing_processes,
        check_env_file,
        clean_logs,
        test_bot_connection,
        start_bot
    ]
    
    for i, step in enumerate(steps, 1):
        try:
            if not step():
                print(f"\n‚ùå –®–∞–≥ {i} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                return False
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {i}: {e}")
            return False
    
    print("\n–í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: python monitor_logs_improved.py")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: python stop_bot.py")
    
    return True

if __name__ == '__main__':
    main()
