#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPRZ Safety Bot –±–µ–∑ —ç–º–æ–¥–∑–∏
"""

import os
import sys
import json
import time
from datetime import datetime

def print_header():
    print("=" * 60)
    print(" " * 20 + "RPRZ Safety Bot" + " " * 20)
    print(" " * 15 + "–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" + " " * 15)
    print("=" * 60)
    print()

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        sys.path.insert(0, os.path.join(os.getcwd(), 'bot'))
        from handlers import get_main_menu_keyboard, get_back_keyboard
        print("   OK: –ò–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
    except Exception as e:
        print(f"   ERROR: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        with open('configs/data_placeholders.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        required_keys = ['shelters', 'documents', 'safety_responses', 'contacts']
        for key in required_keys:
            if key not in data:
                print(f"   ERROR: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {key}")
                return False
        
        print(f"   OK: –£–±–µ–∂–∏—â: {len(data['shelters'])}")
        print(f"   OK: –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(data['documents'])}")
        print(f"   OK: –û—Ç–≤–µ—Ç–æ–≤: {len(data['safety_responses'])}")
        return True
    except Exception as e:
        print(f"   ERROR: –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_keyboards():
    """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    try:
        from handlers import get_main_menu_keyboard, get_back_keyboard, get_media_keyboard
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        main_kb = get_main_menu_keyboard()
        if len(main_kb.keyboard[0]) != 4:
            print("   ERROR: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
            return False
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_kb = get_back_keyboard()
        if len(back_kb.keyboard[0]) != 1:
            print("   ERROR: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'")
            return False
        
        # –ú–µ–¥–∏–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        media_kb = get_media_keyboard()
        if len(media_kb.keyboard[0]) != 2:
            print("   ERROR: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–µ–¥–∏–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞")
            return False
        
        print("   OK: –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
    except Exception as e:
        print(f"   ERROR: –û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False

def test_logging():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        from handlers import log_activity
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        os.makedirs('logs', exist_ok=True)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_activity(99999, "test_user", "test_action", "test_payload")
        
        if os.path.exists('logs/activity.csv'):
            print("   OK: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("   ERROR: –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
    except Exception as e:
        print(f"   ERROR: –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_danger_report():
    """–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    try:
        from handlers import handle_danger_report_text
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        class MockMessage:
            def __init__(self):
                self.chat = type('Chat', (), {'id': 12345})()
                self.from_user = type('User', (), {'username': 'test_user'})()
                self.text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        
        message = MockMessage()
        user_data = {'step': 'description', 'description': '', 'location': None}
        placeholders = {'shelters': [], 'documents': [], 'safety_responses': [], 'contacts': {}}
        
        result = handle_danger_report_text(message, user_data, placeholders)
        
        if isinstance(result, tuple) and len(result) == 2:
            print("   OK: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("   ERROR: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            return False
    except Exception as e:
        print(f"   ERROR: –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_shelter_finder():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â"""
    print("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â...")
    try:
        from handlers import handle_shelter_finder_text
        
        class MockMessage:
            def __init__(self):
                self.chat = type('Chat', (), {'id': 12345})()
                self.from_user = type('User', (), {'username': 'test_user'})()
                self.text = "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â"
        
        message = MockMessage()
        placeholders = {'shelters': [{'name': 'Test', 'description': 'Test'}]}
        
        result = handle_shelter_finder_text(message, placeholders)
        
        if isinstance(result, tuple) and len(result) == 2:
            print("   OK: –ü–æ–∏—Å–∫ —É–±–µ–∂–∏—â —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("   ERROR: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            return False
    except Exception as e:
        print(f"   ERROR: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â: {e}")
        return False

def test_safety_consultant():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    print("7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞...")
    try:
        from handlers import handle_safety_consultant_text, handle_safety_question
        
        class MockMessage:
            def __init__(self, text):
                self.chat = type('Chat', (), {'id': 12345})()
                self.from_user = type('User', (), {'username': 'test_user'})()
                self.text = text
        
        placeholders = {
            'safety_responses': [
                {'question_keywords': ['–ø–æ–∂–∞—Ä'], 'answer': '–ó–≤–æ–Ω–∏—Ç–µ 112', 'source': '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'}
            ]
        }
        
        # –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        message = MockMessage("üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        result = handle_safety_consultant_text(message, placeholders)
        
        if isinstance(result, tuple):
            print("   OK: –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("   ERROR: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            return False
    except Exception as e:
        print(f"   ERROR: –û—à–∏–±–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞: {e}")
        return False

def test_improvement_suggestion():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    print("8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
    try:
        from handlers import handle_improvement_suggestion_text
        
        class MockMessage:
            def __init__(self):
                self.chat = type('Chat', (), {'id': 12345})()
                self.from_user = type('User', (), {'username': 'test_user'})()
                self.text = "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        
        message = MockMessage()
        placeholders = {}
        
        result = handle_improvement_suggestion_text(message, placeholders)
        
        if isinstance(result, tuple) and len(result) == 2:
            print("   OK: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
        else:
            print("   ERROR: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            return False
    except Exception as e:
        print(f"   ERROR: –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header()
    
    tests = [
        test_imports,
        test_configuration,
        test_keyboards,
        test_logging,
        test_danger_report,
        test_shelter_finder,
        test_safety_consultant,
        test_improvement_suggestion
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 60)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("–û–¢–õ–ò–ß–ù–û! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    elif passed >= total * 0.8:
        print("–•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        print("–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é!")
        return True
    else:
        print("–ü–†–û–ë–õ–ï–ú–´! –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)

