#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –±–æ—Ç–∞
"""

import os
import sys
import time
import threading
from datetime import datetime
from pathlib import Path

def monitor_file(file_path, callback):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ñ–∞–π–ª –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    print(f"üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {file_path}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω—Ü–∞
    with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
        f.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        
        while True:
            line = f.readline()
            if line:
                callback(line.strip())
            else:
                time.sleep(0.1)

def colorize_log_line(line):
    """–¶–≤–µ—Ç–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞"""
    if "ERROR" in line:
        return f"\033[91m{line}\033[0m"  # –ö—Ä–∞—Å–Ω—ã–π
    elif "WARNING" in line:
        return f"\033[93m{line}\033[0m"  # –ñ–µ–ª—Ç—ã–π
    elif "INFO" in line:
        return f"\033[92m{line}\033[0m"  # –ó–µ–ª–µ–Ω—ã–π
    elif "DEBUG" in line:
        return f"\033[96m{line}\033[0m"  # –ì–æ–ª—É–±–æ–π
    else:
        return line

def print_log_line(line):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ —Å —Ü–≤–µ—Ç–æ–º"""
    if line:
        colored_line = colorize_log_line(line)
        print(colored_line)

def monitor_all_logs():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤"""
    logs_dir = Path("logs")
    if not logs_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    log_files = [
        "app.log",
        "errors.log", 
        "user_actions.log",
        "api_requests.log"
    ]
    
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –±–æ—Ç–∞ –†–ü–†–ó")
    print("=" * 50)
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)
    
    threads = []
    
    for log_file in log_files:
        file_path = logs_dir / log_file
        if file_path.exists():
            thread = threading.Thread(
                target=monitor_file,
                args=(str(file_path), print_log_line),
                daemon=True
            )
            thread.start()
            threads.append(thread)
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
    
    if not threads:
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
        return
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def show_recent_logs(lines=20):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤"""
    logs_dir = Path("logs")
    if not logs_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ app.log
    app_log = logs_dir / "app.log"
    if app_log.exists():
        print(f"\nüìÑ {app_log.name}:")
        with open(app_log, 'r', encoding='utf-8', errors='replace') as f:
            all_lines = f.readlines()
            for line in all_lines[-lines:]:
                print_log_line(line.strip())
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    errors_log = logs_dir / "errors.log"
    if errors_log.exists():
        print(f"\nüö® {errors_log.name}:")
        with open(errors_log, 'r', encoding='utf-8', errors='replace') as f:
            all_lines = f.readlines()
            for line in all_lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
                print_log_line(line.strip())

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        if sys.argv[1] == "recent":
            show_recent_logs()
        elif sys.argv[1].isdigit():
            show_recent_logs(int(sys.argv[1]))
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python monitor_logs_improved.py [recent|—á–∏—Å–ª–æ_—Å—Ç—Ä–æ–∫]")
    else:
        monitor_all_logs()

if __name__ == '__main__':
    main()

