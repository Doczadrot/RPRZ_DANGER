#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó
–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import os
import sys
import json
import subprocess
import time
from pathlib import Path
from loguru import logger

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.add(
        "logs/startup_check.log",
        rotation="1 day",
        retention="7 days",
        level="INFO",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}"
    )

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    logger.info("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    
    version = sys.version_info
    if version < (3, 8):
        logger.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}")
        return False
    
    logger.info(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'telebot',
        'loguru', 
        'python-dotenv',
        'psutil'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            logger.info(f"‚úÖ {package}")
        except ImportError:
            logger.error(f"‚ùå {package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package)
    
    if missing_packages:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: pip install " + " ".join(missing_packages))
        return False
    
    return True

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_dirs = ['bot', 'logs', 'assets', 'configs']
    required_files = ['.env', 'bot/main.py', 'bot/handlers.py']
    
    project_root = Path(__file__).parent
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
    for dir_name in required_dirs:
        dir_path = project_root / dir_name
        if not dir_path.exists():
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ {dir_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        logger.info(f"‚úÖ –ü–∞–ø–∫–∞ {dir_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    for file_name in required_files:
        file_path = project_root / file_name
        if not file_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        logger.info(f"‚úÖ –§–∞–π–ª {file_name}")
    
    return True

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_file = Path(__file__).parent / ".env"
    if not env_file.exists():
        logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.info("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    from dotenv import load_dotenv
    load_dotenv(env_file)
    
    required_vars = ['BOT_TOKEN']
    optional_vars = ['ADMIN_CHAT_ID', 'LOG_LEVEL', 'MAX_FILE_SIZE_MB']
    
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            logger.error(f"‚ùå {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_vars.append(var)
        else:
            logger.info(f"‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            logger.info(f"‚úÖ {var} = {value}")
        else:
            logger.info(f"‚ö†Ô∏è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    
    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    return True

def check_running_processes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    try:
        import psutil
        
        running_bots = []
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
            try:
                if proc.info['name'] in ['python.exe', 'python']:
                    cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–æ—Ç
                    if any(keyword in cmdline.lower() for keyword in ['bot', 'main.py', 'run_bot.py']):
                        running_bots.append({
                            'pid': proc.info['pid'],
                            'cmdline': cmdline,
                            'create_time': proc.info['create_time']
                        })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if running_bots:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(running_bots)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞:")
            for bot in running_bots:
                logger.warning(f"  - PID {bot['pid']}: {bot['cmdline']}")
            
            response = input("–•–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã? (y/N): ").strip().lower()
            if response == 'y':
                return kill_bot_processes()
            else:
                logger.error("‚ùå –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
                return False
        else:
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
    except ImportError:
        logger.warning("‚ö†Ô∏è psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return False

def kill_bot_processes():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞"""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞...")
    
    try:
        import psutil
        
        killed_count = 0
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if proc.info['name'] in ['python.exe', 'python']:
                    cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                    
                    if any(keyword in cmdline.lower() for keyword in ['bot', 'main.py', 'run_bot.py']):
                        process = psutil.Process(proc.info['pid'])
                        process.terminate()
                        
                        try:
                            process.wait(timeout=5)
                            logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {proc.info['pid']} –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        except psutil.TimeoutExpired:
                            process.kill()
                            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {proc.info['pid']} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                        
                        killed_count += 1
                        
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if killed_count > 0:
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {killed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        else:
            logger.info("‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return False

def check_lock_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    logger.info("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
    
    project_root = Path(__file__).parent
    lock_file = project_root / "bot.lock"
    pid_file = project_root / "bot.pid"
    
    if lock_file.exists() or pid_file.exists():
        logger.warning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        if pid_file.exists():
            try:
                with open(pid_file, 'r') as f:
                    pid = int(f.read().strip())
                
                import psutil
                if psutil.pid_exists(pid):
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω")
                    response = input("–•–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å? (y/N): ").strip().lower()
                    if response == 'y':
                        try:
                            process = psutil.Process(pid)
                            process.terminate()
                            process.wait(timeout=5)
                            logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à–µ–Ω")
                        except:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}")
                            return False
                    else:
                        logger.error("‚ùå –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω - –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
                        return False
                else:
                    logger.info("‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PID —Ñ–∞–π–ª–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        try:
            if lock_file.exists():
                lock_file.unlink()
                logger.info("‚úÖ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            if pid_file.exists():
                pid_file.unlink()
                logger.info("‚úÖ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π PID —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    else:
        logger.info("‚úÖ –§–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return True

def test_bot_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É"""
    logger.info("ü§ñ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É...")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        import telebot
        bot = telebot.TeleBot(bot_token)
        
        bot_info = bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} (ID: {bot_info.id})")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    setup_logging()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞")
    
    checks = [
        ("–í–µ—Ä—Å–∏—è Python", check_python_version),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_project_structure),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment),
        ("–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", check_running_processes),
        ("–§–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", check_lock_files),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É", test_bot_connection)
    ]
    
    failed_checks = []
    
    for check_name, check_func in checks:
        logger.info(f"\n{'='*50}")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {check_name}")
        logger.info(f"{'='*50}")
        
        try:
            if not check_func():
                failed_checks.append(check_name)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {check_name}: {e}")
            failed_checks.append(check_name)
    
    logger.info(f"\n{'='*50}")
    logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò")
    logger.info(f"{'='*50}")
    
    if failed_checks:
        logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –û—à–∏–±–∫–∏ –≤:")
        for check in failed_checks:
            logger.error(f"  - {check}")
        logger.info("\nüí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É")
        return False
    else:
        logger.info("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
