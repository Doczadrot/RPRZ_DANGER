"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import os
import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Any, Tuple, Optional

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_instance = None

def set_bot_instance(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    global bot_instance
    bot_instance = bot
    logger.info("‚úÖ Bot instance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è notifications")

def send_incident_notification(incident_data: Dict[str, Any]) -> Tuple[bool, str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ —á–µ—Ä–µ–∑ email –∏ Telegram
    
    Args:
        incident_data: –î–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
        
    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∞–¥–º–∏–Ω—É
        telegram_success = send_telegram_notification(incident_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        email_success = send_email_notification(incident_data)
        
        if telegram_success and email_success:
            return True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∏ Email"
        elif telegram_success:
            return True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (Email –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        elif email_success:
            return True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Email (Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        else:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def send_telegram_notification(incident_data: Dict[str, Any]) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É"""
    try:
        if not bot_instance:
            logger.warning("‚ö†Ô∏è Bot instance –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return False
            
        admin_chat_id = os.getenv('ADMIN_CHAT_ID')
        if not admin_chat_id:
            logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_incident_message(incident_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot_instance.send_message(
            chat_id=admin_chat_id,
            text=message,
            parse_mode='HTML'
        )
        
        logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def send_email_notification(incident_data: Dict[str, Any]) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
        smtp_server = (os.getenv('YANDEX_SMTP_HOST') or 
                      os.getenv('SMTP_SERVER') or 
                      os.getenv('SMTP_HOST'))
        smtp_port = int(os.getenv('YANDEX_SMTP_PORT') or 
                       os.getenv('SMTP_PORT') or 
                       os.getenv('PORT', 587))
        smtp_username = (os.getenv('YANDEX_SMTP_USER') or 
                        os.getenv('SMTP_USERNAME') or 
                        os.getenv('SMTP_USER'))
        smtp_password = (os.getenv('YANDEX_SMTP_PASSWORD') or 
                        os.getenv('SMTP_PASSWORD') or 
                        os.getenv('SMTP_PASS'))
        email_to = (os.getenv('ADMIN_EMAIL') or 
                   os.getenv('INCIDENT_NOTIFICATION_EMAILS') or 
                   os.getenv('NOTIFICATION_EMAIL'))
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        logger.info("üîç –û—Ç–ª–∞–¥–∫–∞ SMTP –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
        logger.info(f"YANDEX_SMTP_HOST: {os.getenv('YANDEX_SMTP_HOST', '–ù–ï–¢')}")
        logger.info(f"YANDEX_SMTP_PORT: {os.getenv('YANDEX_SMTP_PORT', '–ù–ï–¢')}")
        logger.info(f"YANDEX_SMTP_USER: {os.getenv('YANDEX_SMTP_USER', '–ù–ï–¢')}")
        logger.info(f"YANDEX_SMTP_PASSWORD: {'–ï–°–¢–¨' if os.getenv('YANDEX_SMTP_PASSWORD') else '–ù–ï–¢'}")
        logger.info(f"ADMIN_EMAIL: {os.getenv('ADMIN_EMAIL', '–ù–ï–¢')}")
        logger.info(f"INCIDENT_NOTIFICATION_EMAILS: {os.getenv('INCIDENT_NOTIFICATION_EMAILS', '–ù–ï–¢')}")
        logger.info(f"üîç SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: server={smtp_server}, port={smtp_port}, user={smtp_username}, to={email_to}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        all_env_vars = {k: v for k, v in os.environ.items() if 'SMTP' in k or 'EMAIL' in k or 'YANDEX' in k}
        logger.info(f"üîç –í—Å–µ SMTP/EMAIL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {all_env_vars}")
        
        if not all([smtp_server, smtp_username, smtp_password, email_to]):
            missing = []
            if not smtp_server: missing.append("YANDEX_SMTP_HOST –∏–ª–∏ SMTP_SERVER")
            if not smtp_port: missing.append("YANDEX_SMTP_PORT –∏–ª–∏ SMTP_PORT") 
            if not smtp_username: missing.append("YANDEX_SMTP_USER –∏–ª–∏ SMTP_USERNAME")
            if not smtp_password: missing.append("YANDEX_SMTP_PASSWORD –∏–ª–∏ SMTP_PASSWORD")
            if not email_to: missing.append("ADMIN_EMAIL –∏–ª–∏ INCIDENT_NOTIFICATION_EMAILS")
            logger.warning(f"‚ö†Ô∏è SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–æ–ª–Ω—ã–µ. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
            return False
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart()
        msg['From'] = smtp_username
        msg['To'] = email_to
        msg['Subject'] = f"üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ RPRZ –±–æ—Ç–µ - {incident_data.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        body = format_incident_email(incident_data)
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(smtp_username, smtp_password)
            server.send_message(msg)
            
        logger.info("‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def format_incident_message(incident_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ –¥–ª—è Telegram"""
    from datetime import datetime
    
    message = f"üö® <b>–ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ RPRZ –±–æ—Ç–µ</b>\n\n"
    message += f"üìã <b>–¢–∏–ø:</b> {incident_data.get('type', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏')}\n"
    message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {incident_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    message += f"üÜî <b>ID:</b> {incident_data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö\n"
    message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {incident_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if incident_data.get('location'):
        lat = incident_data['location'].get('latitude', '')
        lon = incident_data['location'].get('longitude', '')
        message += f"üìç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {lat}, {lon}\n"
    elif incident_data.get('location_text'):
        message += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {incident_data['location_text']}\n"
    else:
        message += f"üìç <b>–ú–µ—Å—Ç–æ:</b> –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
        
    message += f"üì∑ <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:</b> {incident_data.get('media_count', 0)}\n"
        
    if incident_data.get('severity'):
        message += f"‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å:</b> {incident_data['severity']}\n"
        
    return message

def format_incident_email(incident_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ"""
    from datetime import datetime
    
    body = f"–ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ RPRZ –±–æ—Ç–µ\n\n"
    body += f"–¢–∏–ø: {incident_data.get('type', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏')}\n"
    body += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {incident_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    body += f"ID: {incident_data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    body += f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö\n"
    body += f"–û–ø–∏—Å–∞–Ω–∏–µ: {incident_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if incident_data.get('location'):
        lat = incident_data['location'].get('latitude', '')
        lon = incident_data['location'].get('longitude', '')
        body += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n"
    elif incident_data.get('location_text'):
        body += f"–ú–µ—Å—Ç–æ: {incident_data['location_text']}\n"
    else:
        body += f"–ú–µ—Å—Ç–æ: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
        
    body += f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {incident_data.get('media_count', 0)}\n"
        
    if incident_data.get('severity'):
        body += f"–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {incident_data['severity']}\n"
        
    body += f"\n\n–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç RPRZ –±–æ—Ç–∞."
    
    return body
