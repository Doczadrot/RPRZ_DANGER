"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import logging
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import Any, Dict, Optional, Tuple

import resend

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_instance = None


def set_bot_instance(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    global bot_instance
    bot_instance = bot
    logger.info("‚úÖ Bot instance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è notifications")


def send_incident_notification(
    incident_data: Dict[str, Any], media_files: list = None
) -> Tuple[bool, str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ —á–µ—Ä–µ–∑ email –∏ Telegram

    Args:
        incident_data: –î–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ

    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    logger.info("üîç –ù–∞—á–∞–ª–æ send_incident_notification")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∞–¥–º–∏–Ω—É
        telegram_success = send_telegram_notification(incident_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
        email_success = send_email_notification(incident_data, media_files)

        if telegram_success and email_success:
            return True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∏ Email"
        elif telegram_success:
            return True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (Email –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        elif email_success:
            return True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Email (Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        else:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"


def send_telegram_notification(incident_data: Dict[str, Any]) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É"""
    try:
        if not bot_instance:
            logger.warning("‚ö†Ô∏è Bot instance –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return False

        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        if not admin_chat_id:
            logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_incident_message(incident_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot_instance.send_message(
            chat_id=admin_chat_id, text=message, parse_mode="HTML"
        )

        logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


def send_email_via_smtp(
    incident_data: Dict[str, Any], media_files: list = None
) -> bool:
    """Fallback: –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMTP –µ—Å–ª–∏ Resend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    try:
        import smtplib
        from email import encoders
        from email.mime.base import MIMEBase
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP (–∏–∑ env.example)
        smtp_host = os.getenv("YANDEX_SMTP_HOST", "smtp.yandex.ru")
        smtp_port = int(os.getenv("YANDEX_SMTP_PORT", "587"))
        smtp_user = os.getenv("YANDEX_SMTP_USER")
        smtp_password = os.getenv("YANDEX_SMTP_PASSWORD")
        admin_email = os.getenv("ADMIN_EMAIL") or os.getenv(
            "INCIDENT_NOTIFICATION_EMAILS"
        )

        logger.info("üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ SMTP fallback...")
        logger.info(f"SMTP Host: {smtp_host}:{smtp_port}")
        logger.info(f"SMTP User: {smtp_user or '–ù–ï–¢'}")

        if not all([smtp_user, smtp_password, admin_email]):
            logger.warning("‚ö†Ô∏è SMTP credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            return False

        # –°–æ–∑–¥–∞–µ–º multipart —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart("mixed")
        msg["From"] = smtp_user
        msg["To"] = admin_email
        msg[
            "Subject"
        ] = f"üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ RPRZ –±–æ—Ç–µ - {incident_data.get('description', '')[:30]}"

        # –î–æ–±–∞–≤–ª—è–µ–º HTML body
        body_text = format_incident_email(incident_data)
        html_body = _format_incident_html(incident_data, media_files)

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å (plain text + HTML)
        msg_alternative = MIMEMultipart("alternative")
        msg_alternative.attach(MIMEText(body_text, "plain", "utf-8"))
        msg_alternative.attach(MIMEText(html_body, "html", "utf-8"))
        msg.attach(msg_alternative)

        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        if media_files:
            logger.info(f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ {len(media_files)} —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ SMTP")
            for idx, media in enumerate(media_files):
                try:
                    filename = media.get("filename", f"attachment_{idx+1}.jpg")
                    mime_type = media.get("mime_type", "application/octet-stream")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º maintype –∏ subtype
                    if "/" in mime_type:
                        maintype, subtype = mime_type.split("/", 1)
                    else:
                        maintype, subtype = "application", "octet-stream"

                    part = MIMEBase(maintype, subtype)
                    part.set_payload(media["data"])
                    encoders.encode_base64(part)
                    part.add_header(
                        "Content-Disposition", f'attachment; filename="{filename}"'
                    )
                    msg.attach(part)
                    logger.info(f"‚úÖ SMTP: –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª {filename}")
                except Exception as e:
                    logger.error(f"‚ùå SMTP: –æ—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {idx+1}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMTP
        with smtplib.SMTP(smtp_host, smtp_port, timeout=30) as server:
            server.starttls()
            server.login(smtp_user, smtp_password)
            server.send_message(msg)

        logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ SMTP fallback –Ω–∞ {admin_email}")
        return True

    except Exception as e:
        logger.error(f"‚ùå SMTP fallback –æ—à–∏–±–∫–∞: {e}")
        import traceback

        logger.error(traceback.format_exc())
        return False


def _format_incident_html(
    incident_data: Dict[str, Any], media_files: list = None
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç HTML –¥–ª—è –ø–∏—Å—å–º–∞ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ"""
    html_content = f"""
    <html>
    <body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f5f5f5;">
        <div style="background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <h2 style="color: #d32f2f; margin-top: 0;">üö® –ù–û–í–´–ô –ò–ù–¶–ò–î–ï–ù–¢</h2>
            <table style="width: 100%; border-collapse: collapse;">
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #eee;">{incident_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: {incident_data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})</td>
                </tr>
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #eee;">{incident_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</td>
                </tr>
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>üìç –ú–µ—Å—Ç–æ:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #eee;">{incident_data.get('location_text', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</td>
                </tr>
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>üïê –í—Ä–µ–º—è:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #eee;">{incident_data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</td>
                </tr>
            </table>
    """

    if media_files:
        html_content += f"""
            <div style="margin-top: 20px; padding: 15px; background-color: #e3f2fd; border-left: 4px solid #2196f3; border-radius: 4px;">
                <h3 style="margin-top: 0; color: #1976d2;">üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(media_files)}):</h3>
                <ul style="list-style: none; padding: 0;">
        """
        for idx, media in enumerate(media_files, 1):
            media_type = media.get("type", "photo")
            filename = media.get("filename", f"attachment_{idx}")

            if media_type == "photo":
                icon, type_name = "üì∑", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"
            elif media_type == "video":
                icon, type_name = "üé•", "–í–∏–¥–µ–æ"
            elif media_type == "document":
                icon, type_name = "üìÑ", "–î–æ–∫—É–º–µ–Ω—Ç"
            else:
                icon, type_name = "üìé", "–§–∞–π–ª"

            html_content += f'<li style="padding: 5px 0;">{icon} <strong>{type_name} {idx}:</strong> <code>{filename}</code></li>'

        html_content += """
                </ul>
                <p style="margin-bottom: 0; color: #666; font-size: 0.9em;">
                    üí° –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –ø–∏—Å—å–º—É. –°–º–æ—Ç—Ä–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∏–∂–µ.
                </p>
            </div>
        """

    html_content += """
            <div style="margin-top: 20px; padding: 10px; background-color: #f5f5f5; border-radius: 4px; font-size: 0.85em; color: #666;">
                <p style="margin: 0;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç RPRZ –ë–æ—Ç–∞.</p>
            </div>
        </div>
    </body>
    </html>
    """
    return html_content


def send_email_notification(
    incident_data: Dict[str, Any], media_files: list = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Resend API —Å fallback –Ω–∞ SMTP"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Resend
        resend_api_key = os.getenv("RESEND_API_KEY")
        email_from = os.getenv("RESEND_FROM_EMAIL") or os.getenv("ADMIN_EMAIL")
        email_to = os.getenv("ADMIN_EMAIL") or os.getenv("INCIDENT_NOTIFICATION_EMAILS")

        logger.info("üîç –û—Ç–ª–∞–¥–∫–∞ Resend –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
        logger.info(f"RESEND_API_KEY: {'–ï–°–¢–¨' if resend_api_key else '–ù–ï–¢'}")
        logger.info(f"RESEND_FROM_EMAIL: {email_from or '–ù–ï–¢'}")
        logger.info(f"ADMIN_EMAIL: {email_to or '–ù–ï–¢'}")

        if not all([resend_api_key, email_from, email_to]):
            missing = []
            if not resend_api_key:
                missing.append("RESEND_API_KEY")
            if not email_from:
                missing.append("RESEND_FROM_EMAIL –∏–ª–∏ ADMIN_EMAIL")
            if not email_to:
                missing.append("ADMIN_EMAIL")
            logger.warning(
                f"‚ö†Ô∏è Resend –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–æ–ª–Ω—ã–µ. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}"
            )
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ SMTP fallback...")
            return send_email_via_smtp(incident_data, media_files)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Resend
        resend.api_key = resend_api_key

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
        subject = f"üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ RPRZ –±–æ—Ç–µ - {incident_data.get('type', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏')}"
        body = format_incident_email(incident_data)
        html_content = _format_incident_html(incident_data, media_files)

        # –§–æ—Ä–º–∏—Ä—É–µ–º attachments –¥–ª—è Resend API
        attachments = []
        if media_files:
            import base64

            logger.info(f"üìé –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ {len(media_files)} –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è Resend API")

            for idx, media in enumerate(media_files):
                try:
                    # Resend API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç attachments –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                    # {"filename": str, "content": base64_encoded_bytes}
                    filename = media.get("filename", f"attachment_{idx+1}.jpg")
                    content_base64 = base64.b64encode(media["data"]).decode("utf-8")

                    attachments.append(
                        {"filename": filename, "content": content_base64}
                    )
                    logger.info(
                        f"‚úÖ –í–ª–æ–∂–µ–Ω–∏–µ {idx+1} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {filename} ({len(media['data'])} bytes)"
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è {idx+1}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Resend API
        params = {
            "from": email_from,
            "to": [email_to],
            "subject": subject,
            "text": body,
            "html": html_content,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º attachments —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if attachments:
            params["attachments"] = attachments
            logger.info(f"üìé –î–æ–±–∞–≤–ª–µ–Ω–æ {len(attachments)} –≤–ª–æ–∂–µ–Ω–∏–π –≤ –ø–∏—Å—å–º–æ")

        email = resend.Emails.send(params)
        logger.info(f"‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Resend: {email}")
        logger.info(f"üìß Email ID: {email.get('id', 'N/A')}")
        logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å: {email_from} –Ω–∞: {email_to}")
        logger.info(f"üìß –í–ª–æ–∂–µ–Ω–∏–π –≤ –ø–∏—Å—å–º–µ: {len(attachments)}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ Resend: {e}")
        import traceback

        logger.error(traceback.format_exc())

        # Fallback –Ω–∞ SMTP –ø—Ä–∏ –æ—à–∏–±–∫–µ Resend
        logger.warning("üîÑ Resend –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º SMTP fallback...")
        return send_email_via_smtp(incident_data, media_files)


def format_incident_message(incident_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ –¥–ª—è Telegram"""
    from datetime import datetime

    message = f"üö® <b>–ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ RPRZ –±–æ—Ç–µ</b>\n\n"
    message += f"üìã <b>–¢–∏–ø:</b> {incident_data.get('type', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏')}\n"
    message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {incident_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    message += f"üÜî <b>ID:</b> {incident_data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö\n"
    message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {incident_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

    if incident_data.get("location"):
        lat = incident_data["location"].get("latitude", "")
        lon = incident_data["location"].get("longitude", "")
        message += f"üìç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {lat}, {lon}\n"
    elif incident_data.get("location_text"):
        message += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {incident_data['location_text']}\n"
    else:
        message += f"üìç <b>–ú–µ—Å—Ç–æ:</b> –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    message += f"üì∑ <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:</b> {incident_data.get('media_count', 0)}\n"

    if incident_data.get("severity"):
        message += f"‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å:</b> {incident_data['severity']}\n"

    return message


def format_incident_email(incident_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ"""
    from datetime import datetime

    body = f"–ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ RPRZ –±–æ—Ç–µ\n\n"
    body += f"–¢–∏–ø: {incident_data.get('type', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏')}\n"
    body += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {incident_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    body += f"ID: {incident_data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    body += f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö\n"
    body += f"–û–ø–∏—Å–∞–Ω–∏–µ: {incident_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

    if incident_data.get("location"):
        lat = incident_data["location"].get("latitude", "")
        lon = incident_data["location"].get("longitude", "")
        body += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n"
    elif incident_data.get("location_text"):
        body += f"–ú–µ—Å—Ç–æ: {incident_data['location_text']}\n"
    else:
        body += f"–ú–µ—Å—Ç–æ: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    body += f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {incident_data.get('media_count', 0)}\n"

    if incident_data.get("severity"):
        body += f"–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {incident_data['severity']}\n"

    body += f"\n\n–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç RPRZ –±–æ—Ç–∞."

    return body
