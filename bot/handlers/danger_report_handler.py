"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
from typing import Optional
from telegram import Update
from telegram.ext import ContextTypes

from bot.base.base_handler import BaseHandler
from bot.interfaces import IStateManager, IKeyboardFactory
from bot.services.danger_report_service import DangerReportService
from bot.models.user_state import DangerReportData


class DangerReportHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, logger, state_manager: IStateManager, 
                 keyboard_factory: IKeyboardFactory, danger_service: DangerReportService):
        super().__init__(logger, state_manager)
        self.keyboard_factory = keyboard_factory
        self.danger_service = danger_service
    
    async def _handle_impl(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
            await self._start_danger_report(update, context)
        else:
            await self._handle_danger_flow(update, context)
    
    async def _start_danger_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.state_manager.set_user_state(user_id, {
            'state': 'danger_description',
            'data': {}
        })
        
        await update.message.reply_text(
            "üö® **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏**\n\n"
            "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã:\n"
            "‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n"
            "‚Ä¢ –ï—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ?",
            reply_markup=self.keyboard_factory.create_back_button(),
            parse_mode='Markdown'
        )
    
    async def _handle_danger_flow(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        user_state = self.state_manager.get_user_state(user_id)
        
        if not user_state:
            return
        
        state = user_state['state']
        data = user_state['data']
        
        if state == 'danger_description':
            await self._handle_description(update, context, data)
        elif state == 'danger_location':
            await self._handle_location(update, context, data)
        elif state == 'danger_media':
            await self._handle_media(update, context, data)
        elif state == 'danger_confirm':
            await self._handle_confirmation(update, context, data)
    
    async def _handle_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        
        data['description'] = update.message.text
        self.state_manager.set_user_state(user_id, {
            'state': 'danger_location',
            'data': data
        })
        
        await update.message.reply_text(
            "üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ**\n\n"
            "–£–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Ç—É–∞—Ü–∏—è:\n"
            "‚Ä¢ –ê–¥—Ä–µ—Å –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞\n"
            "‚Ä¢ –≠—Ç–∞–∂, –∫–∞–±–∏–Ω–µ—Ç, –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è\n"
            "‚Ä¢ –õ—é–±—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã",
            reply_markup=self.keyboard_factory.create_back_button(),
            parse_mode='Markdown'
        )
    
    async def _handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        data['location'] = update.message.text
        self.state_manager.set_user_state(user_id, {
            'state': 'danger_media',
            'data': data
        })
        
        await update.message.reply_text(
            "üìé **–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã**\n\n"
            "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é.\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: —Ñ–æ—Ç–æ –¥–æ 20 –ú–ë, –≤–∏–¥–µ–æ –¥–æ 300 –ú–ë",
            reply_markup=self.keyboard_factory.create_media_buttons(),
            parse_mode='Markdown'
        )
    
    async def _handle_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await self._show_confirmation(update, context, data)
        elif text == "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ":
            await update.message.reply_text(
                "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é",
                reply_markup=self.keyboard_factory.create_media_buttons()
            )
        elif text == "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ":
            await update.message.reply_text(
                "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é",
                reply_markup=self.keyboard_factory.create_media_continue_buttons()
            )
        elif text == "‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            await self._show_confirmation(update, context, data)
    
    async def _handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
            await self._send_incident(update, context, data)
        elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
            self.state_manager.set_user_state(user_id, {
                'state': 'danger_description',
                'data': {}
            })
            await self._start_danger_report(update, context)
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            self.state_manager.clear_user_state(user_id)
            await update.message.reply_text(
                "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=self.keyboard_factory.create_main_menu()
            )
    
    async def _show_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        
        self.state_manager.set_user_state(user_id, {
            'state': 'danger_confirm',
            'data': data
        })
        
        text = "üìã **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç**\n\n"
        text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n\n"
        text += f"**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {data['location']}\n\n"
        
        if 'media_files' in data and data['media_files']:
            text += f"**–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã:** {len(data['media_files'])} —Ñ–∞–π–ª–æ–≤\n\n"
        
        text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É."
        
        await update.message.reply_text(
            text,
            reply_markup=self.keyboard_factory.create_confirmation_buttons(),
            parse_mode='Markdown'
        )
    
    async def _send_incident(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
        danger_data = DangerReportData(
            description=data['description'],
            location=data['location'],
            media_files=data.get('media_files', [])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        await self.danger_service.save_incident(update, context, danger_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        await self.danger_service.send_to_admin(update, context, danger_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        await update.message.reply_text(
            "‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–ª—É–∂–±–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n"
            "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ª—É–∂–±–∞–º–∏:",
            reply_markup=self.keyboard_factory.create_success_buttons(),
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state_manager.clear_user_state(user_id)
