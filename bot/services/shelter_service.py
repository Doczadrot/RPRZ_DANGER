"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–±–µ–∂–∏—â–∞–º–∏
"""
from typing import List, Optional
from telegram import Update
from telegram.ext import ContextTypes

from bot.interfaces import IFileManager, ILogger
from bot.models.user_state import ShelterData


class ShelterService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–±–µ–∂–∏—â–∞–º–∏"""
    
    def __init__(self, file_manager: IFileManager, logger: ILogger):
        self.file_manager = file_manager
        self.logger = logger
    
    def get_shelters(self) -> List[ShelterData]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â"""
        data = self.file_manager.load_json('configs/data_placeholders.json')
        shelters_data = data.get('shelters', [])
        
        shelters = []
        for shelter_data in shelters_data:
            shelter = ShelterData(
                id=shelter_data['id'],
                name=shelter_data['name'],
                lat=shelter_data['lat'],
                lon=shelter_data['lon'],
                photo_path=shelter_data['photo_path'],
                map_link=shelter_data['map_link'],
                description=shelter_data['description']
            )
            shelters.append(shelter)
        
        return shelters
    
    def get_nearby_shelters(self, user_lat: float, user_lon: float, radius_km: float = 1.0) -> List[ShelterData]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —É–±–µ–∂–∏—â–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        return self.get_shelters()[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
    
    async def send_shelter_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              shelter: ShelterData) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–±–µ–∂–∏—â–µ"""
        text = f"üè† **{shelter.name}**\n\n"
        text += f"{shelter.description}\n\n"
        text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {shelter.lat}, {shelter.lon}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–±–µ–∂–∏—â–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        try:
            with open(shelter.photo_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=text,
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(
                text,
                parse_mode='Markdown'
            )
    
    def get_shelter_map_link(self, shelter: ShelterData) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É —É–±–µ–∂–∏—â–∞"""
        return shelter.map_link
