"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
from typing import List, Optional
from telegram import Update
from telegram.ext import ContextTypes

from bot.interfaces import IFileManager, ILogger
from bot.models.user_state import DocumentData


class ConsultantService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, file_manager: IFileManager, logger: ILogger):
        self.file_manager = file_manager
        self.logger = logger
    
    def get_documents(self) -> List[DocumentData]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        data = self.file_manager.load_json('configs/data_placeholders.json')
        documents_data = data.get('documents', [])
        
        documents = []
        for doc_data in documents_data:
            document = DocumentData(
                id=doc_data['id'],
                title=doc_data['title'],
                description=doc_data['description'],
                file_path=doc_data['file_path'],
                category=doc_data.get('category', 'unknown')
            )
            documents.append(document)
        
        return documents
    
    def get_document_by_id(self, doc_id: int) -> Optional[DocumentData]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID"""
        documents = self.get_documents()
        for doc in documents:
            if doc.id == doc_id:
                return doc
        return None
    
    def get_document_by_index(self, index: int) -> Optional[DocumentData]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É (0-based)"""
        documents = self.get_documents()
        if 0 <= index < len(documents):
            return documents[index]
        return None
    
    async def send_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                          document: DocumentData) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            with open(document.file_path, 'rb') as pdf_file:
                await update.message.reply_document(
                    document=pdf_file,
                    filename=f"{document.title}.pdf",
                    caption=f"üìÑ **{document.title}**\n\n{document.description}"
                )
        except FileNotFoundError:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document.title}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
    
    def get_answer_template(self, question: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        data = self.file_manager.load_json('configs/data_placeholders.json')
        responses = data.get('suggestions_responses', {})
        
        return {
            'answer': responses.get('default_answer', '–ó–∞–≥–ª—É—à–∫–∞-–æ—Ç–≤–µ—Ç –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.'),
            'source': responses.get('default_source', '–î–æ–∫—É–º–µ–Ω—Ç ‚ÑñX, —Å—Ç—Ä. Y, –ø. Z (–∑–∞–≥–ª—É—à–∫–∞).'),
            'detailed': responses.get('detailed_responses', {}).get('safety', '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        }
    
    def log_question(self, user_id: int, username: Optional[str], question: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        self.logger.log_activity(
            user_id,
            username,
            "question_asked",
            question[:50]
        )
