#!/usr/bin/env python3
"""
MVP Telegram-–±–æ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å 4 –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import json
import csv
import ssl
import urllib3
import time
import psutil
import signal
from datetime import datetime
from pathlib import Path

import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from loguru import logger
from dotenv import load_dotenv

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from handlers import (
    log_activity, log_incident, log_suggestion,
    get_back_keyboard, get_main_menu_keyboard, get_media_keyboard, get_location_keyboard,
    handle_danger_report_text, handle_danger_report_location, handle_danger_report_media, finish_danger_report,
    handle_shelter_finder_text,
    handle_safety_consultant_text, show_documents_list, start_question_mode, handle_safety_question,
    handle_improvement_suggestion_text, handle_improvement_suggestion_choice, handle_suggestion_menu,
    set_bot_instance
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

# –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
PROJECT_ROOT = Path(__file__).parent.parent
LOCK_FILE = PROJECT_ROOT / "bot.lock"
PID_FILE = PROJECT_ROOT / "bot.pid"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
MAX_FILE_SIZE_MB = int(os.getenv('MAX_FILE_SIZE_MB', '20'))
MAX_VIDEO_SIZE_MB = int(os.getenv('MAX_VIDEO_SIZE_MB', '300'))

# Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.yandex.ru')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∞–¥–º–∏–Ω–∞
def log_admin_error(error_type: str, error: Exception, context: dict = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        safe_context = context if isinstance(context, dict) else {}
        
        error_info = {
            'error_type': error_type,
            'error_class': type(error).__name__,
            'error_message': str(error),
            'context': safe_context,
            'timestamp': datetime.now().isoformat()
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ –æ—à–∏–±–æ–∫
        logger.error(f"ADMIN_ERROR | {error_type} | {type(error).__name__}: {str(error)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        logger.bind(error_type=error_type).error(f"{type(error).__name__}: {str(error)}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        if error_type in ['BOT_CRASH', 'API_FAILURE', 'CONFIG_ERROR']:
            logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê | {error_type} | {str(error)}")
            
    except Exception as log_error:
        # –ï—Å–ª–∏ –¥–∞–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        print(f"–û–®–ò–ë–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø: {log_error}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
def log_system_event(event_type: str, message: str, details: dict = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        logger.info(f"SYSTEM_EVENT | {event_type} | {message}")
        if details:
            logger.debug(f"SYSTEM_DETAILS | {event_type} | {details}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–∞
def check_running_bots():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    running_bots = []
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] in ['python.exe', 'python']:
                cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                if any(keyword in cmdline.lower() for keyword in ['bot', 'main.py', 'run_bot.py']):
                    running_bots.append(proc.info['pid'])
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    return running_bots

def create_process_lock():
    """–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        current_pid = os.getpid()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        running_bots = check_running_bots()
        if len(running_bots) > 1:  # –ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π)
            logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞!")
            logger.error(f"–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {running_bots}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_data = {
            'pid': current_pid,
            'started_at': datetime.now().isoformat(),
            'project_path': str(PROJECT_ROOT)
        }
        
        with open(LOCK_FILE, 'w', encoding='utf-8') as f:
            json.dump(lock_data, f, indent=2, ensure_ascii=False)
        
        with open(PID_FILE, 'w', encoding='utf-8') as f:
            f.write(str(current_pid))
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: PID {current_pid}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False

def remove_process_lock():
    """–£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        if LOCK_FILE.exists():
            LOCK_FILE.unlink()
        if PID_FILE.exists():
            PID_FILE.unlink()
        logger.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    remove_process_lock()
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def mask_sensitive_data(text: str) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö"""
    if not text:
        return ""
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz)
    if ':' in text and len(text) > 20:
        parts = text.split(':')
        if len(parts) == 2 and parts[0].isdigit():
            return f"{parts[0]}:***{parts[1][-4:]}"
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω—ã)
    if len(text) > 20:
        return f"{text[:8]}***{text[-4:]}"
    
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
def sanitize_user_input(text: str) -> str:
    """–°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS –∏ –∏–Ω—ä–µ–∫—Ü–∏–π"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    dangerous_chars = ['<', '>', '"', "'", '&', ';', '|', '`', '$', '(', ')', '{', '}']
    sanitized = text
    
    for char in dangerous_chars:
        sanitized = sanitized.replace(char, '')
    
    # –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    dangerous_keywords = [
        'script', 'javascript', 'vbscript', 'onload', 'onerror', 'onclick',
        'iframe', 'object', 'embed', 'form', 'input', 'select', 'option',
        'DROP', 'DELETE', 'INSERT', 'UPDATE', 'SELECT', 'UNION', 'OR', 'AND',
        'rm', 'del', 'format', 'shutdown', 'reboot', 'kill', 'taskkill'
    ]
    
    for keyword in dangerous_keywords:
        sanitized = sanitized.replace(keyword, '')
        sanitized = sanitized.replace(keyword.upper(), '')
        sanitized = sanitized.replace(keyword.lower(), '')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(sanitized) > 1000:
        sanitized = sanitized[:1000] + "..."
    
    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    sanitized = ' '.join(sanitized.split())
    
    return sanitized.strip()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
def validate_user_input(text: str, min_length: int = 1, max_length: int = 1000) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥"""
    if not text:
        return False, "–ü—É—Å—Ç–æ–π –≤–≤–æ–¥"
    
    if len(text) < min_length:
        return False, f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–≤–æ–¥ (–º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤)"
    
    if len(text) > max_length:
        return False, f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥ (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    suspicious_patterns = [
        r'<script', r'javascript:', r'data:', r'vbscript:',
        r'onload=', r'onerror=', r'onclick=', r'onmouseover=',
        r'<iframe', r'<object', r'<embed', r'<form',
        r'SELECT.*FROM', r'INSERT.*INTO', r'UPDATE.*SET', r'DELETE.*FROM',
        r'DROP.*TABLE', r'UNION.*SELECT', r'OR.*1=1', r'AND.*1=1'
    ]
    
    import re
    text_lower = text.lower()
    for pattern in suspicious_patterns:
        if re.search(pattern, text_lower):
            return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
    
    return True, "OK"



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def send_email_notification(subject: str, message: str, to_email: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏"""
    try:
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        
        if not to_email:
            to_email = os.getenv('DEFAULT_NOTIFICATION_EMAIL', '')
        
        msg = MIMEMultipart()
        msg['From'] = DEFAULT_FROM_EMAIL
        msg['To'] = to_email
        msg['Subject'] = f"üö® –†–ü–†–ó –ë–æ—Ç: {subject}"
        
        body = f"""
–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:

{message}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –†–ü–†–ó
–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP(EMAIL_HOST, EMAIL_PORT)
        if EMAIL_USE_TLS:
            server.starttls()
        server.login(EMAIL_HOST_USER, EMAIL_HOST_PASSWORD)
        text = msg.as_string()
        server.sendmail(DEFAULT_FROM_EMAIL, to_email, text)
        server.quit()
        
        logger.info(f"Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {subject}")
        return True
        
    except Exception as e:
        log_admin_error("EMAIL_SEND_ERROR", e, {
            'subject': subject,
            'to_email': to_email,
            'message_length': len(message)
        })
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —É–±–µ–∂–∏—â
def show_all_shelters(chat_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–±–µ–∂–∏—â"""
    if not BOT_TOKEN or not bot:
        logger.warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ñ—É–Ω–∫—Ü–∏—è show_all_shelters –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        shelters = placeholders.get('shelters', [])
        
        if not shelters:
            bot.send_message(chat_id, "‚ùå –°–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=get_back_keyboard())
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É–±–µ–∂–∏—â–µ
        for i, shelter in enumerate(shelters, 1):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–±–µ–∂–∏—â–∞
            photo_path = shelter.get('photo_path', '')
            if photo_path and os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo_file:
                    bot.send_photo(chat_id, photo_file, caption=f"üè† {shelter['name']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–±–µ–∂–∏—â–µ
            shelter_text = (
                f"{shelter['name']}\n\n"
                f"üìù {shelter['description']}\n\n"
                f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {shelter['lat']}, {shelter['lon']}\n"
                f"üåê [üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({shelter['map_link']})"
            )
            
            bot.send_message(chat_id, shelter_text, parse_mode='Markdown')
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–±–µ–∂–∏—â: {len(shelters)}\n\n–í—Å–µ —É–±–µ–∂–∏—â–∞ –æ—Å–Ω–∞—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
        bot.send_message(chat_id, final_text, reply_markup=get_back_keyboard())
        
    except Exception as e:
        log_admin_error("SHELTER_DISPLAY_ERROR", e, {
            'chat_id': chat_id,
            'shelters_count': len(placeholders.get('shelters', []))
        })
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–±–µ–∂–∏—â–∞—Ö", reply_markup=get_back_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
def find_nearest_shelter(chat_id: int, user_lat: float, user_lon: float):
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not BOT_TOKEN or not bot:
        logger.warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ñ—É–Ω–∫—Ü–∏—è find_nearest_shelter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        shelters = placeholders.get('shelters', [])
        
        if not shelters:
            bot.send_message(chat_id, "‚ùå –°–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=get_back_keyboard())
            return
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è MVP)
        def calculate_distance(lat1, lon1, lat2, lon2):
            return ((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2) ** 0.5
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ
        nearest_shelter = None
        min_distance = float('inf')
        
        for shelter in shelters:
            shelter_lat = float(shelter.get('lat', 0))
            shelter_lon = float(shelter.get('lon', 0))
            distance = calculate_distance(user_lat, user_lon, shelter_lat, shelter_lon)
            
            if distance < min_distance:
                min_distance = distance
                nearest_shelter = shelter
        
        if nearest_shelter:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞
            photo_path = nearest_shelter.get('photo_path', '')
            if photo_path and os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo_file:
                    bot.send_photo(chat_id, photo_file, caption=f"üè† {nearest_shelter['name']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–µ–º —É–±–µ–∂–∏—â–µ
            shelter_text = (
                f"üéØ –ë–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ: {nearest_shelter['name']}\n\n"
                f"üìù {nearest_shelter['description']}\n\n"
                f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {nearest_shelter['lat']}, {nearest_shelter['lon']}\n"
                f"üåê [üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({nearest_shelter['map_link']})\n\n"
                f"üìè –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {min_distance:.2f} –∫–º"
            )
            
            bot.send_message(chat_id, shelter_text, parse_mode='Markdown')
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_text = "‚úÖ –ë–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n–°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–±–µ–∂–∏—â—É."
            bot.send_message(chat_id, final_text, reply_markup=get_main_menu_keyboard())
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            user_states[chat_id] = 'main_menu'
            bot.set_state(chat_id, BotStates.main_menu)
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ", reply_markup=get_back_keyboard())
            
    except Exception as e:
        log_admin_error("SHELTER_SEARCH_ERROR", e, {
            'chat_id': chat_id,
            'user_lat': user_lat,
            'user_lon': user_lon
        })
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–±–µ–∂–∏—â–∞", reply_markup=get_back_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç handlers)
def finish_danger_report_main(chat_id: int, username: str):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if not BOT_TOKEN or not bot:
        logger.warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ñ—É–Ω–∫—Ü–∏—è finish_danger_report_main –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ handlers
        class MockMessage:
            def __init__(self, chat_id, username):
                self.chat = type('Chat', (), {'id': chat_id})()
                self.from_user = type('User', (), {'username': username})()
        
        mock_message = MockMessage(chat_id, username)
        user_data_for_chat = user_data.get(chat_id, {})
        result = finish_danger_report(mock_message, user_data_for_chat, placeholders)
        
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            bot.set_state(chat_id, BotStates.main_menu)
            
            if isinstance(response, dict):
                bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
            else:
                bot.send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        log_admin_error("DANGER_REPORT_FINISH_ERROR", e, {
            'chat_id': chat_id,
            'username': username
        })
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=get_main_menu_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ if __name__ == "__main__":

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ if __name__ == "__main__"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ)
user_states = {}  # chat_id -> —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
user_data = {}    # chat_id -> –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_history = {} # chat_id -> –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
bot = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotStates(StatesGroup):
    main_menu = State()
    danger_report = State()
    shelter_finder = State()
    safety_consultant = State()
    improvement_suggestion = State()
    improvement_suggestion_choice = State()
    improvement_suggestion_menu = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–ª—É—à–µ–∫
def load_placeholders():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ-–∑–∞–≥–ª—É—à–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('configs/data_placeholders.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        log_admin_error("CONFIG_LOAD_ERROR", e, {
            'config_file': 'configs/data_placeholders.json'
        })
        return {}

placeholders = load_placeholders()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def handle_uninitialized_user(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    
    logger.info(f"–ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({chat_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª: {message.text}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[chat_id] = 'main_menu'
    user_data[chat_id] = {}
    user_history[chat_id] = []
    bot.set_state(chat_id, BotStates.main_menu)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚ùó –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üè† –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ\n"
        "üßë‚Äçüè´ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
    )
    
    bot.send_message(chat_id, welcome_text, reply_markup=get_main_menu_keyboard())
    log_activity(chat_id, username, "auto_initialization")

def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    logger.bind(user_id=user_id).info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
    
    log_activity(chat_id, username, "start")
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_states[chat_id] = 'main_menu'
    user_data[chat_id] = {}
    user_history[chat_id] = []
    
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–æ –≤ main_menu")
    
    bot.set_state(chat_id, BotStates.main_menu)
    
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚ùó –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üè† –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ\n"
        "üßë‚Äçüè´ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
    )
    
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    bot.send_message(chat_id, welcome_text, reply_markup=get_main_menu_keyboard())

def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "help")
    
    help_text = (
        "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó\n\n"
        "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç\n"
        "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ - –Ω–∞–π—Ç–∏ —É–±–µ–∂–∏—â–µ —Ä—è–¥–æ–º\n"
        "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é\n\n"
        "–ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    bot.send_message(chat_id, help_text, reply_markup=get_main_menu_keyboard())

def history_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "history_request")
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ CSV
        history_text = "üìã –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:\n\n"
        
        if os.path.exists('logs/activity.csv'):
            with open('logs/activity.csv', 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                user_actions = [row for row in reader if int(row['user_id']) == chat_id]
                
                if user_actions:
                    for action in user_actions[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π
                        timestamp = action['timestamp'][:19]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
                        history_text += f"üïê {timestamp}\n"
                        history_text += f"üìù {action['action']}\n"
                        if action['payload']:
                            history_text += f"üìÑ {action['payload'][:50]}...\n"
                        history_text += "\n"
                else:
                    history_text += "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
        else:
            history_text += "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        bot.send_message(chat_id, history_text, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    text = message.text
    
    # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    sanitized_text = sanitize_user_input(text)
    is_valid, validation_error = validate_user_input(sanitized_text, min_length=1, max_length=1000)
    
    if not is_valid:
        logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤–≤–æ–¥ –æ—Ç {username}: {validation_error}")
        bot.send_message(chat_id, f"‚ùå {validation_error}")
        return
    
    logger.bind(user_id=user_id).info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {sanitized_text[:100]}...")
    logger.debug(f"–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id={chat_id}, user_id={user_id}, username={username}, text_length={len(sanitized_text)}")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_states.get(chat_id, 'None')}")
    
    
    log_activity(chat_id, username, "text_message", sanitized_text)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    if chat_id not in user_states:
        user_states[chat_id] = 'main_menu'
        user_data[chat_id] = {}
        user_history[chat_id] = []
        bot.set_state(chat_id, BotStates.main_menu)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({chat_id}) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if sanitized_text == "–ù–∞–∑–∞–¥":
        user_states[chat_id] = 'main_menu'
        bot.set_state(chat_id, BotStates.main_menu)
        bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–≤–∫–ª—é—á–∞—è —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ None)
    if user_states.get(chat_id) in ['main_menu', None]:
        logger.bind(user_id=user_id).debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_states.get(chat_id)}")
        
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ None, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º main_menu
        if user_states.get(chat_id) is None:
            user_states[chat_id] = 'main_menu'
            bot.set_state(chat_id, BotStates.main_menu)
        
        if sanitized_text == "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
            logger.bind(user_id=user_id).info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'")
            start_danger_report(message)
        elif sanitized_text == "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ":
            logger.bind(user_id=user_id).info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ'")
            start_shelter_finder(message)
        elif sanitized_text == "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó":
            logger.bind(user_id=user_id).info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'")
            start_safety_consultant(message)
        elif sanitized_text == "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é":
            logger.bind(user_id=user_id).info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é'")
            start_improvement_suggestion(message)
        else:
            # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            logger.bind(user_id=user_id).warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {sanitized_text}")
            bot.send_message(chat_id, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    elif user_states.get(chat_id) == 'danger_report':
        logger.bind(user_id=user_id).debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'danger_report' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        result = handle_danger_report_text(message, user_data[chat_id], placeholders)
        if isinstance(result, tuple):
            new_state, response = result
            logger.bind(user_id=user_id).info(f"–ü–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_states[chat_id]} -> {new_state}")
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
                else:
                    bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
            else:
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_back_keyboard())
                else:
                    bot.send_message(chat_id, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_back_keyboard())
        else:
            bot.send_message(chat_id, result, reply_markup=get_back_keyboard())
    
    elif user_states.get(chat_id) == 'shelter_finder':
        if text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â":
            show_all_shelters(chat_id)
        elif text == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é":
            bot.send_message(chat_id, "üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é' –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞")
        else:
            bot.send_message(chat_id, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=get_back_keyboard())
    
    elif user_states.get(chat_id) == 'safety_consultant':
        result = handle_safety_consultant_text(message, placeholders)
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
                else:
                    bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥
                if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
                    user_data[chat_id]['step'] = 'question'
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                if isinstance(response, dict) and response.get('action') == 'send_documents':
                    documents = response.get('documents', [])
                    try:
                        for i, doc in enumerate(documents, 1):
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
                            file_path = doc.get('file_path', '')
                            if file_path and os.path.exists(file_path):
                                with open(file_path, 'rb') as pdf_file:
                                    bot.send_document(chat_id, pdf_file, caption=f"üìÑ {doc['title']}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            doc_text = (
                                f"{doc['title']}\n\n"
                                f"üìù {doc['description']}\n\n"
                                f"üìé –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ"
                            )
                            bot.send_message(chat_id, doc_text, parse_mode='Markdown')
                        
                        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        final_text = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 5\n\n–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó –≥–æ—Ç–æ–≤—ã –∫ –∏–∑—É—á–µ–Ω–∏—é."
                        bot.send_message(chat_id, final_text, reply_markup=get_main_menu_keyboard())
                        
                        user_states[chat_id] = 'main_menu'
                        bot.set_state(chat_id, BotStates.main_menu)
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
                        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", reply_markup=get_main_menu_keyboard())
                        user_states[chat_id] = 'main_menu'
                        bot.set_state(chat_id, BotStates.main_menu)
                elif isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_back_keyboard())
                else:
                    bot.send_message(chat_id, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_back_keyboard())
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            if user_data.get(chat_id, {}).get('step') == 'question':
                result = handle_safety_question(message, placeholders)
                if isinstance(result, tuple):
                    new_state, response = result
                    if isinstance(response, dict):
                        bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                    else:
                        bot.send_message(chat_id, response, reply_markup=get_back_keyboard())
                else:
                    bot.send_message(chat_id, result, reply_markup=get_back_keyboard())
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, —Ç–æ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
                user_data[chat_id]['step'] = 'question'
                result = handle_safety_question(message, placeholders)
                if isinstance(result, tuple):
                    new_state, response = result
                    if isinstance(response, dict):
                        bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                    else:
                        bot.send_message(chat_id, response, reply_markup=get_back_keyboard())
                else:
                    bot.send_message(chat_id, result, reply_markup=get_back_keyboard())
    
    elif user_states.get(chat_id) == 'improvement_suggestion_choice':
        result = handle_improvement_suggestion_choice(message, placeholders)
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
                else:
                    bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
            elif new_state == "improvement_suggestion":
                bot.set_state(chat_id, BotStates.improvement_suggestion)
                # –û–±–Ω–æ–≤–ª—è–µ–º user_data —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏–∑ response
                if isinstance(response, dict):
                    user_data[chat_id] = {
                        'step': 'suggestion', 
                        'category': response.get('category', '–û–±—â–µ–µ')
                    }
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                else:
                    bot.send_message(chat_id, response, reply_markup=get_back_keyboard())
            else:
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_back_keyboard())
                else:
                    bot.send_message(chat_id, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_back_keyboard())
        else:
            bot.send_message(chat_id, result, reply_markup=get_back_keyboard())
    
    elif user_states.get(chat_id) == 'improvement_suggestion':
        result = handle_improvement_suggestion_text(message, placeholders, user_data)
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
                else:
                    bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
            elif new_state == "improvement_suggestion_choice":
                bot.set_state(chat_id, BotStates.improvement_suggestion_choice)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                start_improvement_suggestion(message)
            elif new_state == "improvement_suggestion_menu":
                bot.set_state(chat_id, BotStates.improvement_suggestion_menu)
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(
                        types.KeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
                        types.KeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                        types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    )
                    bot.send_message(chat_id, response, reply_markup=markup)
            else:
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_back_keyboard())
                else:
                    bot.send_message(chat_id, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_back_keyboard())
        else:
            bot.send_message(chat_id, result, reply_markup=get_back_keyboard())
    
    elif user_states.get(chat_id) == 'improvement_suggestion_menu':
        result = handle_suggestion_menu(message, placeholders)
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
                else:
                    bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
            elif new_state == "improvement_suggestion":
                bot.set_state(chat_id, BotStates.improvement_suggestion)
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                elif response is not None:
                    bot.send_message(chat_id, response, reply_markup=get_back_keyboard())
                else:
                    bot.send_message(chat_id, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_back_keyboard())
            else:
                if isinstance(response, dict):
                    bot.send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(
                        types.KeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
                        types.KeyboardButton("üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
                        types.KeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                        types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    )
                    bot.send_message(chat_id, response, reply_markup=markup)
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(
                types.KeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
                types.KeyboardButton("üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
                types.KeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            )
            bot.send_message(chat_id, result, reply_markup=markup)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
def start_danger_report(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "danger_report_start")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    user_states[chat_id] = 'danger_report'
    user_data[chat_id] = {'step': 'description', 'description': '', 'location': None}
    bot.set_state(chat_id, BotStates.danger_report)
    
    bot.send_message(
        chat_id,
        "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
        "üìù –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤, –∏ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è¬ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –∏–ª–∏ –∫–∞–∫ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫—É.\n\n"
        
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞. –ü—Ä–∏–º–µ—Ä –Ω—É–∂–µ–Ω ‚Äì –¶–ì–¢-025, 4-–π —É—á–∞—Å—Ç–æ–∫.\n"
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –í–∞—à–µ —Ñ–æ—Ç–æ –æ–±–ª–µ–≥—á–∏—Ç –∏–ª–∏ —É—Å–∫–æ—Ä–∏—Ç —Ä–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
        "üìù –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_back_keyboard()
    )

def start_shelter_finder(message):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∫—Ä—ã—Ç–∏—è"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "shelter_finder_start")
    
    user_states[chat_id] = 'shelter_finder'
    bot.set_state(chat_id, BotStates.shelter_finder)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    
    bot.send_message(
        chat_id,
        "üè† –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∫—Ä—ã—Ç–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

def start_safety_consultant(message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "safety_consultant_start")
    
    user_states[chat_id] = 'safety_consultant'
    bot.set_state(chat_id, BotStates.safety_consultant)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
        types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    
    bot.send_message(
        chat_id,
        "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

def start_improvement_suggestion(message):
    """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "improvement_suggestion_start")
    
    user_states[chat_id] = 'improvement_suggestion_choice'
    user_data[chat_id] = {'step': 'choice'}
    bot.set_state(chat_id, BotStates.improvement_suggestion_choice)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç–∞"),
        types.KeyboardButton("üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–∏–∑–∞–π–Ω"),
        types.KeyboardButton("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
        types.KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        types.KeyboardButton("üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"),
        types.KeyboardButton("üí≠ –°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞")
    )
    markup.add(types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    welcome_text = (
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n"
        "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç–∞ - –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–∏–∑–∞–π–Ω - —É–ª—É—á—à–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞\n"
        "‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã\n"
        "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
        "üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
        "üí≠ –°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞ - –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n"
        "üèÜ –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –Ω–∞ –æ–±—â–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏!"
    )
    
    bot.send_message(
        chat_id,
        welcome_text,
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
def handle_location(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    user_lat = message.location.latitude
    user_lon = message.location.longitude
    
    logger.bind(user_id=user_id).info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç {username}: {user_lat}, {user_lon}")
    
    if user_states.get(chat_id) == 'shelter_finder':
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        logger.bind(user_id=user_id).info("–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        find_nearest_shelter(chat_id, user_lat, user_lon)
    elif user_states.get(chat_id) == 'danger_report':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ handlers
        logger.bind(user_id=user_id).info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        result = handle_danger_report_location(message, user_data[chat_id])
        if isinstance(result, dict):
            bot.send_message(chat_id, result['text'], reply_markup=result.get('reply_markup'), parse_mode=result.get('parse_mode'))
    else:
        logger.bind(user_id=user_id).warning(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {user_states.get(chat_id)}")
        bot.send_message(chat_id, "‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
def handle_media(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    content_type = message.content_type
    
    logger.bind(user_id=user_id).info(f"–ü–æ–ª—É—á–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª –æ—Ç {username}: {content_type}")
    
    if user_states.get(chat_id) == 'danger_report':
        logger.bind(user_id=user_id).info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        result = handle_danger_report_media(message, user_data[chat_id], MAX_FILE_SIZE_MB, MAX_VIDEO_SIZE_MB)
        bot.send_message(chat_id, result, reply_markup=get_media_keyboard())
    else:
        logger.bind(user_id=user_id).warning(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {user_states.get(chat_id)}")
        bot.send_message(chat_id, "‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
    if not create_process_lock():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞")
        logger.info("üí° –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    os.makedirs('logs', exist_ok=True)

    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
    logger.add("logs/app.log", 
              format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}", 
              level="DEBUG", 
              rotation="10 MB", 
              compression="zip", 
              encoding="utf-8",
              errors="replace")

    # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—à–∏–±–æ–∫ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    logger.add("logs/errors.log", 
              format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}", 
              level="ERROR", 
              rotation="10 MB", 
              compression="zip", 
              encoding="utf-8",
              errors="replace")

    # –õ–æ–≥ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∞–¥–º–∏–Ω–∞
    logger.add("logs/admin_critical.log", 
              format="{time:YYYY-MM-DD HH:mm:ss.SSS} | CRITICAL | {name}:{function}:{line} - {message}", 
              level="CRITICAL", 
              rotation="5 MB", 
              compression="zip", 
              encoding="utf-8",
              errors="replace",
              filter=lambda record: record["level"].name == "CRITICAL")

    # –õ–æ–≥ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫
    logger.add("logs/system_errors.log", 
              format="{time:YYYY-MM-DD HH:mm:ss.SSS} | SYSTEM | {extra[error_type]} | {name}:{function}:{line} - {message}", 
              level="ERROR", 
              rotation="5 MB", 
              compression="zip", 
              encoding="utf-8",
              errors="replace",
              filter=lambda record: "error_type" in record["extra"])

    # –õ–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    logger.add("logs/user_actions.log", 
              format="{time:YYYY-MM-DD HH:mm:ss.SSS} | USER:{extra[user_id]} | {message}", 
              level="INFO", 
              rotation="5 MB", 
              compression="zip", 
              encoding="utf-8",
              errors="replace",
              filter=lambda record: "user_id" in record["extra"])

    # –õ–æ–≥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    logger.add("logs/api_requests.log", 
              format="{time:YYYY-MM-DD HH:mm:ss.SSS} | API | {message}", 
              level="DEBUG", 
              rotation="5 MB", 
              compression="zip", 
              encoding="utf-8",
              errors="replace")

    logger.info("–ó–∞–ø—É—Å–∫ MVP –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or BOT_TOKEN == 'your_telegram_bot_token_here':
        log_admin_error("CONFIG_ERROR", Exception("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω"), {
            'config_file': '.env',
            'required_vars': ['BOT_TOKEN', 'ADMIN_CHAT_ID']
        })
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞")
        logger.info("üìù –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env:")
        logger.info("BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
        logger.info("ADMIN_CHAT_ID=123456789")
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    state_storage = StateMemoryStorage()
    bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è handlers
    set_bot_instance(bot)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è yandex_notifications
    try:
        from yandex_notifications import set_bot_instance as set_yandex_bot_instance
        set_yandex_bot_instance(bot)
        logger.info("‚úÖ Bot instance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è yandex_notifications")
    except ImportError:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å bot instance –¥–ª—è yandex_notifications")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.message_handler(func=lambda message: message.chat.id not in user_states and message.content_type == 'text' and not message.text.startswith('/'))(handle_uninitialized_user)
    bot.message_handler(commands=['start'])(start_command)
    bot.message_handler(commands=['help'])(help_command)
    bot.message_handler(commands=['my_history'])(history_command)
    bot.message_handler(content_types=['text'])(handle_text)
    bot.message_handler(content_types=['location'])(handle_location)
    bot.message_handler(content_types=['photo', 'video', 'document'])(handle_media)
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
        bot_info = bot.get_me()
        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        logger.info(f"–¢–æ–∫–µ–Ω: {mask_sensitive_data(BOT_TOKEN)}")
        
        # –û—á–∏—â–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        logger.info("–û—á–∏—Å—Ç–∫–∞ webhook...")
        try:
            bot.remove_webhook()
            logger.info("Webhook –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã...")
        try:
            import psutil
            python_processes = [p for p in psutil.process_iter(['pid', 'name', 'cmdline']) 
                              if p.info['name'] == 'python.exe' and 
                              'main.py' in ' '.join(p.info['cmdline'] or [])]
            
            if len(python_processes) > 1:
                logger.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(python_processes)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Python —Å main.py")
                for proc in python_processes[1:]:  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–±–∏–≤–∞–µ–º
                    try:
                        proc.terminate()
                        logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                    except:
                        pass
                time.sleep(2)
        except ImportError:
            logger.warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...")
        time.sleep(3)
        
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ polling: interval=3, timeout=20, none_stop=True")
        
        try:
            bot.polling(none_stop=True, interval=3, timeout=20)
        except Exception as polling_error:
            error_str = str(polling_error)
            log_admin_error("BOT_POLLING_ERROR", polling_error, {
                'error_type': 'polling_critical',
                'bot_token_masked': mask_sensitive_data(BOT_TOKEN)
            })
            
            if "409" in error_str or "Conflict" in error_str:
                log_admin_error("BOT_INSTANCE_CONFLICT", polling_error, {
                    'error_type': 'instance_conflict',
                    'recommended_actions': [
                        '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python',
                        '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä',
                        '–ü–æ–¥–æ–∂–¥–∞—Ç—å 2-3 –º–∏–Ω—É—Ç—ã'
                    ]
                })
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                try:
                    import subprocess
                    logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ psutil
                    try:
                        import psutil
                        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                            if (proc.info['name'] == 'python.exe' and 
                                'main.py' in ' '.join(proc.info['cmdline'] or [])):
                                try:
                                    proc.terminate()
                                    logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                                except:
                                    pass
                    except ImportError:
                        logger.warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
                        pass
                    
                    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
                    
                    # –û—á–∏—â–∞–µ–º webhook –µ—â–µ —Ä–∞–∑
                    try:
                        bot.remove_webhook()
                        logger.info("Webhook –æ—á–∏—â–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ")
                    except:
                        pass
                    
                    logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞...")
                    bot.polling(none_stop=True, interval=3, timeout=20)
                    
                except Exception as auto_stop_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {auto_stop_error}")
                    logger.info("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å restart_clean.py")
                    sys.exit(1)
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ polling: {polling_error}")
                sys.exit(1)
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        remove_process_lock()
        sys.exit(0)
    except ssl.SSLError as e:
        logger.error(f"‚ùå SSL –æ—à–∏–±–∫–∞: {e}")
        logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN")
        remove_process_lock()
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
        remove_process_lock()
        sys.exit(1)
