#!/usr/bin/env python3
"""
MVP Telegram-–±–æ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å 4 –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import json
import csv
import ssl
import urllib3
import time
import threading
from datetime import datetime
from typing import Dict, List, Optional

import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from loguru import logger
from dotenv import load_dotenv

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from handlers import (
    log_activity, log_incident, log_suggestion,
    get_back_keyboard, get_main_menu_keyboard, get_media_keyboard,
    handle_danger_report_text, handle_danger_report_location, handle_danger_report_media, finish_danger_report,
    handle_shelter_finder_text, handle_shelter_finder_location, show_shelters_list,
    handle_safety_consultant_text, show_documents_list, start_question_mode, handle_safety_question,
    handle_improvement_suggestion_text
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
MAX_FILE_SIZE_MB = int(os.getenv('MAX_FILE_SIZE_MB', '20'))
MAX_VIDEO_SIZE_MB = int(os.getenv('MAX_VIDEO_SIZE_MB', '300'))
SPAM_LIMIT = int(os.getenv('SPAM_LIMIT', '5'))

# Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.yandex.ru')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'MidLNight1@yandex.ru')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'fiaerpvcfirnsfqo')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def mask_sensitive_data(text: str) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö"""
    if not text:
        return text
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz)
    if ':' in text and len(text) > 20:
        parts = text.split(':')
        if len(parts) == 2 and parts[0].isdigit():
            return f"{parts[0]}:***{parts[1][-4:]}"
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω—ã)
    if len(text) > 20:
        return f"{text[:8]}***{text[-4:]}"
    
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
def rate_limit_response(chat_id: int, min_interval: float = 0.5) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç (–Ω–µ —á–∞—â–µ min_interval —Å–µ–∫—É–Ω–¥)"""
    with response_lock:
        now = time.time()
        last_response = response_timestamps.get(chat_id, 0)
        
        if now - last_response < min_interval:
            return False
        
        response_timestamps[chat_id] = now
        return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
def safe_send_message(chat_id: int, text: str, reply_markup=None, parse_mode=None, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {text[:50]}...")
    
    if not rate_limit_response(chat_id):
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id} –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏")
        return None
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id={chat_id}, text_length={len(text)}, parse_mode={parse_mode}")
        
        result = bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode, **kwargs)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: message_id={result.message_id if result else 'None'}")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        logger.debug(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–∫–∏ 409
        if "409" in str(e) or "Conflict" in str(e):
            logger.error("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ 409 - –∫–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞!")
            logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
        
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def send_email_notification(subject: str, message: str, to_email: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏"""
    try:
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        
        if not to_email:
            to_email = "MidLNight1@yandex.ru"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        msg = MIMEMultipart()
        msg['From'] = DEFAULT_FROM_EMAIL
        msg['To'] = to_email
        msg['Subject'] = f"üö® –†–ü–†–ó –ë–æ—Ç: {subject}"
        
        body = f"""
–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:

{message}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –†–ü–†–ó
–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP(EMAIL_HOST, EMAIL_PORT)
        if EMAIL_USE_TLS:
            server.starttls()
        server.login(EMAIL_HOST_USER, EMAIL_HOST_PASSWORD)
        text = msg.as_string()
        server.sendmail(DEFAULT_FROM_EMAIL, to_email, text)
        server.quit()
        
        logger.info(f"Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {subject}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —É–±–µ–∂–∏—â
def show_all_shelters(chat_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–±–µ–∂–∏—â"""
    try:
        shelters = placeholders.get('shelters', [])
        
        if not shelters:
            safe_send_message(chat_id, "‚ùå –°–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=get_back_keyboard())
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É–±–µ–∂–∏—â–µ
        for i, shelter in enumerate(shelters, 1):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–±–µ–∂–∏—â–∞
            photo_path = shelter.get('photo_path', '')
            if photo_path and os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo_file:
                    bot.send_photo(chat_id, photo_file, caption=f"üè† {shelter['name']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–±–µ–∂–∏—â–µ
            shelter_text = (
                f"**{shelter['name']}**\n\n"
                f"üìù {shelter['description']}\n\n"
                f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {shelter['lat']}, {shelter['lon']}\n"
                f"üåê [üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({shelter['map_link']})"
            )
            
            safe_send_message(chat_id, shelter_text, parse_mode='Markdown')
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_text = f"‚úÖ **–ù–∞–π–¥–µ–Ω–æ —É–±–µ–∂–∏—â: {len(shelters)}**\n\n–í—Å–µ —É–±–µ–∂–∏—â–∞ –æ—Å–Ω–∞—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
        safe_send_message(chat_id, final_text, reply_markup=get_back_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–±–µ–∂–∏—â: {e}")
        safe_send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–±–µ–∂–∏—â–∞—Ö", reply_markup=get_back_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
def find_nearest_shelter(chat_id: int, user_lat: float, user_lon: float):
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        shelters = placeholders.get('shelters', [])
        
        if not shelters:
            safe_send_message(chat_id, "‚ùå –°–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=get_back_keyboard())
            return
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è MVP)
        def calculate_distance(lat1, lon1, lat2, lon2):
            return ((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2) ** 0.5
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ
        nearest_shelter = None
        min_distance = float('inf')
        
        for shelter in shelters:
            shelter_lat = float(shelter.get('lat', 0))
            shelter_lon = float(shelter.get('lon', 0))
            distance = calculate_distance(user_lat, user_lon, shelter_lat, shelter_lon)
            
            if distance < min_distance:
                min_distance = distance
                nearest_shelter = shelter
        
        if nearest_shelter:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞
            photo_path = nearest_shelter.get('photo_path', '')
            if photo_path and os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo_file:
                    bot.send_photo(chat_id, photo_file, caption=f"üè† {nearest_shelter['name']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–µ–º —É–±–µ–∂–∏—â–µ
            shelter_text = (
                f"üéØ **–ë–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ: {nearest_shelter['name']}**\n\n"
                f"üìù {nearest_shelter['description']}\n\n"
                f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {nearest_shelter['lat']}, {nearest_shelter['lon']}\n"
                f"üåê [üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({nearest_shelter['map_link']})\n\n"
                f"üìè –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {min_distance:.2f} –∫–º"
            )
            
            safe_send_message(chat_id, shelter_text, parse_mode='Markdown')
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_text = "‚úÖ **–ë–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ!**\n\n–°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–±–µ–∂–∏—â—É."
            safe_send_message(chat_id, final_text, reply_markup=get_main_menu_keyboard())
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            user_states[chat_id] = 'main_menu'
            bot.set_state(chat_id, BotStates.main_menu)
        else:
            safe_send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ", reply_markup=get_back_keyboard())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞: {e}")
        safe_send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–±–µ–∂–∏—â–∞", reply_markup=get_back_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç handlers)
def finish_danger_report_main(chat_id: int, username: str):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ handlers
        class MockMessage:
            def __init__(self, chat_id, username):
                self.chat = type('Chat', (), {'id': chat_id})()
                self.from_user = type('User', (), {'username': username})()
        
        mock_message = MockMessage(chat_id, username)
        result = finish_danger_report(mock_message, user_data[chat_id], placeholders)
        
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            bot.set_state(chat_id, BotStates.main_menu)
            
            if isinstance(response, dict):
                safe_send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
            else:
                safe_send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        safe_send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=get_main_menu_keyboard())

if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
logger.add("logs/app.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}", 
          level="DEBUG", 
          rotation="10 MB", 
          compression="zip", 
          encoding="utf-8",
          errors="replace")

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—à–∏–±–æ–∫
logger.add("logs/errors.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}", 
          level="ERROR", 
          rotation="5 MB", 
          compression="zip", 
          encoding="utf-8",
          errors="replace")

# –õ–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
logger.add("logs/user_actions.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | USER:{extra[user_id]} | {message}", 
          level="INFO", 
          rotation="5 MB", 
          compression="zip", 
          encoding="utf-8",
          errors="replace",
          filter=lambda record: "user_id" in record["extra"])

# –õ–æ–≥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
logger.add("logs/api_requests.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | API | {message}", 
          level="DEBUG", 
          rotation="5 MB", 
          compression="zip", 
          encoding="utf-8",
          errors="replace")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
state_storage = StateMemoryStorage()
bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}  # chat_id -> —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
user_data = {}    # chat_id -> –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_history = {} # chat_id -> –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
spam_protection = {}  # chat_id -> —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

# –°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
response_timestamps = {}  # chat_id -> –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
response_lock = threading.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotStates(StatesGroup):
    main_menu = State()
    danger_report = State()
    shelter_finder = State()
    safety_consultant = State()
    improvement_suggestion = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–ª—É—à–µ–∫
def load_placeholders():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ-–∑–∞–≥–ª—É—à–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('configs/data_placeholders.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≥–ª—É—à–µ–∫: {e}")
        return {}

placeholders = load_placeholders()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞
def check_spam(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""
    now = datetime.now()
    if chat_id not in spam_protection:
        spam_protection[chat_id] = {'count': 0, 'last_reset': now}
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    if (now - spam_protection[chat_id]['last_reset']).seconds > 30:
        spam_protection[chat_id] = {'count': 0, 'last_reset': now}
    
    spam_protection[chat_id]['count'] += 1
    return spam_protection[chat_id]['count'] > SPAM_LIMIT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    logger.bind(user_id=user_id).info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
    
    log_activity(chat_id, username, "start")
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_states[chat_id] = 'main_menu'
    user_data[chat_id] = {}
    user_history[chat_id] = []
    
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–æ –≤ main_menu")
    
    bot.set_state(chat_id, BotStates.main_menu)
    
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚ùó –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üè† –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ\n"
        "üßë‚Äçüè´ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
    )
    
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    safe_send_message(chat_id, welcome_text, reply_markup=get_main_menu_keyboard())

@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "help")
    
    help_text = (
        "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó\n\n"
        "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç\n"
        "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ - –Ω–∞–π—Ç–∏ —É–±–µ–∂–∏—â–µ —Ä—è–¥–æ–º\n"
        "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é\n\n"
        "–ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    safe_send_message(chat_id, help_text, reply_markup=get_main_menu_keyboard())

@bot.message_handler(commands=['my_history'])
def history_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "history_request")
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ CSV
        history_text = "üìã –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:\n\n"
        
        if os.path.exists('logs/activity.csv'):
            with open('logs/activity.csv', 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                user_actions = [row for row in reader if int(row['user_id']) == chat_id]
                
                if user_actions:
                    for action in user_actions[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π
                        timestamp = action['timestamp'][:19]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
                        history_text += f"üïê {timestamp}\n"
                        history_text += f"üìù {action['action']}\n"
                        if action['payload']:
                            history_text += f"üìÑ {action['payload'][:50]}...\n"
                        history_text += "\n"
                else:
                    history_text += "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
        else:
            history_text += "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        safe_send_message(chat_id, history_text, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        safe_send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    text = message.text
    
    logger.bind(user_id=user_id).info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {text[:100]}...")
    logger.debug(f"–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id={chat_id}, user_id={user_id}, username={username}, text_length={len(text)}")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_states.get(chat_id, 'None')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞
    if check_spam(chat_id):
        logger.warning(f"–°–ø–∞–º-–∑–∞—â–∏—Ç–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} ({username})")
        logger.debug(f"–°—á–µ—Ç—á–∏–∫ —Å–ø–∞–º–∞: {spam_protection.get(chat_id, {}).get('count', 0)}")
        safe_send_message(chat_id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
        return
    
    log_activity(chat_id, username, "text_message", text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == "–ù–∞–∑–∞–¥":
        user_states[chat_id] = 'main_menu'
        bot.set_state(chat_id, BotStates.main_menu)
        safe_send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if user_states.get(chat_id) == 'main_menu':
        logger.bind(user_id=user_id).debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
        if text == "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
            logger.bind(user_id=user_id).info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'")
            start_danger_report(message)
        elif text == "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ":
            logger.bind(user_id=user_id).info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ'")
            start_shelter_finder(message)
        elif text == "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó":
            logger.bind(user_id=user_id).info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'")
            start_safety_consultant(message)
        elif text == "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é":
            logger.bind(user_id=user_id).info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é'")
            start_improvement_suggestion(message)
        else:
            # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            logger.bind(user_id=user_id).warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {text}")
            safe_send_message(chat_id, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    elif user_states.get(chat_id) == 'danger_report':
        logger.bind(user_id=user_id).debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'danger_report' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        result = handle_danger_report_text(message, user_data[chat_id], placeholders)
        if isinstance(result, tuple):
            new_state, response = result
            logger.bind(user_id=user_id).info(f"–ü–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_states[chat_id]} -> {new_state}")
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    safe_send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                else:
                    safe_send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
            else:
                if isinstance(response, dict):
                    safe_send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                else:
                    safe_send_message(chat_id, response, reply_markup=get_back_keyboard())
        else:
            safe_send_message(chat_id, result, reply_markup=get_back_keyboard())
    
    elif user_states.get(chat_id) == 'shelter_finder':
        if text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â":
            show_all_shelters(chat_id)
        elif text == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é":
            safe_send_message(chat_id, "üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é' –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞")
        else:
            safe_send_message(chat_id, "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=get_back_keyboard())
    
    elif user_states.get(chat_id) == 'safety_consultant':
        result = handle_safety_consultant_text(message, placeholders)
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    safe_send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                else:
                    safe_send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥
                if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
                    user_data[chat_id]['step'] = 'question'
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                if isinstance(response, dict) and response.get('action') == 'send_documents':
                    documents = response.get('documents', [])
                    try:
                        for i, doc in enumerate(documents, 1):
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
                            file_path = doc.get('file_path', '')
                            if file_path and os.path.exists(file_path):
                                with open(file_path, 'rb') as pdf_file:
                                    bot.send_document(chat_id, pdf_file, caption=f"üìÑ {doc['title']}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            doc_text = (
                                f"**{doc['title']}**\n\n"
                                f"üìù {doc['description']}\n\n"
                                f"üìé –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ"
                            )
                            safe_send_message(chat_id, doc_text, parse_mode='Markdown')
                        
                        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        final_text = "‚úÖ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 5**\n\n–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó –≥–æ—Ç–æ–≤—ã –∫ –∏–∑—É—á–µ–Ω–∏—é."
                        safe_send_message(chat_id, final_text, reply_markup=get_main_menu_keyboard())
                        
                        user_states[chat_id] = 'main_menu'
                        bot.set_state(chat_id, BotStates.main_menu)
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
                        safe_send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", reply_markup=get_main_menu_keyboard())
                        user_states[chat_id] = 'main_menu'
                        bot.set_state(chat_id, BotStates.main_menu)
                elif isinstance(response, dict):
                    safe_send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                else:
                    safe_send_message(chat_id, response, reply_markup=get_back_keyboard())
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            if user_data.get(chat_id, {}).get('step') == 'question':
                result = handle_safety_question(message, placeholders)
                if isinstance(result, tuple):
                    new_state, response = result
                    if isinstance(response, dict):
                        safe_send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                    else:
                        safe_send_message(chat_id, response, reply_markup=get_back_keyboard())
                else:
                    safe_send_message(chat_id, result, reply_markup=get_back_keyboard())
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, —Ç–æ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
                user_data[chat_id]['step'] = 'question'
                result = handle_safety_question(message, placeholders)
                if isinstance(result, tuple):
                    new_state, response = result
                    if isinstance(response, dict):
                        safe_send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'), parse_mode=response.get('parse_mode'))
                    else:
                        safe_send_message(chat_id, response, reply_markup=get_back_keyboard())
                else:
                    safe_send_message(chat_id, result, reply_markup=get_back_keyboard())
    
    elif user_states.get(chat_id) == 'improvement_suggestion':
        result = handle_improvement_suggestion_text(message, placeholders)
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    safe_send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                else:
                    safe_send_message(chat_id, response, reply_markup=get_main_menu_keyboard())
            else:
                if isinstance(response, dict):
                    safe_send_message(chat_id, response['text'], reply_markup=response.get('reply_markup'))
                else:
                    safe_send_message(chat_id, response, reply_markup=get_back_keyboard())
        else:
            safe_send_message(chat_id, result, reply_markup=get_back_keyboard())

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
def start_danger_report(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "danger_report_start")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    user_states[chat_id] = 'danger_report'
    user_data[chat_id] = {'step': 'description', 'description': '', 'location': None}
    bot.set_state(chat_id, BotStates.danger_report)
    
    safe_send_message(
        chat_id,
        "‚ùó **–°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏**\n\n"
        "üìù –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_back_keyboard()
    )

def start_shelter_finder(message):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∫—Ä—ã—Ç–∏—è"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "shelter_finder_start")
    
    user_states[chat_id] = 'shelter_finder'
    bot.set_state(chat_id, BotStates.shelter_finder)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    
    safe_send_message(
        chat_id,
        "üè† –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∫—Ä—ã—Ç–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

def start_safety_consultant(message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "safety_consultant_start")
    
    user_states[chat_id] = 'safety_consultant'
    bot.set_state(chat_id, BotStates.safety_consultant)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
        types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    
    safe_send_message(
        chat_id,
        "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

def start_improvement_suggestion(message):
    """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "improvement_suggestion_start")
    
    user_states[chat_id] = 'improvement_suggestion'
    user_data[chat_id] = {'step': 'suggestion'}
    bot.set_state(chat_id, BotStates.improvement_suggestion)
    
    safe_send_message(
        chat_id,
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
def handle_location(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    user_lat = message.location.latitude
    user_lon = message.location.longitude
    
    logger.bind(user_id=user_id).info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç {username}: {user_lat}, {user_lon}")
    
    if user_states.get(chat_id) == 'shelter_finder':
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        logger.bind(user_id=user_id).info("–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        find_nearest_shelter(chat_id, user_lat, user_lon)
    elif user_states.get(chat_id) == 'danger_report':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ handlers
        logger.bind(user_id=user_id).info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        result = handle_danger_report_location(message, user_data[chat_id])
        if isinstance(result, dict):
            safe_send_message(chat_id, result['text'], reply_markup=result.get('reply_markup'), parse_mode=result.get('parse_mode'))
    else:
        logger.bind(user_id=user_id).warning(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {user_states.get(chat_id)}")
        safe_send_message(chat_id, "‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@bot.message_handler(content_types=['photo', 'video', 'document'])
def handle_media(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    content_type = message.content_type
    
    logger.bind(user_id=user_id).info(f"–ü–æ–ª—É—á–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª –æ—Ç {username}: {content_type}")
    
    if user_states.get(chat_id) == 'danger_report':
        logger.bind(user_id=user_id).info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        result = handle_danger_report_media(message, user_data[chat_id], MAX_FILE_SIZE_MB, MAX_VIDEO_SIZE_MB)
        safe_send_message(chat_id, result, reply_markup=get_media_keyboard())
    else:
        logger.bind(user_id=user_id).warning(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {user_states.get(chat_id)}")
        safe_send_message(chat_id, "‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ MVP –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or BOT_TOKEN == 'your_telegram_bot_token_here':
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞")
        logger.info("üìù –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env:")
        logger.info("BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
        logger.info("ADMIN_CHAT_ID=123456789")
        sys.exit(1)
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
        bot_info = bot.get_me()
        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        logger.info(f"–¢–æ–∫–µ–Ω: {mask_sensitive_data(BOT_TOKEN)}")
        
        # –û—á–∏—â–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        logger.info("–û—á–∏—Å—Ç–∫–∞ webhook...")
        try:
            bot.remove_webhook()
            logger.info("Webhook –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã...")
        try:
            import psutil
            python_processes = [p for p in psutil.process_iter(['pid', 'name', 'cmdline']) 
                              if p.info['name'] == 'python.exe' and 
                              'main.py' in ' '.join(p.info['cmdline'] or [])]
            
            if len(python_processes) > 1:
                logger.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(python_processes)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Python —Å main.py")
                for proc in python_processes[1:]:  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–±–∏–≤–∞–µ–º
                    try:
                        proc.terminate()
                        logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                    except:
                        pass
                time.sleep(2)
        except ImportError:
            logger.warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...")
        time.sleep(3)
        
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ polling: interval=3, timeout=20, none_stop=True")
        
        try:
            bot.polling(none_stop=True, interval=3, timeout=20)
        except Exception as polling_error:
            error_str = str(polling_error)
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {error_str}")
            
            if "409" in error_str or "Conflict" in error_str:
                logger.error("‚ùå –û—à–∏–±–∫–∞ 409: –ö–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞")
                logger.info("üí° –†–µ—à–µ–Ω–∏—è:")
                logger.info("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\\stop_bot.ps1")
                logger.info("2. –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: Get-Process python | Stop-Process -Force")
                logger.info("3. –ò–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä")
                logger.info("4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                try:
                    import subprocess
                    logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ taskkill
                    result = subprocess.run(["taskkill", "/f", "/im", "python.exe"], 
                                          capture_output=True, timeout=10, text=True)
                    
                    if result.returncode == 0:
                        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ taskkill")
                    else:
                        logger.warning("‚ö†Ô∏è taskkill –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ psutil...")
                        try:
                            import psutil
                            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                                if (proc.info['name'] == 'python.exe' and 
                                    'main.py' in ' '.join(proc.info['cmdline'] or [])):
                                    try:
                                        proc.terminate()
                                        logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                                    except:
                                        pass
                        except:
                            pass
                    
                    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
                    
                    # –û—á–∏—â–∞–µ–º webhook –µ—â–µ —Ä–∞–∑
                    try:
                        bot.remove_webhook()
                        logger.info("Webhook –æ—á–∏—â–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ")
                    except:
                        pass
                    
                    logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞...")
                    bot.polling(none_stop=True, interval=3, timeout=20)
                    
                except Exception as auto_stop_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {auto_stop_error}")
                    logger.info("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å restart_clean.py")
                    sys.exit(1)
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ polling: {polling_error}")
                sys.exit(1)
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except ssl.SSLError as e:
        logger.error(f"‚ùå SSL –æ—à–∏–±–∫–∞: {e}")
        logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
        sys.exit(1)
