#!/usr/bin/env python3
"""
MVP Telegram-–±–æ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å 4 –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import csv
import json
import os
import signal
import ssl
import sys
import time
from datetime import datetime, timezone, timedelta
from pathlib import Path

import psutil
import telebot
import urllib3
from flask import Flask, jsonify
from dotenv import load_dotenv
from handlers import (
    finish_danger_report,
    get_back_keyboard,
    get_main_menu_keyboard,
    get_media_keyboard,
    handle_danger_report_location,
    handle_danger_report_media,
    handle_danger_report_text,
    handle_improvement_suggestion_text,
    log_activity,
    set_bot_instance,
)
from loguru import logger
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
try:
    from security import check_user_security, validate_user_file, validate_user_text

    SECURITY_ENABLED = True
    logger.info("‚úÖ –ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    SECURITY_ENABLED = False
    logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    def check_user_security(user_id, action="general"):
        return True, None

    def validate_user_text(text, user_id):
        return True, None

    def validate_user_file(file_size, file_type, user_id, max_size_mb=20):
        return True, None


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
load_dotenv(".env", override=False)
# –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Railway/–ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
# override=True –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å .env —Ñ–∞–π–ª
load_dotenv(override=True)

# –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
PROJECT_ROOT = Path(__file__).parent.parent
LOCK_FILE = PROJECT_ROOT / "bot.lock"
PID_FILE = PROJECT_ROOT / "bot.pid"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Railway
logger.info("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
logger.info(f"BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù'}")
logger.info(f"ADMIN_CHAT_ID: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if ADMIN_CHAT_ID else '–ù–ï –ù–ê–ô–î–ï–ù'}")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
MAX_FILE_SIZE_MB = int(os.getenv("MAX_FILE_SIZE_MB", "20"))
MAX_VIDEO_SIZE_MB = int(os.getenv("MAX_VIDEO_SIZE_MB", "300"))

# Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è yandex_notifications.py

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∞–¥–º–∏–Ω–∞


def log_admin_error(error_type: str, error: Exception, context: dict = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        safe_context = context if isinstance(context, dict) else {}

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ –æ—à–∏–±–æ–∫
        logger.error(
            f"ADMIN_ERROR | {error_type} | {type(error).__name__}: {str(error)}"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        logger.bind(error_type=error_type).error(
            f"{type(error).__name__}: {str(error)} | Context: {safe_context}"
        )

        # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        if error_type in ["BOT_CRASH", "API_FAILURE", "CONFIG_ERROR"]:
            logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê | {error_type} | {str(error)}")

    except Exception as log_error:
        # –ï—Å–ª–∏ –¥–∞–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        print(f"–û–®–ò–ë–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø: {log_error}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–∞
def check_running_bots():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    running_bots = []

    for proc in psutil.process_iter(["pid", "name", "cmdline"]):
        try:
            if proc.info["name"] in ["python.exe", "python"]:
                cmdline = " ".join(proc.info["cmdline"]) if proc.info["cmdline"] else ""
                if any(
                    keyword in cmdline.lower()
                    for keyword in ["bot", "main.py", "run_bot.py"]
                ):
                    running_bots.append(proc.info["pid"])
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    return running_bots


def create_process_lock():
    """–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        current_pid = os.getpid()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        running_bots = check_running_bots()
        if len(running_bots) > 1:  # –ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π)
            logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞!")
            logger.error(f"–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {running_bots}")
            return False

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_data = {
            "pid": current_pid,
            "started_at": datetime.now().isoformat(),
            "project_path": str(PROJECT_ROOT),
        }

        with open(LOCK_FILE, "w", encoding="utf-8") as f:
            json.dump(lock_data, f, indent=2, ensure_ascii=False)

        with open(PID_FILE, "w", encoding="utf-8") as f:
            f.write(str(current_pid))

        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: PID {current_pid}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False


def remove_process_lock():
    """–£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        if LOCK_FILE.exists():
            LOCK_FILE.unlink()
        if PID_FILE.exists():
            PID_FILE.unlink()
        logger.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    remove_process_lock()
    sys.exit(0)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Health Check
health_app = Flask(__name__)

@health_app.route('/health')
def health_check():
    """Health check endpoint –¥–ª—è Railway"""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    moscow_offset = timedelta(hours=3)
    moscow_tz = timezone(moscow_offset)
    moscow_time = datetime.now(moscow_tz)
    current_hour = moscow_time.hour
    working_hours = 7 <= current_hour < 19
    
    return jsonify({
        "status": "healthy",
        "service": "telegram-bot",
        "working_hours": working_hours,
        "current_time_moscow": moscow_time.strftime('%H:%M'),
        "timestamp": datetime.now().isoformat()
    })

@health_app.route('/')
def root():
    """Root endpoint"""
    return jsonify({"service": "RPRZ Telegram Bot", "status": "running"})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

def is_working_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: 7:00-19:00 –ú–°–ö"""
    # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7
    return True
    
    # –ú–°–ö = UTC+3
    # moscow_offset = timedelta(hours=3)
    # moscow_tz = timezone(moscow_offset)
    # moscow_time = datetime.now(moscow_tz)
    # current_hour = moscow_time.hour
    # 
    # # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 7:00-19:00
    # return 7 <= current_hour < 19


def check_and_shutdown_if_needed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç –µ—Å–ª–∏ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"""
    if not is_working_hours():
        moscow_offset = timedelta(hours=3)
        moscow_tz = timezone(moscow_offset)
        moscow_time = datetime.now(moscow_tz)
        logger.warning(f"‚è∞ –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è! –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {moscow_time.strftime('%H:%M')}. –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
        logger.info("üïê –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –±–æ—Ç–∞: 7:00-19:00 –ú–°–ö")
        sys.exit(0)


def mask_sensitive_data(text: str) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö"""
    if not text:
        return ""

    # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: BOT_ID:BOT_TOKEN)
    if ":" in text and len(text) > 20:
        parts = text.split(":")
        if len(parts) == 2 and parts[0].isdigit():
            return f"{parts[0]}:***{parts[1][-4:]}"

    # –ú–∞—Å–∫–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω—ã)
    if len(text) > 20:
        return f"{text[:8]}***{text[-4:]}"

    return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞


def sanitize_user_input(text: str) -> str:
    """–°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS –∏ –∏–Ω—ä–µ–∫—Ü–∏–π"""
    if not text:
        return ""

    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    dangerous_chars = ["<", ">", '"', "'", "&", ";", "|", "`", "$", "(", ")", "{", "}"]
    sanitized = text

    for char in dangerous_chars:
        sanitized = sanitized.replace(char, "")

    # –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    dangerous_keywords = [
        "script",
        "javascript",
        "vbscript",
        "onload",
        "onerror",
        "onclick",
        "iframe",
        "object",
        "embed",
        "form",
        "input",
        "select",
        "option",
        "DROP",
        "DELETE",
        "INSERT",
        "UPDATE",
        "SELECT",
        "UNION",
        "OR",
        "AND",
        "rm",
        "del",
        "format",
        "shutdown",
        "reboot",
        "kill",
        "taskkill",
    ]

    for keyword in dangerous_keywords:
        sanitized = sanitized.replace(keyword, "")
        sanitized = sanitized.replace(keyword.upper(), "")
        sanitized = sanitized.replace(keyword.lower(), "")

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(sanitized) > 1000:
        sanitized = sanitized[:1000] + "..."

    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    sanitized = " ".join(sanitized.split())

    return sanitized.strip()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞


def validate_user_input(
    text: str, min_length: int = 1, max_length: int = 1000
) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥"""
    if not text:
        return False, "–ü—É—Å—Ç–æ–π –≤–≤–æ–¥"

    if len(text) < min_length:
        return False, f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–≤–æ–¥ (–º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤)"

    if len(text) > max_length:
        return False, f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥ (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    suspicious_patterns = [
        r"<script",
        r"javascript:",
        r"data:",
        r"vbscript:",
        r"onload=",
        r"onerror=",
        r"onclick=",
        r"onmouseover=",
        r"<iframe",
        r"<object",
        r"<embed",
        r"<form",
        r"SELECT.*FROM",
        r"INSERT.*INTO",
        r"UPDATE.*SET",
        r"DELETE.*FROM",
        r"DROP.*TABLE",
        r"UNION.*SELECT",
        r"OR.*1=1",
        r"AND.*1=1",
    ]

    import re

    text_lower = text.lower()
    for pattern in suspicious_patterns:
        if re.search(pattern, text_lower):
            return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"

    return True, "OK"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —É–±–µ–∂–∏—â
def show_all_shelters(chat_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–±–µ–∂–∏—â"""
    if not BOT_TOKEN or not bot:
        logger.warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ñ—É–Ω–∫—Ü–∏—è show_all_shelters –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    shelters = placeholders.get("shelters", [])

    if not shelters:
        bot.send_message(
            chat_id, "‚ùå –°–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=get_back_keyboard()
        )
        return

    success_count = 0
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É–±–µ–∂–∏—â–µ
    for i, shelter in enumerate(shelters, 1):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–±–µ–∂–∏—â–∞
            photo_path = shelter.get("photo_path", "")
            if photo_path and os.path.exists(photo_path):
                try:
                    with open(photo_path, "rb") as photo_file:
                        bot.send_photo(
                            chat_id,
                            photo_file,
                            caption=f"üè† {shelter['name']}",
                        )
                except Exception as photo_error:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —É–±–µ–∂–∏—â–∞ {i}: {photo_error}"
                    )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–±–µ–∂–∏—â–µ (–±–µ–∑ Markdown –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            shelter_text = (
                f"üè† {shelter['name']}\n\n"
                f"üìù {shelter['description']}\n\n"
                f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {shelter['lat']}, {shelter['lon']}\n"
                f"üåê –ö–∞—Ä—Ç–∞: {shelter['map_link']}"
            )

            bot.send_message(chat_id, shelter_text)
            success_count += 1

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–±–µ–∂–∏—â–µ {i}: {e}")
            continue

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        final_text = (
            f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —É–±–µ–∂–∏—â: {success_count} –∏–∑ {len(shelters)}\n\n"
            f"–í—Å–µ —É–±–µ–∂–∏—â–∞ –æ—Å–Ω–∞—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
        )
        bot.send_message(chat_id, final_text, reply_markup=get_back_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏)


def find_nearest_shelter(chat_id: int, user_lat: float, user_lon: float):
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É–±–µ–∂–∏—â–∞ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not BOT_TOKEN or not bot:
        logger.warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ñ—É–Ω–∫—Ü–∏—è find_nearest_shelter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    shelters = placeholders.get("shelters", [])

    if not shelters:
        bot.send_message(
            chat_id, "‚ùå –°–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=get_back_keyboard()
        )
        return

    # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è MVP)
    def calculate_distance(lat1, lon1, lat2, lon2):
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        # 1 –≥—Ä–∞–¥—É—Å —à–∏—Ä–æ—Ç—ã ‚âà 111 –∫–º
        return ((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2) ** 0.5 * 111

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–∞–∂–¥–æ–≥–æ —É–±–µ–∂–∏—â–∞
    shelters_with_distance = []
    for shelter in shelters:
        try:
            shelter_lat = float(shelter.get("lat", 0))
            shelter_lon = float(shelter.get("lon", 0))
            distance = calculate_distance(user_lat, user_lon, shelter_lat, shelter_lon)
            shelters_with_distance.append((shelter, distance))
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–±–µ–∂–∏—â–∞: {e}")
            continue

    if not shelters_with_distance:
        bot.send_message(
            chat_id,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —É–±–µ–∂–∏—â",
            reply_markup=get_back_keyboard(),
        )
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–æ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –¥–∞–ª—å–Ω–µ–º—É)
    shelters_with_distance.sort(key=lambda x: x[1])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É–±–µ–∂–∏—â–µ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    try:
        bot.send_message(
            chat_id, "üìç –£–±–µ–∂–∏—â–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")

    success_count = 0
    for i, (shelter, distance) in enumerate(shelters_with_distance, 1):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–±–µ–∂–∏—â–∞
            photo_path = shelter.get("photo_path", "")
            if photo_path and os.path.exists(photo_path):
                try:
                    with open(photo_path, "rb") as photo_file:
                        caption = f"{'üéØ' if i == 1 else 'üè†'} #{i} {shelter['name']}"
                        bot.send_photo(chat_id, photo_file, caption=caption)
                except Exception as photo_error:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —É–±–µ–∂–∏—â–∞ {i}: {photo_error}"
                    )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (–±–µ–∑ Markdown –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            priority_marker = "üéØ –ë–õ–ò–ñ–ê–ô–®–ï–ï" if i == 1 else f"#{i}"
            shelter_text = (
                f"{priority_marker} - {shelter['name']}\n\n"
                f"üìù {shelter['description']}\n\n"
                f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ~{distance:.2f} –∫–º\n"
                f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {shelter['lat']}, {shelter['lon']}\n"
                f"üåê –ö–∞—Ä—Ç–∞: {shelter['map_link']}"
            )

            bot.send_message(chat_id, shelter_text)
            success_count += 1

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–±–µ–∂–∏—â–µ {i}: {e}")
            continue

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        final_text = (
            f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —É–±–µ–∂–∏—â: {success_count} –∏–∑ {len(shelters_with_distance)}\n\n"
            f"üéØ –ë–ª–∏–∂–∞–π—à–µ–µ: {shelters_with_distance[0][0]['name']} (~{shelters_with_distance[0][1]:.2f} –∫–º)\n\n"
            f"–í—Å–µ —É–±–µ–∂–∏—â–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –¥–∞–ª—å–Ω–µ–º—É."
        )
        bot.send_message(chat_id, final_text, reply_markup=get_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            bot.send_message(
                chat_id, "‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=get_main_menu_keyboard()
            )
        except Exception:
            pass

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_states[chat_id] = "main_menu"
    bot.set_state(chat_id, BotStates.main_menu)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ if __name__ == "__main__":

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ if
# __name__ == "__main__"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤
# –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ)
user_states = {}  # chat_id -> —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
user_data = {}  # chat_id -> –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_history = {}  # chat_id -> –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
bot = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotStates(StatesGroup):
    main_menu = State()
    danger_report = State()
    shelter_finder = State()
    improvement_suggestion = State()


# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–ª—É—à–µ–∫


def load_placeholders():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ-–∑–∞–≥–ª—É—à–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open("configs/data_placeholders.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log_admin_error(
            "CONFIG_LOAD_ERROR", e, {"config_file": "configs/data_placeholders.json"}
        )
        return {}


placeholders = load_placeholders()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def handle_uninitialized_user(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"

    logger.info(
        f"–ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({chat_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª: {message.text}"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[chat_id] = "main_menu"
    user_data[chat_id] = {}
    user_history[chat_id] = []
    bot.set_state(chat_id, BotStates.main_menu)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚ùó –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üè† –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ\n"
        "üßë‚Äçüè´ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
    )

    bot.send_message(chat_id, welcome_text, reply_markup=get_main_menu_keyboard())
    log_activity(chat_id, username, "auto_initialization")


def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if SECURITY_ENABLED:
        is_allowed, error_msg = check_user_security(user_id, action="start")
        if not is_allowed:
            bot.send_message(chat_id, error_msg)
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω /start –æ—Ç {user_id}: {error_msg}")
            return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    logger.bind(user_id=user_id).info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

    log_activity(chat_id, username, "start")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_states[chat_id] = "main_menu"
    user_data[chat_id] = {}
    user_history[chat_id] = []

    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–æ –≤ main_menu")

    bot.set_state(chat_id, BotStates.main_menu)

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚ùó –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üè† –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ\n"
        "üßë‚Äçüè´ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
    )

    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    bot.send_message(chat_id, welcome_text, reply_markup=get_main_menu_keyboard())


def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if SECURITY_ENABLED:
        is_allowed, error_msg = check_user_security(user_id, action="help")
        if not is_allowed:
            bot.send_message(chat_id, error_msg)
            return

    log_activity(chat_id, username, "help")

    help_text = (
        "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó\n\n"
        "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç\n"
        "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ - –Ω–∞–π—Ç–∏ —É–±–µ–∂–∏—â–µ —Ä—è–¥–æ–º\n"
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é\n\n"
        "–ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

    bot.send_message(chat_id, help_text, reply_markup=get_main_menu_keyboard())


def history_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"

    log_activity(chat_id, username, "history_request")

    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ CSV
        history_text = "üìã –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:\n\n"

        if os.path.exists("logs/activity.csv"):
            with open("logs/activity.csv", "r", encoding="utf-8") as f:
                reader = csv.DictReader(f)
                user_actions = [row for row in reader if int(row["user_id"]) == chat_id]

                if user_actions:
                    for action in user_actions[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π
                        # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
                        timestamp = action["timestamp"][:19]
                        history_text += f"üïê {timestamp}\n"
                        history_text += f"üìù {action['action']}\n"
                        if action["payload"]:
                            history_text += f"üìÑ {action['payload'][:50]}...\n"
                        history_text += "\n"
                else:
                    history_text += "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
        else:
            history_text += "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        bot.send_message(chat_id, history_text, reply_markup=get_main_menu_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        bot.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏",
            reply_markup=get_main_menu_keyboard(),
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (rate limiting, flood control)
    if SECURITY_ENABLED:
        is_allowed, error_msg = check_user_security(user_id, action="text_message")
        if not is_allowed:
            bot.send_message(chat_id, error_msg)
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {error_msg}")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        is_valid_text, text_error = validate_user_text(text, user_id)
        if not is_valid_text:
            bot.send_message(chat_id, text_error)
            logger.warning(f"üö´ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç {user_id}: {text_error}")
            return

    # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    sanitized_text = sanitize_user_input(text)
    is_valid, validation_error = validate_user_input(
        sanitized_text, min_length=1, max_length=1000
    )

    if not is_valid:
        logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤–≤–æ–¥ –æ—Ç {username}: {validation_error}")
        bot.send_message(chat_id, f"‚ùå {validation_error}")
        return

    logger.bind(user_id=user_id).info(
        f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {sanitized_text[:100]}..."
    )
    logger.debug(
        f"–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id={chat_id}, user_id={user_id}, "
        f"username={username}, text_length={len(sanitized_text)}"
    )
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_states.get(chat_id, 'None')}")

    log_activity(chat_id, username, "text_message", sanitized_text)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    if chat_id not in user_states:
        user_states[chat_id] = "main_menu"
        user_data[chat_id] = {}
        user_history[chat_id] = []
        bot.set_state(chat_id, BotStates.main_menu)
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({chat_id}) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if sanitized_text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user_states[chat_id] = "main_menu"
        bot.set_state(chat_id, BotStates.main_menu)
        bot.send_message(
            chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–≤–∫–ª—é—á–∞—è —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ None)
    if user_states.get(chat_id) in ["main_menu", None]:
        logger.bind(user_id=user_id).debug(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_states.get(chat_id)}"
        )

        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ None, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º main_menu
        if user_states.get(chat_id) is None:
            user_states[chat_id] = "main_menu"
            bot.set_state(chat_id, BotStates.main_menu)

        if sanitized_text == "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
            logger.bind(user_id=user_id).info(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'"
            )
            start_danger_report(message)
        elif sanitized_text == "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ":
            logger.bind(user_id=user_id).info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ'")
            start_shelter_finder(message)
        elif sanitized_text == "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é":
            logger.bind(user_id=user_id).info(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é'"
            )
            start_improvement_suggestion(message)
        else:
            # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            logger.bind(user_id=user_id).warning(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {sanitized_text}"
            )
            bot.send_message(
                chat_id,
                "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=get_main_menu_keyboard(),
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    elif user_states.get(chat_id) == "danger_report":
        logger.bind(user_id=user_id).debug(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'danger_report' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}"
        )
        result = handle_danger_report_text(message, user_data[chat_id], placeholders)
        if isinstance(result, tuple):
            new_state, response = result
            logger.bind(user_id=user_id).info(
                f"–ü–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_states[chat_id]} -> {new_state}"
            )
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    bot.send_message(
                        chat_id,
                        response["text"],
                        reply_markup=response.get("reply_markup"),
                        parse_mode=response.get("parse_mode"),
                    )
                elif response is not None:
                    bot.send_message(
                        chat_id, response, reply_markup=get_main_menu_keyboard()
                    )
                else:
                    bot.send_message(
                        chat_id,
                        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=get_main_menu_keyboard(),
                    )
            else:
                if isinstance(response, dict):
                    bot.send_message(
                        chat_id,
                        response["text"],
                        reply_markup=response.get("reply_markup"),
                        parse_mode=response.get("parse_mode"),
                    )
                elif response is not None:
                    bot.send_message(
                        chat_id, response, reply_markup=get_back_keyboard()
                    )
                else:
                    bot.send_message(
                        chat_id,
                        "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=get_back_keyboard(),
                    )
        else:
            bot.send_message(chat_id, result, reply_markup=get_back_keyboard())

    elif user_states.get(chat_id) == "shelter_finder":
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            user_states[chat_id] = "main_menu"
            bot.set_state(chat_id, BotStates.main_menu)
            bot.send_message(
                chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard()
            )
        elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â":
            show_all_shelters(chat_id)
        elif text == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é":
            bot.send_message(
                chat_id,
                "üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é' –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞",
            )
        else:
            bot.send_message(
                chat_id,
                "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=get_back_keyboard(),
            )

    elif user_states.get(chat_id) == "improvement_suggestion":
        result = handle_improvement_suggestion_text(message, placeholders, user_data)
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            if new_state == "main_menu":
                bot.set_state(chat_id, BotStates.main_menu)
                if isinstance(response, dict):
                    bot.send_message(
                        chat_id,
                        response["text"],
                        reply_markup=response.get("reply_markup"),
                    )
                elif response is not None:
                    bot.send_message(
                        chat_id, response, reply_markup=get_main_menu_keyboard()
                    )
                else:
                    bot.send_message(
                        chat_id,
                        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=get_main_menu_keyboard(),
                    )
            else:
                if isinstance(response, dict):
                    bot.send_message(
                        chat_id,
                        response["text"],
                        reply_markup=response.get("reply_markup"),
                    )
                elif response is not None:
                    bot.send_message(
                        chat_id, response, reply_markup=get_back_keyboard()
                    )
                else:
                    bot.send_message(
                        chat_id,
                        "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=get_back_keyboard(),
                    )
        else:
            bot.send_message(chat_id, result, reply_markup=get_back_keyboard())


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö


def start_danger_report(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"

    log_activity(chat_id, username, "danger_report_start")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    user_states[chat_id] = "danger_report"
    user_data[chat_id] = {"step": "description", "description": "", "location": None}
    bot.set_state(chat_id, BotStates.danger_report)

    bot.send_message(
        chat_id,
        "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
        "üìù –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤, –∏ –Ω–∞–ø–∏—Å–∞—Ç—å "
        "¬´–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è¬ª. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –∏–ª–∏ –∫–∞–∫ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫—É.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞. –ü—Ä–∏–º–µ—Ä: ‚Äì –¶–ì–¢-025, 4-–π —É—á–∞—Å—Ç–æ–∫.\n"
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –í–∞—à–µ —Ñ–æ—Ç–æ –æ–±–ª–µ–≥—á–∏—Ç –∏–ª–∏ —É—Å–∫–æ—Ä–∏—Ç —Ä–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
        "üìù –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_back_keyboard(),
    )


def start_shelter_finder(message):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∫—Ä—ã—Ç–∏—è"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"

    log_activity(chat_id, username, "shelter_finder_start")

    user_states[chat_id] = "shelter_finder"
    bot.set_state(chat_id, BotStates.shelter_finder)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))
    markup.add(types.KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â"))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

    bot.send_message(
        chat_id,
        "üè† –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∫—Ä—ã—Ç–∏—è\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
    )


def start_improvement_suggestion(message):
    """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"

    log_activity(chat_id, username, "improvement_suggestion_start")

    user_states[chat_id] = "improvement_suggestion"
    user_data[chat_id] = {"step": "text"}
    bot.set_state(chat_id, BotStates.improvement_suggestion)

    welcome_text = (
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üìã –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n\n"
        "‚úÖ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é —á–µ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ\n"
        "‚úÖ –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å\n"
        "‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫—É—é –ø–æ–ª—å–∑—É —ç—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç\n"
        "‚úÖ –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 1000\n\n"
        "üìù –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∑–∞–≤–æ–¥–∞ —Å —É–±–µ–∂–∏—â–∞–º–∏\n"
        "‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –±–æ—Ç–µ\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:"
    )

    bot.send_message(chat_id, welcome_text, reply_markup=get_back_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏


def handle_location(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if SECURITY_ENABLED:
        is_allowed, error_msg = check_user_security(user_id, action="location")
        if not is_allowed:
            bot.send_message(chat_id, error_msg)
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç {user_id}: {error_msg}")
            return

    logger.bind(user_id=user_id).info(
        f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç {username}: {user_lat}, {user_lon}"
    )

    if user_states.get(chat_id) == "shelter_finder":
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        logger.bind(user_id=user_id).info("–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        find_nearest_shelter(chat_id, user_lat, user_lon)
    elif user_states.get(chat_id) == "danger_report":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ handlers
        logger.bind(user_id=user_id).info(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        )
        result = handle_danger_report_location(message, user_data[chat_id])
        if isinstance(result, dict):
            bot.send_message(
                chat_id,
                result["text"],
                reply_markup=result.get("reply_markup"),
                parse_mode=result.get("parse_mode"),
            )
    else:
        logger.bind(user_id=user_id).warning(
            f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {user_states.get(chat_id)}"
        )
        bot.send_message(chat_id, "‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤


def handle_media(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    user_id = message.from_user.id
    content_type = message.content_type

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if SECURITY_ENABLED:
        is_allowed, error_msg = check_user_security(user_id, action="media")
        if not is_allowed:
            bot.send_message(chat_id, error_msg)
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª –æ—Ç {user_id}: {error_msg}")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        file_size = 0
        mime_type = None

        if content_type == "photo":
            file_size = message.photo[-1].file_size
            mime_type = "image/jpeg"
        elif content_type == "video":
            file_size = message.video.file_size
            mime_type = message.video.mime_type
        elif content_type == "document":
            file_size = message.document.file_size
            mime_type = message.document.mime_type

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if file_size and mime_type:
            max_size = (
                MAX_VIDEO_SIZE_MB if content_type == "video" else MAX_FILE_SIZE_MB
            )
            is_valid, file_error = validate_user_file(
                file_size, mime_type, user_id, max_size
            )
            if not is_valid:
                bot.send_message(chat_id, file_error)
                logger.warning(f"üö´ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª –æ—Ç {user_id}: {file_error}")
                return

    logger.bind(user_id=user_id).info(
        f"–ü–æ–ª—É—á–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª –æ—Ç {username}: {content_type}"
    )

    if user_states.get(chat_id) == "danger_report":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ø - –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ "media"
        current_step = user_data.get(chat_id, {}).get("step", "")
        
        if current_step in ["location", "location_text"]:
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–∞ —ç—Ç–∞–ø–µ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–∞
            bot.send_message(
                chat_id, 
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –§–∞–π–ª—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–ª—è –ø–æ–ª—è '–ú–µ—Å—Ç–æ'."
            )
            logger.bind(user_id=user_id).warning(
                f"–û—Ç–∫–ª–æ–Ω–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞ —ç—Ç–∞–ø–µ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–∞: {current_step}"
            )
            return
            
        elif current_step == "media":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ "media"
            logger.bind(user_id=user_id).info(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            )
            result = handle_danger_report_media(
                message, user_data[chat_id], MAX_FILE_SIZE_MB, MAX_VIDEO_SIZE_MB
            )
            bot.send_message(chat_id, result, reply_markup=get_media_keyboard())
        else:
            # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–∏—Ö —ç—Ç–∞–ø–∞—Ö
            bot.send_message(
                chat_id, 
                "‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É."
            )
            logger.bind(user_id=user_id).warning(
                f"–û—Ç–∫–ª–æ–Ω–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞ —ç—Ç–∞–ø–µ: {current_step}"
            )
    else:
        logger.bind(user_id=user_id).warning(
            f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {user_states.get(chat_id)}"
        )
        bot.send_message(
            chat_id, "‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ (inline –∫–Ω–æ–ø–æ–∫)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
    chat_id = call.message.chat.id
    username = call.from_user.username or "Unknown"
    user_id = call.from_user.id
    data = call.data

    logger.bind(user_id=user_id).info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç {username}: {data}")

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if data == "back_to_menu":
            user_states[chat_id] = "main_menu"
            bot.set_state(chat_id, BotStates.main_menu)
            bot.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=chat_id, message_id=call.message.message_id
            )
            bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=get_inline_main_menu(),
            )
            bot.answer_callback_query(call.id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        # Callback'–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        elif data.startswith("danger_"):
            handle_danger_callback(call)

        # Callback'–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        elif data.startswith("vote_") or data.startswith("suggestion_"):
            handle_suggestion_callback(call)

        else:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


def handle_danger_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = call.message.chat.id
    data = call.data

    if data == "danger_add_photo":
        bot.answer_callback_query(call.id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        bot.send_message(chat_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:")

    elif data == "danger_add_location":
        bot.answer_callback_query(call.id, "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(
            types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        )
        bot.send_message(
            chat_id, "üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", reply_markup=markup
        )

    elif data == "danger_submit":
        bot.answer_callback_query(call.id, "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞...")
        result = finish_danger_report(call.message, user_data[chat_id], placeholders)
        if isinstance(result, tuple):
            new_state, response = result
            user_states[chat_id] = new_state
            if isinstance(response, dict):
                bot.send_message(
                    chat_id, response["text"], reply_markup=response.get("reply_markup")
                )
            else:
                bot.send_message(
                    chat_id, response, reply_markup=get_main_menu_keyboard()
                )

    elif data == "danger_cancel":
        bot.answer_callback_query(call.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        user_data[chat_id].clear()
        user_states[chat_id] = "main_menu"
        bot.set_state(chat_id, BotStates.main_menu)
        bot.send_message(
            chat_id,
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu_keyboard(),
        )


def handle_suggestion_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    chat_id = call.message.chat.id
    data = call.data

    if data.startswith("vote_"):
        # –§–æ—Ä–º–∞—Ç: vote_yes_123 –∏–ª–∏ vote_no_123
        parts = data.split("_")
        vote_type = parts[1]  # 'yes' –∏–ª–∏ 'no'
        suggestion_id = int(parts[2])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        success = process_vote(chat_id, suggestion_id, vote_type)

        if success:
            emoji = "üëç" if vote_type == "yes" else "üëé"
            bot.answer_callback_query(call.id, f"{emoji} –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
            try:
                suggestions_file = "logs/enhanced_suggestions.json"
                if os.path.exists(suggestions_file):
                    with open(suggestions_file, "r", encoding="utf-8") as f:
                        suggestions = json.load(f)

                    suggestion = next(
                        (s for s in suggestions if s["id"] == suggestion_id), None
                    )
                    if suggestion:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(
                            types.InlineKeyboardButton(
                                f"üëç {suggestion.get('votes', 0)}",
                                callback_data=f"vote_yes_{suggestion_id}",
                            ),
                            types.InlineKeyboardButton(
                                f"üëé {suggestion.get('downvotes', 0)}",
                                callback_data=f"vote_no_{suggestion_id}",
                            ),
                        )
                        bot.edit_message_reply_markup(
                            chat_id=chat_id,
                            message_id=call.message.message_id,
                            reply_markup=markup,
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
        else:
            bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏")

    elif data == "suggestion_my":
        bot.answer_callback_query(call.id, "üìä –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
        # TODO: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    elif data == "suggestion_popular":
        bot.answer_callback_query(call.id, "üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö...")
        # TODO: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è


def process_vote(user_id: int, suggestion_id: int, vote_type: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        suggestions_file = "logs/enhanced_suggestions.json"
        if not os.path.exists(suggestions_file):
            return False

        with open(suggestions_file, "r", encoding="utf-8") as f:
            suggestions = json.load(f)

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        suggestion = next((s for s in suggestions if s["id"] == suggestion_id), None)
        if not suggestion:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        voters = suggestion.get("voters", [])
        if user_id in voters:
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
        voters.append(user_id)
        suggestion["voters"] = voters

        if vote_type == "yes":
            suggestion["votes"] = suggestion.get("votes", 0) + 1
        else:
            suggestion["downvotes"] = suggestion.get("downvotes", 0) + 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(suggestions_file, "w", encoding="utf-8") as f:
            json.dump(suggestions, f, ensure_ascii=False, indent=2)

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        return False


def get_inline_main_menu():
    """–°–æ–∑–¥–∞—ë—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(
            "‚ùó –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data="start_danger_report"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ", callback_data="start_shelter_finder"
        )
    )
    markup.add(
        types.InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="start_improvement")
    )
    return markup


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—ç–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ Railway)
    check_and_shutdown_if_needed()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è Railway/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)
    IS_RAILWAY = os.getenv("RAILWAY_ENVIRONMENT") or os.getenv("RAILWAY_PROJECT_ID")

    if not IS_RAILWAY:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        if not create_process_lock():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞")
            logger.info("üí° –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
            sys.exit(1)
    else:
        logger.info("üöÇ –ó–∞–ø—É—Å–∫ –≤ Railway - –ø—Ä–æ–ø—É—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    os.makedirs("logs", exist_ok=True)

    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
    logger.add(
        "logs/app.log",
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}",
        level="DEBUG",
        rotation="10 MB",
        compression="zip",
        encoding="utf-8",
        errors="replace",
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—à–∏–±–æ–∫ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    logger.add(
        "logs/errors.log",
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}",
        level="ERROR",
        rotation="10 MB",
        compression="zip",
        encoding="utf-8",
        errors="replace",
    )

    # –õ–æ–≥ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∞–¥–º–∏–Ω–∞
    logger.add(
        "logs/admin_critical.log",
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | CRITICAL | {name}:{function}:{line} - {message}",
        level="CRITICAL",
        rotation="5 MB",
        compression="zip",
        encoding="utf-8",
        errors="replace",
        filter=lambda record: record["level"].name == "CRITICAL",
    )

    # –õ–æ–≥ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫
    logger.add(
        "logs/system_errors.log",
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | SYSTEM | {extra[error_type]} | {name}:{function}:{line} - {message}",
        level="ERROR",
        rotation="5 MB",
        compression="zip",
        encoding="utf-8",
        errors="replace",
        filter=lambda record: "error_type" in record["extra"],
    )

    # –õ–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    logger.add(
        "logs/user_actions.log",
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | USER:{extra[user_id]} | {message}",
        level="INFO",
        rotation="5 MB",
        compression="zip",
        encoding="utf-8",
        errors="replace",
        filter=lambda record: "user_id" in record["extra"],
    )

    # –õ–æ–≥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    logger.add(
        "logs/api_requests.log",
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | API | {message}",
        level="DEBUG",
        rotation="5 MB",
        compression="zip",
        encoding="utf-8",
        errors="replace",
    )

    logger.info("–ó–∞–ø—É—Å–∫ MVP –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or len(BOT_TOKEN) < 10:
        log_admin_error(
            "CONFIG_ERROR",
            Exception("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω"),
            {"config_file": ".env", "required_vars": ["BOT_TOKEN", "ADMIN_CHAT_ID"]},
        )
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        logger.info("üìù –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env:")
        logger.info("BOT_TOKEN=<–≤–∞—à_—Ç–æ–∫–µ–Ω>")
        logger.info("ADMIN_CHAT_ID=<–≤–∞—à_chat_id>")
        logger.info("üìù –î–ª—è Railway –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ Variables")
        sys.exit(1)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    state_storage = StateMemoryStorage()
    bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è handlers
    set_bot_instance(bot)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è notifications
    try:
        from bot.notifications import set_bot_instance
        set_bot_instance(bot)
        logger.info("‚úÖ Bot instance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è notifications")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å bot instance –¥–ª—è notifications: {e}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.message_handler(
        func=lambda message: message.chat.id not in user_states
        and message.content_type == "text"
        and not message.text.startswith("/")
    )(handle_uninitialized_user)
    bot.message_handler(commands=["start"])(start_command)
    bot.message_handler(commands=["help"])(help_command)
    bot.message_handler(commands=["my_history"])(history_command)
    bot.message_handler(content_types=["text"])(handle_text)
    bot.message_handler(content_types=["location"])(handle_location)
    bot.message_handler(content_types=["photo", "video", "document"])(handle_media)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ (inline –∫–Ω–æ–ø–æ–∫)
    bot.callback_query_handler(func=lambda call: True)(handle_callback)

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
        bot_info = bot.get_me()
        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        logger.info(f"–¢–æ–∫–µ–Ω: {mask_sensitive_data(BOT_TOKEN)}")

        # –û—á–∏—â–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        logger.info("–û—á–∏—Å—Ç–∫–∞ webhook...")
        try:
            bot.remove_webhook()
            logger.info("Webhook –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã...")
        try:
            python_processes = [
                p
                for p in psutil.process_iter(["pid", "name", "cmdline"])
                if p.info["name"] == "python.exe"
                and "main.py" in " ".join(p.info["cmdline"] or [])
            ]

            if len(python_processes) > 1:
                logger.warning(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(python_processes)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Python —Å main.py"
                )
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–±–∏–≤–∞–µ–º
                for proc in python_processes[1:]:
                    try:
                        proc.terminate()
                        logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                    except Exception:
                        pass
                time.sleep(2)
        except ImportError:
            logger.warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...")
        time.sleep(3)

        # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Health Check –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        def run_flask():
            health_app.run(host='0.0.0.0', port=int(os.getenv('PORT', 8000)), debug=False, use_reloader=False)
        
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info("‚úÖ Flask Health Check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")

        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ polling: interval=3, timeout=20, none_stop=True")

        try:
            bot.polling(none_stop=True, interval=3, timeout=20)
        except Exception as polling_error:
            error_str = str(polling_error)
            log_admin_error(
                "BOT_POLLING_ERROR",
                polling_error,
                {
                    "error_type": "polling_critical",
                    "bot_token_masked": mask_sensitive_data(BOT_TOKEN),
                },
            )

            if "409" in error_str or "Conflict" in error_str:
                log_admin_error(
                    "BOT_INSTANCE_CONFLICT",
                    polling_error,
                    {
                        "error_type": "instance_conflict",
                        "recommended_actions": [
                            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python",
                            "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä",
                            "–ü–æ–¥–æ–∂–¥–∞—Ç—å 2-3 –º–∏–Ω—É—Ç—ã",
                        ],
                    },
                )

                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                try:
                    logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ psutil
                    try:
                        for proc in psutil.process_iter(["pid", "name", "cmdline"]):
                            if proc.info[
                                "name"
                            ] == "python.exe" and "main.py" in " ".join(
                                proc.info["cmdline"] or []
                            ):
                                try:
                                    proc.terminate()
                                    logger.info(
                                        f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}"
                                    )
                                except Exception:
                                    pass
                    except (ImportError, Exception) as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

                    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)

                    # –û—á–∏—â–∞–µ–º webhook –µ—â–µ —Ä–∞–∑
                    try:
                        bot.remove_webhook()
                        logger.info("Webhook –æ—á–∏—â–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ")
                    except Exception:
                        pass

                    logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞...")
                    bot.polling(none_stop=True, interval=3, timeout=20)

                except Exception as auto_stop_error:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {auto_stop_error}"
                    )
                    logger.info("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å restart_clean.py")
                    sys.exit(1)
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ polling: {polling_error}")
                sys.exit(1)

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        if not IS_RAILWAY:
            remove_process_lock()
        sys.exit(0)
    except ssl.SSLError as e:
        logger.error(f"‚ùå SSL –æ—à–∏–±–∫–∞: {e}")
        logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN")
        if not IS_RAILWAY:
            remove_process_lock()
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
        if not IS_RAILWAY:
            remove_process_lock()
        sys.exit(1)
