import os
import logging
import json
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('logs/app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ-–∑–∞–≥–ª—É—à–∫–∏
def load_placeholder_data():
    try:
        with open('configs/data_placeholders.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª data_placeholders.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        ['‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
        ['üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ'],
        ['üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text = (
        "üõ°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    user_id = user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ "–°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    if user_id in user_states:
        state = user_states[user_id]['state']
        
        if state == 'danger_description':
            await handle_danger_description(update, context)
            return
        elif state == 'danger_location':
            await handle_danger_location(update, context)
            return
        elif state == 'danger_media':
            if text == "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ":
                await update.message.reply_text(
                    "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é",
                    reply_markup=ReplyKeyboardMarkup([
                        ['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
                        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
                    ], resize_keyboard=True)
                )
                return
            elif text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                await handle_danger_skip_media(update, context)
                return
            elif text == "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ":
                await update.message.reply_text(
                    "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é",
                    reply_markup=ReplyKeyboardMarkup([
                        ['‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'],
                        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
                    ], resize_keyboard=True)
                )
                return
            elif text == "‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
                await handle_danger_continue(update, context)
                return
        elif state == 'danger_confirm':
            if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
                await handle_danger_confirm(update, context)
                return
            elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
                user_states[user_id] = {
                    'state': 'danger_description',
                    'data': {}
                }
                await handle_danger_report(update, context)
                return
            elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
                if user_id in user_states:
                    del user_states[user_id]
                await update.message.reply_text(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                    reply_markup=get_main_menu()
                )
                return
        elif state == 'shelter_location':
            if text == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é":
                await update.message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ",
                    reply_markup=ReplyKeyboardMarkup([
                        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
                        ['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
                        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
                    ], resize_keyboard=True)
                )
                return
            elif text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                await show_shelters(update, context)
                return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" or text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in user_states:
            del user_states[user_id]
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if text == "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–ª—É–∂–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
        await handle_security_call(update, context)
        return
    elif text == "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –æ—Ö—Ä–∞–Ω—É —Ç—Ä—É–¥–∞":
        await handle_safety_call(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–±–µ–∂–∏—â
    if text in ["üîç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", "üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö"]:
        await handle_shelter_actions(update, context)
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if text == "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
        await handle_danger_report(update, context)
    elif text == "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ":
        await handle_shelter_finder(update, context)
    elif text == "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó":
        await handle_safety_consultant(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
            reply_markup=get_main_menu()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
async def handle_danger_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'danger_description',
        'data': {}
    }
    
    keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üö® **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏**\n\n"
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã:\n"
        "‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n"
        "‚Ä¢ –ï—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ?",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
async def handle_danger_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'danger_description':
        return
    
    user_states[user_id]['data']['description'] = update.message.text
    user_states[user_id]['state'] = 'danger_location'
    
    keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ**\n\n"
        "–£–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Ç—É–∞—Ü–∏—è:\n"
        "‚Ä¢ –ê–¥—Ä–µ—Å –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞\n"
        "‚Ä¢ –≠—Ç–∞–∂, –∫–∞–±–∏–Ω–µ—Ç, –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è\n"
        "‚Ä¢ –õ—é–±—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async def handle_danger_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'danger_location':
        return
    
    user_states[user_id]['data']['location'] = update.message.text
    user_states[user_id]['state'] = 'danger_media'
    
    keyboard = [
        ['üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ'],
        ['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìé **–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã**\n\n"
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é.\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: —Ñ–æ—Ç–æ –¥–æ 20 –ú–ë, –≤–∏–¥–µ–æ –¥–æ 300 –ú–ë",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
async def handle_danger_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'danger_media':
        return
    
    if update.message.photo or update.message.video:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            file_size = update.message.photo[-1].file_size
            file_type = 'photo'
        else:  # video
            file_id = update.message.video.file_id
            file_size = update.message.video.file_size
            file_type = 'video'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        max_photo_size = 20 * 1024 * 1024  # 20 –ú–ë
        max_video_size = 300 * 1024 * 1024  # 300 –ú–ë
        
        if file_type == 'photo' and file_size > max_photo_size:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: 20 –ú–ë",
                reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
            )
            return
        elif file_type == 'video' and file_size > max_video_size:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: 300 –ú–ë",
                reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
            )
            return
        
        if 'media_files' not in user_states[user_id]['data']:
            user_states[user_id]['data']['media_files'] = []
        
        user_states[user_id]['data']['media_files'].append({
            'file_id': file_id,
            'file_type': file_type,
            'file_size': file_size
        })
        
        await update.message.reply_text(
            f"‚úÖ {file_type == 'photo' and '–§–æ—Ç–æ' or '–í–∏–¥–µ–æ'} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=ReplyKeyboardMarkup([
                ['üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ'],
                ['‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'],
                ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
            ], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            reply_markup=ReplyKeyboardMarkup([
                ['üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ'],
                ['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
                ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
            ], resize_keyboard=True)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –ø–æ—Å–ª–µ –º–µ–¥–∏–∞
async def handle_danger_continue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'danger_media':
        return
    
    user_states[user_id]['state'] = 'danger_confirm'
    await show_danger_confirmation(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –º–µ–¥–∏–∞
async def handle_danger_skip_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'danger_media':
        return
    
    user_states[user_id]['state'] = 'danger_confirm'
    await show_danger_confirmation(update, context)

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
async def show_danger_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_states[user_id]['data']
    
    text = "üìã **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç**\n\n"
    text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n\n"
    text += f"**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {data['location']}\n\n"
    
    if 'media_files' in data and data['media_files']:
        text += f"**–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã:** {len(data['media_files'])} —Ñ–∞–π–ª–æ–≤\n\n"
    
    text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É."
    
    keyboard = [
        ['‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'],
        ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'],
        ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
async def handle_danger_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'danger_confirm':
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    await save_incident(update, context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    await send_to_admin(update, context)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await show_danger_success(update, context)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in user_states:
        del user_states[user_id]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ –ª–æ–≥
async def save_incident(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_states[user_id]['data']
    
    incident = {
        'timestamp': datetime.now().isoformat(),
        'user_id': user_id,
        'username': update.effective_user.username,
        'description': data['description'],
        'location': data['location'],
        'media_files': data.get('media_files', [])
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
    try:
        incidents_file = 'logs/incidents.json'
        incidents = []
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
        try:
            with open(incidents_file, 'r', encoding='utf-8') as f:
                incidents = json.load(f)
        except FileNotFoundError:
            pass
        
        incidents.append(incident)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        with open(incidents_file, 'w', encoding='utf-8') as f:
            json.dump(incidents, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
async def send_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_states[user_id]['data']
    admin_chat_id = os.getenv('ADMIN_CHAT_ID')
    
    if not admin_chat_id or admin_chat_id == 'ADMIN_ID_PLACEHOLDER':
        logger.warning("ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_text = f"üö® **–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–ü–ê–°–ù–û–°–¢–ò**\n\n"
        admin_text += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{update.effective_user.username} (ID: {user_id})\n"
        admin_text += f"üïê **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        admin_text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n\n"
        admin_text += f"üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {data['location']}\n\n"
        
        if 'media_files' in data and data['media_files']:
            admin_text += f"üìé **–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã:** {len(data['media_files'])} —Ñ–∞–π–ª–æ–≤\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=admin_text,
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        if 'media_files' in data and data['media_files']:
            for media in data['media_files']:
                try:
                    if media['file_type'] == 'photo':
                        await context.bot.send_photo(
                            chat_id=admin_chat_id,
                            photo=media['file_id'],
                            caption=f"–§–æ—Ç–æ –æ—Ç @{update.effective_user.username}"
                        )
                    else:  # video
                        await context.bot.send_video(
                            chat_id=admin_chat_id,
                            video=media['file_id'],
                            caption=f"–í–∏–¥–µ–æ –æ—Ç @{update.effective_user.username}"
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")

# –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def show_danger_success(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–ª—É–∂–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
        ['üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –æ—Ö—Ä–∞–Ω—É —Ç—Ä—É–¥–∞'],
        ['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–ª—É–∂–±–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n"
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ª—É–∂–±–∞–º–∏:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
async def handle_security_call(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìû **–ó–≤–æ–Ω–æ–∫ –≤ —Å–ª—É–∂–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**\n\n"
        "–ó–≤–æ–Ω–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞)\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
    )

async def handle_safety_call(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìû **–ó–≤–æ–Ω–æ–∫ –≤ –æ—Ö—Ä–∞–Ω—É —Ç—Ä—É–¥–∞**\n\n"
        "–ó–≤–æ–Ω–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞)\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–¥–µ–ª–∞ –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞.",
        reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    if user_id in user_states and user_states[user_id]['state'] == 'danger_media':
        await handle_danger_media(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ"
async def handle_shelter_finder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'shelter_location',
        'data': {}
    }
    
    keyboard = [
        ['üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'],
        ['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üè† **–ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ**\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —É–±–µ–∂–∏—â –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É–±–µ–∂–∏—â
async def handle_shelter_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'shelter_location':
        return
    
    # –ö—ç—à–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if update.message.location:
        user_states[user_id]['data']['user_lat'] = update.message.location.latitude
        user_states[user_id]['data']['user_lon'] = update.message.location.longitude
        logger.info(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {update.message.location.latitude}, {update.message.location.longitude}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–±–µ–∂–∏—â–∞
    await show_shelters(update, context)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â
async def show_shelters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–±–µ–∂–∏—â
    data = load_placeholder_data()
    shelters = data.get('shelters', [])
    
    if not shelters:
        await update.message.reply_text(
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–±–µ–∂–∏—â–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —É–±–µ–∂–∏—â–∞
    for i, shelter in enumerate(shelters[:3], 1):
        text = f"üè† **{shelter['name']}**\n\n"
        text += f"{shelter['description']}\n\n"
        text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {shelter['lat']}, {shelter['lon']}"
        
        keyboard = [
            ['üîç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö'],
            ['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–±–µ–∂–∏—â–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        try:
            with open(shelter['photo_path'], 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in user_states:
        del user_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–±–µ–∂–∏—â
async def handle_shelter_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ":
        await update.message.reply_text(
            "üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–±–µ–∂–∏—â–∞**\n\n"
            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 55.7558, 37.6176 (–∑–∞–≥–ª—É—à–∫–∞)\n"
            "–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —É–±–µ–∂–∏—â–∞.",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
        )
    elif text == "üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö":
        await update.message.reply_text(
            "üåê **–°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã**\n\n"
            "https://yandex.ru/maps/?pt=37.6176,55.7558&z=16&l=map\n"
            "–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–±–µ–∂–∏—â–µ.",
            reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É–±–µ–∂–∏—â
    if user_id in user_states and user_states[user_id]['state'] == 'shelter_location':
        await handle_shelter_location(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
async def handle_safety_consultant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üßë‚Äçüè´ –§—É–Ω–∫—Ü–∏—è '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó' –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö.\n"
        "–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞.",
        reply_markup=get_main_menu()
    )

def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, handle_media))
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == '__main__':
    main()
