"""
–†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID
"""
import os
import sys
import logging
from datetime import datetime, time
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ —É—Ç–∏–ª–∏—Ç
from bot.interfaces import ILogger, IStateManager, IFileManager, IKeyboardFactory
from bot.utils.activity_logger import ActivityLogger
from bot.utils.state_manager import StateManager
from bot.utils.file_manager import FileManager
from bot.utils.keyboard_factory import KeyboardFactory

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from bot.services.danger_report_service import DangerReportService
from bot.services.shelter_service import ShelterService
from bot.services.consultant_service import ConsultantService
from bot.services.history_service import HistoryService

# –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from bot.handlers.danger_report_handler import DangerReportHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('logs/app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class BotApplication:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.logger = ActivityLogger()
        self.state_manager = StateManager()
        self.file_manager = FileManager()
        self.keyboard_factory = KeyboardFactory()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.danger_service = DangerReportService(self.file_manager, self.logger)
        self.shelter_service = ShelterService(self.file_manager, self.logger)
        self.consultant_service = ConsultantService(self.file_manager, self.logger)
        self.history_service = HistoryService(self.file_manager, self.logger)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.danger_handler = DangerReportHandler(
            self.logger, self.state_manager, self.keyboard_factory, self.danger_service
        )
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.logger.log_activity(user.id, user.username, "start_command")
        
        welcome_text = (
            "üõ°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        keyboard = [
            ['üö®‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
            ['üè†üõ°Ô∏è –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ'],
            ['üßë‚Äçüè´üìö –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó']
        ]
        
        from telegram import ReplyKeyboardMarkup
        reply_markup = ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True, 
            one_time_keyboard=False,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é"
        )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é: {reply_markup}")
        
        try:
            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup
            )
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await update.message.reply_text(welcome_text)
    
    async def my_history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_history"""
        user = update.effective_user
        user_id = user.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.logger.log_activity(user_id, user.username, "history_requested")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            activities = self.history_service.get_user_activities(user_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history_text = self.history_service.format_activity_history(activities)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(history_text) > 4000:
                parts = history_text.split('\n\n')
                current_part = ""
                
                for part in parts:
                    if len(current_part + part) > 4000:
                        await update.message.reply_text(
                            current_part,
                            reply_markup=self.keyboard_factory.create_main_menu(),
                            parse_mode='Markdown'
                        )
                        current_part = part + "\n\n"
                    else:
                        current_part += part + "\n\n"
                
                if current_part.strip():
                    await update.message.reply_text(
                        current_part,
                        reply_markup=self.keyboard_factory.create_main_menu(),
                        parse_mode='Markdown'
                    )
            else:
                await update.message.reply_text(
                    history_text,
                    reply_markup=self.keyboard_factory.create_main_menu(),
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.keyboard_factory.create_main_menu()
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text
        user_id = user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
        if not self.state_manager.check_spam_protection(user_id):
            await update.message.reply_text(
                "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.keyboard_factory.create_main_menu()
            )
            return
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.logger.log_activity(user_id, user.username, "text_message", text[:50])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if text in ["‚¨ÖÔ∏èüîô –ù–∞–∑–∞–¥", "üè†‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
            self.state_manager.clear_user_state(user_id)
            await update.message.reply_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=self.keyboard_factory.create_main_menu()
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if text in ["üö®‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"]:
            await self.danger_handler.handle(update, context)
        elif text in ["üè†üõ°Ô∏è –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ", "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ"]:
            await self._handle_shelter_finder(update, context)
        elif text in ["üßë‚Äçüè´üìö –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó", "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó"]:
            await self._handle_safety_consultant(update, context)
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
                reply_markup=self.keyboard_factory.create_main_menu()
            )
    
    async def _handle_shelter_finder(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â (–∑–∞–≥–ª—É—à–∫–∞)"""
        user_id = update.effective_user.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.logger.log_activity(user_id, update.effective_user.username, "shelter_finder_started")
        
        await update.message.reply_text(
            "üè† **–ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ**\n\n"
            "–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n"
            "–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞.",
            reply_markup=self.keyboard_factory.create_main_menu(),
            parse_mode='Markdown'
        )
    
    async def _handle_safety_consultant(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        user_id = update.effective_user.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.logger.log_activity(user_id, update.effective_user.username, "safety_consultant_started")
        
        await update.message.reply_text(
            "üßë‚Äçüè´ **–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó**\n\n"
            "–§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n"
            "–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞.",
            reply_markup=self.keyboard_factory.create_main_menu(),
            parse_mode='Markdown'
        )
    
    async def handle_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        user_state = self.state_manager.get_user_state(user_id)
        if user_state and user_state['state'] == 'danger_media':
            await self._handle_danger_media(update, context)
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=self.keyboard_factory.create_main_menu()
            )
    
    async def _handle_danger_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        user_state = self.state_manager.get_user_state(user_id)
        
        if not user_state:
            return
        
        data = user_state['data']
        
        if update.message.photo:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
            file_id = update.message.photo[-1].file_id
            file_size = update.message.photo[-1].file_size
            file_type = 'photo'
        elif update.message.video:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            file_id = update.message.video.file_id
            file_size = update.message.video.file_size
            file_type = 'video'
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                reply_markup=self.keyboard_factory.create_media_buttons()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if not self.danger_service.validate_media_file(file_size, file_type):
            max_size = "20 –ú–ë" if file_type == 'photo' else "300 –ú–ë"
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {file_type}: {max_size}",
                reply_markup=self.keyboard_factory.create_back_button()
            )
            return
        
        if 'media_files' not in data:
            data['media_files'] = []
        
        data['media_files'].append({
            'file_id': file_id,
            'file_type': file_type,
            'file_size': file_size
        })
        
        await update.message.reply_text(
            f"‚úÖ {file_type == 'photo' and '–§–æ—Ç–æ' or '–í–∏–¥–µ–æ'} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=self.keyboard_factory.create_media_continue_buttons()
        )
    
    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        user_state = self.state_manager.get_user_state(user_id)
        if user_state and user_state['state'] == 'shelter_location':
            await self._handle_shelter_location(update, context)
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=self.keyboard_factory.create_main_menu()
            )
    
    async def _handle_shelter_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É–±–µ–∂–∏—â (–∑–∞–≥–ª—É—à–∫–∞)"""
        user_id = update.effective_user.id
        
        if update.message.location:
            logger.info(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {update.message.location.latitude}, {update.message.location.longitude}")
        
        await update.message.reply_text(
            "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.",
            reply_markup=self.keyboard_factory.create_main_menu()
        )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.keyboard_factory.create_main_menu()
                )
            except:
                pass
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –ø–æ –ú–°–ö (07:00‚Äì20:00)
        disable_hours = os.getenv("DISABLE_WORKING_HOURS", "0") == "1"
        if not disable_hours:
            try:
                now_utc = datetime.utcnow().replace(tzinfo=ZoneInfo("UTC"))
                now_msk = now_utc.astimezone(ZoneInfo("Europe/Moscow"))
                start_msk = time(7, 0)
                end_msk = time(20, 0)
                within_hours = start_msk <= now_msk.time() <= end_msk
                logger.info(
                    f"üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: —Å–µ–π—á–∞—Å {now_msk.strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö; "
                    f"–¥–æ–ø—É—Å—Ç–∏–º–æ {start_msk.strftime('%H:%M')}-{end_msk.strftime('%H:%M')}"
                )
                if not within_hours:
                    logger.warning("‚è∞ –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è! –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω–µ 07:00‚Äì20:00 –ú–°–ö. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DISABLE_WORKING_HOURS=1 –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("my_history", self.my_history_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, self.handle_media))
        application.add_handler(MessageHandler(filters.LOCATION, self.handle_location))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
        application.run_polling()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = BotApplication()
    app.run()


if __name__ == '__main__':
    main()
