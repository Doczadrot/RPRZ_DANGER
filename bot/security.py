"""
–ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Telegram-–±–æ—Ç–∞ –†–ü–†–ó
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞, —Ñ–ª—É–¥–∞ –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import os
import re
import time
from datetime import datetime
from collections import defaultdict
from typing import Optional, Dict, Tuple
from loguru import logger


class SecurityManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        # Rate limiting: {user_id: [timestamp1, timestamp2, ...]}
        self.user_requests = defaultdict(list)

        # –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å: {user_id: {action: last_timestamp}}
        self.user_last_action = defaultdict(dict)

        # Whitelist/Blacklist
        self.blacklist = set()
        self.whitelist = set()

        # –°—á–µ—Ç—á–∏–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_id: count}
        self.suspicious_activity = defaultdict(int)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.MAX_REQUESTS_PER_MINUTE = int(os.getenv("SPAM_LIMIT", "10"))
        self.FLOOD_INTERVAL_SECONDS = int(os.getenv("FLOOD_INTERVAL", "2"))
        self.MAX_TEXT_LENGTH = int(os.getenv("MAX_TEXT_LENGTH", "4096"))
        self.MAX_SUSPICIOUS_SCORE = 10

        # –ê–¥–º–∏–Ω —á–∞—Ç ID
        admin_chat_id_str = os.getenv("ADMIN_CHAT_ID")
        self.ADMIN_CHAT_ID = int(admin_chat_id_str) if admin_chat_id_str else None

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ whitelist
        if self.ADMIN_CHAT_ID:
            self.whitelist.add(self.ADMIN_CHAT_ID)

        logger.info("‚úÖ SecurityManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def check_rate_limit(self, user_id: int) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            (is_allowed, error_message)
        """
        # Whitelist –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if user_id in self.whitelist:
            return True, None

        # Blacklist –±–ª–æ–∫–∏—Ä—É–µ–º
        if user_id in self.blacklist:
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            return False, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"

        current_time = time.time()

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        self.user_requests[user_id] = [ts for ts in self.user_requests[user_id] if current_time - ts < 60]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.user_requests[user_id]) >= self.MAX_REQUESTS_PER_MINUTE:
            logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            self._add_suspicious_activity(user_id, "rate_limit_exceeded")
            return False, "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É."

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.user_requests[user_id].append(current_time)
        return True, None

    def check_flood(self, user_id: int, action: str) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–ª—É–¥ (—á–∞—Å—Ç—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–µ–π—Å—Ç–≤–∏—è)

        Returns:
            (is_allowed, error_message)
        """
        # Whitelist –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if user_id in self.whitelist:
            return True, None

        current_time = time.time()
        last_action_time = self.user_last_action[user_id].get(action, 0)

        if current_time - last_action_time < self.FLOOD_INTERVAL_SECONDS:
            logger.warning(f"‚ö†Ô∏è –§–ª—É–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {action}")
            self._add_suspicious_activity(user_id, "flood")
            return False, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {self.FLOOD_INTERVAL_SECONDS} —Å–µ–∫—É–Ω–¥"

        self.user_last_action[user_id][action] = current_time
        return True, None

    def validate_text(self, text: str, user_id: int) -> Tuple[bool, Optional[str]]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

        Returns:
            (is_valid, error_message)
        """
        if not text:
            return True, None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(text) > self.MAX_TEXT_LENGTH:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –æ—Ç {user_id}: {len(text)}")
            return (False, f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å {self.MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
        spam_patterns = [
            r"https?://[^\s]+",  # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å–º—è–≥—á–∏—Ç—å)
            r"@\w+bot",  # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
            r"[\u0400-\u04FF]{50,}",  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ
        ]

        suspicious_count = 0
        for pattern in spam_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                suspicious_count += 1

        if suspicious_count >= 2:
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç {user_id}")
            self._add_suspicious_activity(user_id, "suspicious_text")
            return False, "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"

        return True, None

    def validate_file(
        self, file_size: int, file_type: str, user_id: int, max_size_mb: int = 20
    ) -> Tuple[bool, Optional[str]]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

        Returns:
            (is_valid, error_message)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        max_size_bytes = max_size_mb * 1024 * 1024
        if file_size > max_size_bytes:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –æ—Ç {user_id}: {file_size}")
            return False, f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å {max_size_mb} –ú–ë)"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ (whitelist)
        allowed_types = [
            "image/jpeg",
            "image/png",
            "image/gif",
            "image/webp",
            "video/mp4",
            "video/mpeg",
            "video/quicktime",
            "audio/mpeg",
            "audio/ogg",
            "application/pdf",
        ]

        if file_type and not any(file_type.startswith(allowed) for allowed in allowed_types):
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –æ—Ç {user_id}: {file_type}")
            self._add_suspicious_activity(user_id, "invalid_file_type")
            return False, "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"

        return True, None

    def _add_suspicious_activity(self, user_id: int, reason: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.suspicious_activity[user_id] += 1

        logger.warning(
            f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: user={user_id}, "
            f"reason={reason}, score={self.suspicious_activity[user_id]}"
        )

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
        if self.suspicious_activity[user_id] >= self.MAX_SUSPICIOUS_SCORE:
            self.add_to_blacklist(user_id)
            logger.critical(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            if self.ADMIN_CHAT_ID:
                self._notify_admin_about_block(user_id, reason)

    def _notify_admin_about_block(self, user_id: int, reason: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∞ (–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —á–µ—Ä–µ–∑ main.py)
        log_file = "logs/admin_critical.log"
        try:
            os.makedirs("logs", exist_ok=True)
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(f"{datetime.now().isoformat()} | " f"AUTO_BLOCK | user_id={user_id} | reason={reason}\n")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ admin_critical.log: {e}")

    def add_to_blacklist(self, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        self.blacklist.add(user_id)
        logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ blacklist")

    def remove_from_blacklist(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        self.blacklist.discard(user_id)
        self.suspicious_activity[user_id] = 0
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ blacklist")

    def add_to_whitelist(self, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
        self.whitelist.add(user_id)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist")

    def get_user_security_info(self, user_id: int) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {
            "user_id": user_id,
            "is_whitelisted": user_id in self.whitelist,
            "is_blacklisted": user_id in self.blacklist,
            "suspicious_score": self.suspicious_activity[user_id],
            "requests_last_minute": len(self.user_requests[user_id]),
            "last_actions": dict(self.user_last_action[user_id]),
        }

    def reset_user_limits(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_requests[user_id].clear()
        self.user_last_action[user_id].clear()
        logger.info(f"üîÑ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    def clean_old_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
        current_time = time.time()

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for user_id in list(self.user_requests.keys()):
            self.user_requests[user_id] = [ts for ts in self.user_requests[user_id] if current_time - ts < 60]
            if not self.user_requests[user_id]:
                del self.user_requests[user_id]

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        for user_id in list(self.user_last_action.keys()):
            old_actions = {
                action: ts for action, ts in self.user_last_action[user_id].items() if current_time - ts < 3600
            }
            if old_actions:
                self.user_last_action[user_id] = old_actions
            else:
                del self.user_last_action[user_id]

        logger.debug("üßπ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
security_manager = SecurityManager()


def check_user_security(user_id: int, action: str = "general") -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è

    Returns:
        (is_allowed, error_message)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    is_allowed, error = security_manager.check_rate_limit(user_id)
    if not is_allowed:
        return False, error

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª—É–¥
    is_allowed, error = security_manager.check_flood(user_id, action)
    if not is_allowed:
        return False, error

    return True, None


def validate_user_text(text: str, user_id: int) -> Tuple[bool, Optional[str]]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return security_manager.validate_text(text, user_id)


def validate_user_file(
    file_size: int, file_type: str, user_id: int, max_size_mb: int = 20
) -> Tuple[bool, Optional[str]]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return security_manager.validate_file(file_size, file_type, user_id, max_size_mb)


def security_check_decorator(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        @security_check_decorator
        def my_handler(message):
            ...
    """

    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        is_allowed, error_msg = check_user_security(user_id, action=func.__name__)
        if not is_allowed:
            # –ï—Å–ª–∏ –µ—Å—Ç—å bot –≤ kwargs, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if "bot" in kwargs:
                kwargs["bot"].send_message(chat_id, error_msg)
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {error_msg}")
            return

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –µ–≥–æ
        if hasattr(message, "text") and message.text:
            is_valid, error_msg = validate_user_text(message.text, user_id)
            if not is_valid:
                if "bot" in kwargs:
                    kwargs["bot"].send_message(chat_id, error_msg)
                logger.warning(f"üö´ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç {user_id}: {error_msg}")
                return

        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return func(message, *args, **kwargs)

    return wrapper
