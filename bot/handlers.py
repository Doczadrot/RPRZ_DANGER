"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è MVP Telegram-–±–æ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö 4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import csv
import json
import os
import sys
from datetime import datetime

from loguru import logger
from telebot import types

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    from bot.notifications import send_incident_notification

    NOTIFICATIONS_AVAILABLE = True
    logger.info("‚úÖ –ú–æ–¥—É–ª—å notifications —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    NOTIFICATIONS_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å notifications –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    logger.warning(f"‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")
    logger.warning(f"‚ö†Ô∏è –ü—É—Ç—å: {sys.path}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ bot (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ main.py)
bot_instance = None


def set_bot_instance(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot_instance
    bot_instance = bot


def log_activity(chat_id: int, username: str, action: str, payload: str = ""):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV"""
    try:
        log_file = "logs/activity.csv"
        file_exists = os.path.exists(log_file)

        with open(log_file, "a", newline="", encoding="utf-8-sig") as f:
            writer = csv.writer(f)
            if not file_exists:
                writer.writerow(
                    ["timestamp", "user_id", "username", "action", "payload"]
                )

            writer.writerow(
                [datetime.now().isoformat(), chat_id, username, action, payload[:100]]
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ user_actions.log
        logger.bind(user_id=chat_id).info(
            f"Activity: {action} | {username} | {payload[:50]}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")


def log_incident(chat_id: int, incident_data: dict):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ JSON —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        log_file = "logs/incidents.json"
        incidents = []

        if os.path.exists(log_file):
            try:
                with open(log_file, "r", encoding="utf-8-sig") as f:
                    incidents = json.load(f)
            except json.JSONDecodeError as e:
                logger.error(f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª {log_file}: {e}")
                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                import time

                backup_file = f"{log_file}.backup_{int(time.time())}"
                os.rename(log_file, backup_file)
                logger.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_file}")
                incidents = []

        incidents.append(
            {
                "timestamp": datetime.now().isoformat(),
                "user_id": chat_id,
                "incident": incident_data,
            }
        )

        with open(log_file, "w", encoding="utf-8-sig") as f:
            json.dump(incidents, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")


def log_suggestion(chat_id: int, suggestion_data: dict):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤ JSON"""
    try:
        log_file = "logs/suggestions.json"
        suggestions = []

        if os.path.exists(log_file):
            with open(log_file, "r", encoding="utf-8-sig") as f:
                suggestions = json.load(f)

        suggestions.append(
            {
                "timestamp": datetime.now().isoformat(),
                "user_id": chat_id,
                "suggestion": suggestion_data,
            }
        )

        with open(log_file, "w", encoding="utf-8-sig") as f:
            json.dump(suggestions, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")


def get_back_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup


def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 3 –∫–Ω–æ–ø–∫–∞–º–∏ (–∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"))
    markup.add(types.KeyboardButton("üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ"))
    markup.add(types.KeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"))
    return markup


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–°–û–û–ë–©–ò–¢–ï –û–ë –û–ü–ê–°–ù–û–°–¢–ò" ===


def handle_danger_report_text(message, user_data, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑ main.py
    try:
        from .main import sanitize_user_input, validate_user_input

        sanitized_text = sanitize_user_input(text)
        is_valid, validation_error = validate_user_input(
            sanitized_text, min_length=1, max_length=1000
        )

        if not is_valid:
            return "danger_report", f"‚ùå {validation_error}"
    except ImportError:
        # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        sanitized_text = text

    if sanitized_text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return "main_menu", None

    step = user_data.get("step", "description")

    if step == "description":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
        if sanitized_text in [
            "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
            "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º",
            "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        ]:
            return (
                "danger_report",
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏",
            )

        if len(sanitized_text) > 500:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤."

        if len(sanitized_text.strip()) < 10:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."

        user_data["description"] = sanitized_text.strip()
        user_data["step"] = "location"

        log_activity(chat_id, username, "danger_description", text[:50])

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        )
        markup.add(types.KeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º"))
        markup.add(types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

        return "danger_report", {
            "text": (
                "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:\n\n"
                "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
            ),
            "reply_markup": markup,
        }

    elif step == "location":
        if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_data["step"] = "media"
            user_data["location_text"] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            return "danger_report", {
                "text": "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':",
                "reply_markup": get_media_keyboard(),
            }
        elif text == "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º":
            user_data["step"] = "location_text"
            return "danger_report", {
                "text": "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):",
                "reply_markup": get_back_keyboard(),
            }
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            user_data["step"] = "description"
            return "danger_report", {
                "text": "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\nüìù –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
                "reply_markup": get_back_keyboard(),
            }
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É–∫–∞–∑–∞–Ω–∏–µ–º
            # –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º
            if len(text) > 200:
                return (
                    "danger_report",
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.",
                )

            if len(text.strip()) < 3:
                return (
                    "danger_report",
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.",
                )

            user_data["location_text"] = text.strip()
            user_data["step"] = "media"

            log_activity(chat_id, username, "danger_location_text", text[:50])

            return "danger_report", {
                "text": (
                    f"‚úÖ –ú–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–æ: {text.strip()}\n\n"
                    f"üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':"
                ),
                "reply_markup": get_media_keyboard(),
            }

    elif step == "location_text":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
        if text in [
            "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
            "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º",
            "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        ]:
            return (
                "danger_report",
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏",
            )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–∞
            user_data["step"] = "location"
            return "danger_report", {
                "text": "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:",
                "reply_markup": get_location_keyboard(),
            }

        if len(text) > 200:
            return (
                "danger_report",
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.",
            )

        if len(text.strip()) < 3:
            return (
                "danger_report",
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.",
            )

        user_data["location_text"] = text.strip()
        user_data["step"] = "media"

        log_activity(chat_id, username, "danger_location_text", text[:50])

        return "danger_report", {
            "text": (
                f"‚úÖ –ú–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–æ: {text.strip()}\n\n"
                f"üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':"
            ),
            "reply_markup": get_media_keyboard(),
        }

    elif step == "media":
        if text == "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            return finish_danger_report(message, user_data, placeholders)
        elif text == "üìç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ":
            user_data["step"] = "location"
            return "danger_report", {
                "text": "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:",
                "reply_markup": get_location_keyboard(),
            }
        elif text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
            user_data["step"] = "description"
            return "danger_report", {
                "text": "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\nüìù –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
                "reply_markup": get_back_keyboard(),
            }
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            user_data.clear()
            return "main_menu", {
                "text": "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                "reply_markup": get_main_menu_keyboard(),
            }
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–∞
            user_data["step"] = "location"
            return "danger_report", {
                "text": "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:",
                "reply_markup": get_location_keyboard(),
            }
        else:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π
            return (
                "danger_report",
                "‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é",
            )


def handle_danger_report_location(message, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"

    user_data["location"] = {
        "latitude": message.location.latitude,
        "longitude": message.location.longitude,
    }
    user_data["step"] = "media"

    log_activity(
        chat_id,
        username,
        "danger_location",
        f"lat: {message.location.latitude}, lon: {message.location.longitude}",
    )

    return {
        "text": "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!\nüì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':",
        "reply_markup": get_media_keyboard(),
    }


def handle_danger_report_media(message, user_data, max_file_size_mb, max_video_size_mb):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    file_size = 0
    if message.photo:
        file_size = message.photo[-1].file_size
        max_size = max_file_size_mb * 1024 * 1024
    elif message.video:
        file_size = message.video.file_size
        max_size = max_video_size_mb * 1024 * 1024
    elif message.document:
        file_size = message.document.file_size
        max_size = max_file_size_mb * 1024 * 1024

    if file_size > max_size:
        return f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º: {max_file_size_mb} –ú–ë –¥–ª—è —Ñ–æ—Ç–æ, {max_video_size_mb} –ú–ë –¥–ª—è –≤–∏–¥–µ–æ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    if "media" not in user_data:
        user_data["media"] = []

    if len(user_data["media"]) >= 3:
        return "‚ùå –ú–∞–∫—Å–∏–º—É–º 3 –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞!"

    media_info = {
        "type": message.content_type,
        "file_id": (
            message.photo[-1].file_id
            if message.photo
            else (message.video.file_id if message.video else message.document.file_id)
        ),
        "file_size": file_size,
    }
    user_data["media"].append(media_info)

    log_activity(
        chat_id,
        username,
        "danger_media",
        f"type: {message.content_type}, size: {file_size}",
    )

    remaining = 3 - len(user_data["media"])
    return f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(user_data['media'])}/3). –û—Å—Ç–∞–ª–æ—Å—å: {remaining}"


def finish_danger_report(message, user_data, placeholders):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"

    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    incident_data = {
        "description": user_data.get("description", ""),
        "location": user_data.get("location"),
        "location_text": user_data.get("location_text"),
        "media_count": len(user_data.get("media", [])),
        "media": user_data.get("media", []),  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        "user_id": chat_id,
        "username": username,
    }

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    log_incident(chat_id, incident_data)
    log_activity(chat_id, username, "danger_report_completed")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∞–¥–º–∏–Ω—É
        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        if admin_chat_id:
            from datetime import datetime

            current_time = datetime.now()

            admin_text = "üö® –ù–û–í–´–ô –ò–ù–¶–ò–î–ï–ù–¢\n\n"
            admin_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {chat_id})\n"
            admin_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {incident_data['description']}\n"
            if incident_data["location"]:
                lat = incident_data["location"]["latitude"]
                lon = incident_data["location"]["longitude"]
                admin_text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n"
            elif incident_data["location_text"]:
                admin_text += f"üìç –ú–µ—Å—Ç–æ: {incident_data['location_text']}\n"
            else:
                admin_text += "üìç –ú–µ—Å—Ç–æ: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
            admin_text += f"üì∑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {incident_data['media_count']}\n"
            admin_text += f"üïê –í—Ä–µ–º—è: {current_time.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö"

            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –≤ Telegram: {admin_text}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç bot
            if bot_instance:
                try:
                    bot_instance.send_message(admin_chat_id, admin_text)
                    logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∞–¥–º–∏–Ω—É
                    if incident_data["media"]:
                        logger.info(
                            f"üì∑ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(incident_data['media'])} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω—É"
                        )
                        for i, media_item in enumerate(incident_data["media"], 1):
                            try:
                                if media_item["type"] == "photo":
                                    bot_instance.send_photo(
                                        admin_chat_id,
                                        media_item["file_id"],
                                        caption=f"üì∑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª {i}/{len(incident_data['media'])}",
                                    )
                                elif media_item["type"] == "video":
                                    bot_instance.send_video(
                                        admin_chat_id,
                                        media_item["file_id"],
                                        caption=f"üé• –ú–µ–¥–∏–∞—Ñ–∞–π–ª {i}/{len(incident_data['media'])}",
                                    )
                                elif media_item["type"] == "document":
                                    bot_instance.send_document(
                                        admin_chat_id,
                                        media_item["file_id"],
                                        caption=f"üìÑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª {i}/{len(incident_data['media'])}",
                                    )
                                logger.info(f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª {i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
                            except Exception as media_error:
                                logger.error(
                                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {i}: {media_error}"
                                )

                except Exception as bot_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É –≤ Telegram: {bot_error}")
            else:
                logger.warning(
                    "‚ö†Ô∏è –û–±—ä–µ–∫—Ç bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"
                )
        else:
            logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        logger.info("üîç –ü–µ—Ä–µ—Ö–æ–¥ –∫ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º...")

        # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è email
        downloaded_media = []
        if incident_data.get("media") and bot_instance:
            logger.info(
                f"üì∑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(incident_data['media'])} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è email..."
            )
            import mimetypes

            for media_item in incident_data["media"]:
                try:
                    file_info = bot_instance.get_file(media_item["file_id"])
                    downloaded_file = bot_instance.download_file(file_info.file_path)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏ Telegram
                    file_extension = os.path.splitext(file_info.file_path)[1] or ".jpg"

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø
                    mime_type = mimetypes.guess_type(file_info.file_path)[0]
                    if not mime_type:
                        # Fallback –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
                        if media_item["type"] == "photo":
                            mime_type = "image/jpeg"
                        elif media_item["type"] == "video":
                            mime_type = "video/mp4"
                        elif media_item["type"] == "document":
                            mime_type = "application/octet-stream"
                        else:
                            mime_type = "application/octet-stream"

                    downloaded_media.append(
                        {
                            "data": downloaded_file,
                            "type": media_item["type"],
                            "filename": f"{media_item['type']}_{media_item['file_id'][:8]}{file_extension}",
                            "mime_type": mime_type,
                        }
                    )
                    logger.info(
                        f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª {media_item['type']} —Å–∫–∞—á–∞–Ω –¥–ª—è email (MIME: {mime_type})"
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        logger.info(f"üîç NOTIFICATIONS_AVAILABLE: {NOTIFICATIONS_AVAILABLE}")
        if NOTIFICATIONS_AVAILABLE:
            try:
                logger.info("üîç –í—ã–∑–æ–≤ send_incident_notification...")
                notification_success, notification_message = send_incident_notification(
                    incident_data, downloaded_media
                )
                if notification_success:
                    logger.info(
                        f"‚úÖ –Ø–Ω–¥–µ–∫—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {notification_message}"
                    )
                else:
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_message}"
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ send_incident_notification: {e}")
        else:
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ø–Ω–¥–µ–∫—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–≤–æ–Ω–∫–æ–≤ (–∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–ª—É–∂–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"))
    markup.add(types.KeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –æ—Ö—Ä–∞–Ω—É —Ç—Ä—É–¥–∞"))
    markup.add(types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    response_text = (
        "‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ: {}\n"
        "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {}\n"
        "üì∑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {}\n"
        "üïê –í—Ä–µ–º—è: {}\n\n"
        "üö® –°—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "üìû –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {}\n"
        "üìû –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞: {}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    ).format(
        incident_data["description"],
        (
            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {:.6f}, {:.6f}".format(
                incident_data["location"]["latitude"],
                incident_data["location"]["longitude"],
            )
            if incident_data["location"]
            else (
                incident_data["location_text"]
                if incident_data["location_text"]
                else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            )
        ),
        incident_data["media_count"],
        datetime.now().strftime("%d.%m.%Y %H:%M:%S") + " –ú–°–ö",
        placeholders.get("contacts", {}).get("security", "–ù–µ —É–∫–∞–∑–∞–Ω"),
        placeholders.get("contacts", {}).get("safety", "–ù–µ —É–∫–∞–∑–∞–Ω"),
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot_instance.send_message(chat_id, response_text, reply_markup=markup)
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    return "main_menu", None


def get_location_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))
    markup.add(types.KeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º"))
    markup.add(types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup


def get_media_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    markup.add(types.KeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ"))
    markup.add(types.KeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"))
    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–ë–õ–ò–ñ–ê–ô–®–ï–ï –£–ë–ï–ñ–ò–©–ï" ===


def handle_shelter_finder_text(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ —É–±–µ–∂–∏—â"""
    text = message.text

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return "main_menu", None
    elif text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–±–µ–∂–∏—â
        shelters = placeholders.get("shelters", [])
        return "shelter_finder", {
            "shelters": shelters,
            "action": "show_shelters_with_photos",
        }
    else:
        return "shelter_finder", "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ" ===


def handle_improvement_suggestion_text(message, placeholders, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return "main_menu", None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
    if text in [
        "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ",
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é",
    ]:
        return (
            "improvement_suggestion",
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏",
        )

    if len(text) > 1000:
        return (
            "improvement_suggestion",
            "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.",
        )

    if len(text.strip()) < 10:
        return (
            "improvement_suggestion",
            "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.",
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    suggestion_data = {
        "text": text.strip(),
        "user_id": chat_id,
        "username": username,
        "timestamp": datetime.now().isoformat(),
        "votes": 0,
        "voters": [],
        "status": "pending",
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    save_enhanced_suggestion(chat_id, suggestion_data)
    log_suggestion(chat_id, suggestion_data)
    log_activity(chat_id, username, "suggestion_submitted", text[:50])

    response_text = (
        "‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!\n\n"
        "üìù –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n{}\n\n"
        "üó≥Ô∏è –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–≤–æ–¥–∞ –†–ü–†–ó.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
    ).format(text)

    return "main_menu", {
        "text": response_text,
        "reply_markup": get_main_menu_keyboard(),
    }


def save_enhanced_suggestion(chat_id, suggestion_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        suggestions_file = "logs/enhanced_suggestions.json"
        suggestions = []

        if os.path.exists(suggestions_file):
            with open(suggestions_file, "r", encoding="utf-8-sig") as f:
                suggestions = json.load(f)

        # –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestion_data["id"] = len(suggestions) + 1
        suggestions.append(suggestion_data)

        with open(suggestions_file, "w", encoding="utf-8") as f:
            json.dump(suggestions, f, ensure_ascii=False, indent=2)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")


def handle_improvement_suggestion_choice(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    text = message.text

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return "main_menu", None

    categories = {
        "1Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "performance",
        "2Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": "notifications",
        "3Ô∏è‚É£ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": "functionality",
        "4Ô∏è‚É£ –°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞": "free_form",
    }

    if text in categories:
        category = categories[text]
        return "improvement_suggestion", {
            "text": f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category}\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
            "category": category,
        }

    return "improvement_suggestion", "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é"


def categorize_suggestion(text: str) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    text_lower = text.lower()

    if any(word in text_lower for word in ["–±—ã—Å—Ç—Ä", "–º–µ–¥–ª–µ–Ω", "–ø—Ä–æ–∏–∑–≤–æ–¥", "—Å–∫–æ—Ä–æ—Å—Ç"]):
        return "performance"
    elif any(word in text_lower for word in ["—É–≤–µ–¥–æ–º–ª", "–æ–ø–æ–≤–µ—â", "–Ω–æ—Ç–∏—Ñ"]):
        return "notifications"
    elif any(
        word in text_lower for word in ["—Ñ—É–Ω–∫—Ü–∏", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç", "—Ñ–∏—á–∞", "–¥–æ–±–∞–≤–∏—Ç—å"]
    ):
        return "functionality"
    else:
        return "general"


def handle_suggestion_menu(message, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    text = message.text

    if text == "üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è":
        return show_popular_suggestions(message)
    elif text == "üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è":
        return show_user_suggestions(message)
    elif text == "üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ":
        return "improvement_suggestion", "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:"
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return "main_menu", None

    return "suggestion_menu", "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é"


def show_popular_suggestions(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    try:
        suggestions_file = "logs/enhanced_suggestions.json"
        if not os.path.exists(suggestions_file):
            return {
                "text": "üìã –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                "reply_markup": get_back_keyboard(),
            }

        with open(suggestions_file, "r", encoding="utf-8") as f:
            suggestions = json.load(f)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ–ª–æ—Å–∞–º
        popular = sorted(suggestions, key=lambda x: x.get("votes", 0), reverse=True)[
            :10
        ]

        if not popular:
            return {
                "text": "üìã –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                "reply_markup": get_back_keyboard(),
            }

        text = "üèÜ –¢–û–ü-10 –ü–û–ü–£–õ–Ø–†–ù–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô:\n\n"
        for i, sugg in enumerate(popular, 1):
            text += f"{i}. üëç {sugg.get('votes', 0)} | {sugg['text'][:50]}...\n\n"

        return {"text": text, "reply_markup": get_back_keyboard()}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        return {
            "text": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            "reply_markup": get_back_keyboard(),
        }


def show_user_suggestions(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id

    try:
        suggestions_file = "logs/enhanced_suggestions.json"
        if not os.path.exists(suggestions_file):
            return {
                "text": "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                "reply_markup": get_back_keyboard(),
            }

        with open(suggestions_file, "r", encoding="utf-8") as f:
            suggestions = json.load(f)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_suggestions = [s for s in suggestions if s.get("user_id") == chat_id]

        if not user_suggestions:
            return {
                "text": "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                "reply_markup": get_back_keyboard(),
            }

        text = "üìã –í–ê–®–ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:\n\n"
        for i, sugg in enumerate(user_suggestions, 1):
            text += f"{i}. üëç {sugg.get('votes', 0)} | {sugg['text'][:50]}...\n\n"

        return {"text": text, "reply_markup": get_back_keyboard()}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return {
            "text": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            "reply_markup": get_back_keyboard(),
        }


def test_email_notifications(message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        from datetime import datetime

        from bot.notifications import send_incident_notification

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        test_incident = {
            "type": "–¢–ï–°–¢ EMAIL",
            "user_name": message.from_user.first_name or "Test User",
            "user_id": message.from_user.id,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "description": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –≤ Railway",
            "severity": "–ù–ò–ó–ö–ê–Ø",
        }

        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success, result_message = send_incident_notification(test_incident)

        if success:
            bot_instance.send_message(
                message.chat.id,
                f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
                f"üìß –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_message}\n"
                f"üì¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É: {os.getenv('ADMIN_EMAIL', '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')}",
                reply_markup=get_back_keyboard(),
            )
            logger.info(
                f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result_message}"
            )
        else:
            bot_instance.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n\n"
                f"üîç –ü—Ä–æ–±–ª–µ–º–∞: {result_message}\n\n"
                f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –≤ Railway Variables",
                reply_markup=get_back_keyboard(),
            )
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {result_message}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email: {e}")
        bot_instance.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}",
            reply_markup=get_back_keyboard(),
        )
