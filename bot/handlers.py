"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è MVP Telegram-–±–æ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö 4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import json
import csv
from datetime import datetime
from typing import Dict, List, Optional

import telebot
from telebot import types
from loguru import logger

def log_activity(chat_id: int, username: str, action: str, payload: str = ""):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV"""
    try:
        log_file = 'logs/activity.csv'
        file_exists = os.path.exists(log_file)
        
        with open(log_file, 'a', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f)
            if not file_exists:
                writer.writerow(['timestamp', 'user_id', 'username', 'action', 'payload'])
            
            writer.writerow([
                datetime.now().isoformat(),
                chat_id,
                username,
                action,
                payload[:100]
            ])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ user_actions.log
        logger.bind(user_id=chat_id).info(f"Activity: {action} | {username} | {payload[:50]}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

def log_incident(chat_id: int, incident_data: dict):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ JSON"""
    try:
        log_file = 'logs/incidents.json'
        incidents = []
        
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                incidents = json.load(f)
        
        incidents.append({
            'timestamp': datetime.now().isoformat(),
            'user_id': chat_id,
            'incident': incident_data
        })
        
        with open(log_file, 'w', encoding='utf-8-sig') as f:
            json.dump(incidents, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")

def log_suggestion(chat_id: int, suggestion_data: dict):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤ JSON"""
    try:
        log_file = 'logs/suggestions.json'
        suggestions = []
        
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                suggestions = json.load(f)
        
        suggestions.append({
            'timestamp': datetime.now().isoformat(),
            'user_id': chat_id,
            'suggestion': suggestion_data
        })
        
        with open(log_file, 'w', encoding='utf-8-sig') as f:
            json.dump(suggestions, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")

def get_back_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return markup

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 4 –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
        types.KeyboardButton("üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ"),
        types.KeyboardButton("üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó"),
        types.KeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
    )
    return markup

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–°–û–û–ë–©–ò–¢–ï –û–ë –û–ü–ê–°–ù–û–°–¢–ò" ===

def handle_danger_report_text(message, user_data, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    if text == "–ù–∞–∑–∞–¥":
        return "main_menu", None
    
    step = user_data.get('step', 'description')
    
    if step == 'description':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
        if text in ["üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ù–∞–∑–∞–¥", "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]:
            return "danger_report", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏"
        
        if len(text) > 500:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤."
        
        if len(text.strip()) < 10:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
        
        user_data['description'] = text.strip()
        user_data['step'] = 'location'
        
        log_activity(chat_id, username, "danger_description", text[:50])
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
            types.KeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º"),
            types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
            types.KeyboardButton("–ù–∞–∑–∞–¥")
        )
        
        return "danger_report", {
            'text': "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:",
            'reply_markup': markup
        }
    
    elif step == 'location':
        if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_data['step'] = 'media'
            user_data['location_text'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            return "danger_report", {
                'text': "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':",
                'reply_markup': get_media_keyboard()
            }
        elif text == "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º":
            user_data['step'] = 'location_text'
            return "danger_report", {
                'text': "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):",
                'reply_markup': get_back_keyboard()
            }
        else:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π
            return "danger_report", "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"
    
    elif step == 'location_text':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
        if text in ["üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ù–∞–∑–∞–¥", "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]:
            return "danger_report", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏"
        
        if len(text) > 200:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤."
        
        if len(text.strip()) < 3:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
        
        user_data['location_text'] = text.strip()
        user_data['step'] = 'media'
        
        log_activity(chat_id, username, "danger_location_text", text[:50])
        
        return "danger_report", {
            'text': f"‚úÖ –ú–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–æ: {text.strip()}\n\nüì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':",
            'reply_markup': get_media_keyboard()
        }
    
    elif step == 'media':
        if text == "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            return finish_danger_report(message, user_data, placeholders)
        else:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π
            return "danger_report", "‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"

def handle_danger_report_location(message, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    user_data['location'] = {
        'latitude': message.location.latitude,
        'longitude': message.location.longitude
    }
    user_data['step'] = 'media'
    
    log_activity(chat_id, username, "danger_location", f"lat: {message.location.latitude}, lon: {message.location.longitude}")
    
    return {
        'text': "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!\nüì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':",
        'reply_markup': get_media_keyboard()
    }

def handle_danger_report_media(message, user_data, max_file_size_mb, max_video_size_mb):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    file_size = 0
    if message.photo:
        file_size = message.photo[-1].file_size
        max_size = max_file_size_mb * 1024 * 1024
    elif message.video:
        file_size = message.video.file_size
        max_size = max_video_size_mb * 1024 * 1024
    elif message.document:
        file_size = message.document.file_size
        max_size = max_file_size_mb * 1024 * 1024
    
    if file_size > max_size:
        return f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º: {max_file_size_mb} –ú–ë –¥–ª—è —Ñ–æ—Ç–æ, {max_video_size_mb} –ú–ë –¥–ª—è –≤–∏–¥–µ–æ"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    if 'media' not in user_data:
        user_data['media'] = []
    
    if len(user_data['media']) >= 3:
        return "‚ùå –ú–∞–∫—Å–∏–º—É–º 3 –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞!"
    
    media_info = {
        'type': message.content_type,
        'file_id': message.photo[-1].file_id if message.photo else (message.video.file_id if message.video else message.document.file_id),
        'file_size': file_size
    }
    user_data['media'].append(media_info)
    
    log_activity(chat_id, username, "danger_media", f"type: {message.content_type}, size: {file_size}")
    
    remaining = 3 - len(user_data['media'])
    return f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(user_data['media'])}/3). –û—Å—Ç–∞–ª–æ—Å—å: {remaining}"

def finish_danger_report(message, user_data, placeholders):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    incident_data = {
        'description': user_data.get('description', ''),
        'location': user_data.get('location'),
        'location_text': user_data.get('location_text'),
        'media_count': len(user_data.get('media', [])),
        'user_id': chat_id,
        'username': username
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    log_incident(chat_id, incident_data)
    log_activity(chat_id, username, "danger_report_completed")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É (–∑–∞–≥–ª—É—à–∫–∞)
    admin_chat_id = os.getenv('ADMIN_CHAT_ID')
    if admin_chat_id:
        try:
            admin_text = f"üö® –ù–û–í–´–ô –ò–ù–¶–ò–î–ï–ù–¢\n\n"
            admin_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({chat_id})\n"
            admin_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {incident_data['description']}\n"
            if incident_data['location']:
                admin_text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {incident_data['location']['latitude']}, {incident_data['location']['longitude']}\n"
            elif incident_data['location_text']:
                admin_text += f"üìç –ú–µ—Å—Ç–æ: {incident_data['location_text']}\n"
            else:
                admin_text += f"üìç –ú–µ—Å—Ç–æ: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
            admin_text += f"üì∑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {incident_data['media_count']}\n"
            admin_text += f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bot.send_message, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É: {admin_text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–≤–æ–Ω–∫–æ–≤
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–ª—É–∂–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
        types.KeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –æ—Ö—Ä–∞–Ω—É —Ç—Ä—É–¥–∞"),
        types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    
    response_text = (
        "‚úÖ **–ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!**\n\n"
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ: {}\n"
        "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {}\n"
        "üì∑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {}\n\n"
        "üö® **–°—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:**\n"
        "üìû –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {}\n"
        "üìû –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞: {}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    ).format(
        incident_data['description'],
        "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {:.6f}, {:.6f}".format(incident_data['location']['latitude'], incident_data['location']['longitude']) if incident_data['location'] else (incident_data['location_text'] if incident_data['location_text'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        incident_data['media_count'],
        placeholders.get('contacts', {}).get('security', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        placeholders.get('contacts', {}).get('safety', '–ù–µ —É–∫–∞–∑–∞–Ω')
    )
    
    return "main_menu", {
        'text': response_text,
        'reply_markup': markup
    }

def get_media_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    return markup

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–ë–õ–ò–ñ–ê–ô–®–ï–ï –£–ë–ï–ñ–ò–©–ï" ===

def handle_shelter_finder_text(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ —É–±–µ–∂–∏—â"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    if text == "–ù–∞–∑–∞–¥":
        return "main_menu", None
    elif text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–±–µ–∂–∏—â
        shelters = placeholders.get('shelters', [])
        return "shelter_finder", {
            'shelters': shelters,
            'action': 'show_shelters_with_photos'
        }
    else:
        return "shelter_finder", "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"

def handle_shelter_finder_location(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ —É–±–µ–∂–∏—â"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "shelter_location", f"lat: {message.location.latitude}, lon: {message.location.longitude}")
    
    return show_shelters_list(message, placeholders, message.location.latitude, message.location.longitude)

def show_shelters_list(message, placeholders, user_lat=None, user_lon=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "shelters_shown")
    
    shelters = placeholders.get('shelters', [])
    
    if not shelters:
        return "main_menu", {
            'text': "‚ùå –°–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            'reply_markup': get_main_menu_keyboard()
        }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–±–µ–∂–∏—â
    try:
        for i, shelter in enumerate(shelters, 1):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–±–µ–∂–∏—â–∞
            photo_path = shelter.get('photo_path', '')
            if photo_path and os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo_file:
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bot.send_photo, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —É–±–µ–∂–∏—â–∞ {i}: {photo_path}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–±–µ–∂–∏—â–µ
            shelter_text = (
                f"üè† **{shelter['name']}**\n\n"
                f"üìù {shelter['description']}\n\n"
                f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {shelter['lat']}, {shelter['lon']}\n"
                f"üåê [üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({shelter['map_link']})"
            )
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bot.send_message
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–±–µ–∂–∏—â–µ {i}: {shelter_text[:100]}...")
        
        response = "‚úÖ **–ù–∞–π–¥–µ–Ω–æ —É–±–µ–∂–∏—â: 3**\n\n–í—Å–µ —É–±–µ–∂–∏—â–∞ –æ—Å–Ω–∞—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–±–µ–∂–∏—â: {e}")
        response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–±–µ–∂–∏—â–∞—Ö"
    
    return "main_menu", {
        'text': response,
        'reply_markup': get_main_menu_keyboard(),
        'parse_mode': 'Markdown'
    }

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò" ===

def handle_safety_consultant_text(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    if text == "–ù–∞–∑–∞–¥":
        return "main_menu", None
    elif text == "üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
        return show_documents_list(message, placeholders)
    elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        return start_question_mode(message)
    else:
        return "safety_consultant", "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"

def show_documents_list(message, placeholders):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∞–ª—å–Ω—ã—Ö PDF"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "documents_list_shown")
    
    documents = placeholders.get('documents', [])
    
    if not documents:
        return "main_menu", {
            'text': "‚ùå –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            'reply_markup': get_main_menu_keyboard()
        }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF —Ñ–∞–π–ª–æ–≤
    return "safety_consultant", {
        'documents': documents,
        'action': 'send_documents'
    }

def start_question_mode(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "question_mode_started")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    # –≠—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
    
    return "safety_consultant", {
        'text': "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n\n*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*\n‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ?\n‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n‚Ä¢ –ö–∞–∫ –Ω–∞–π—Ç–∏ —É–±–µ–∂–∏—â–µ?",
        'reply_markup': get_back_keyboard(),
        'parse_mode': 'Markdown'
    }

def handle_safety_question(message, placeholders):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    question = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
    if question in ["üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "üìÑ –û—Ç–∫—Ä—ã—Ç—å PDF", "‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", "–ù–∞–∑–∞–¥", "üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"]:
        return "safety_consultant", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏"
    
    if len(question.strip()) < 5:
        return "safety_consultant", "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤."
    
    log_activity(chat_id, username, "safety_question", question[:50])
    
    # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≥–ª—É—à–∫–∞—Ö
    responses = placeholders.get('safety_responses', [])
    answer = None
    source = None
    
    for response in responses:
        keywords = response.get('question_keywords', [])
        if any(keyword.lower() in question.lower() for keyword in keywords):
            answer = response['answer']
            source = response['source']
            break
    
    if not answer:
        answer = "–ó–∞–≥–ª—É—à–∫–∞-–æ—Ç–≤–µ—Ç –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É."
        source = "–î–æ–∫—É–º–µ–Ω—Ç ‚ÑñX, —Å—Ç—Ä. Y, –ø. Z (–∑–∞–≥–ª—É—à–∫–∞)."
    
    response_text = (
        "ü§ñ **–û—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**\n\n"
        "üìù **–û—Ç–≤–µ—Ç:** {}\n\n"
        "üìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** {}\n\n"
        "üîç [–ü–æ–¥—Ä–æ–±–Ω–µ–µ] | üìÑ [–û—Ç–∫—Ä—ã—Ç—å PDF]"
    ).format(answer, source)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ"),
        types.KeyboardButton("üìÑ –û—Ç–∫—Ä—ã—Ç—å PDF"),
        types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    
    return "safety_consultant", {
        'text': response_text,
        'reply_markup': markup,
        'parse_mode': 'Markdown'
    }

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ" ===

def handle_improvement_suggestion_text(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    if text == "–ù–∞–∑–∞–¥":
        return "main_menu", None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
    if text in ["‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ", "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó", "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"]:
        return "improvement_suggestion", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏"
    
    if len(text) > 1000:
        return "improvement_suggestion", "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤."
    
    if len(text.strip()) < 10:
        return "improvement_suggestion", "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    suggestion_data = {
        'text': text.strip(),
        'user_id': chat_id,
        'username': username
    }
    
    log_suggestion(chat_id, suggestion_data)
    log_activity(chat_id, username, "suggestion_submitted", text[:50])
    
    response_text = (
        "‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!**\n\n"
        "üìù –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {}\n\n"
        "üìã –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∑–∞–≤–æ–¥–∞.\n"
        "üïê –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
    ).format(
        text,
        datetime.now().strftime('%d.%m.%Y %H:%M')
    )
    
    return "main_menu", {
        'text': response_text,
        'reply_markup': get_main_menu_keyboard()
    }
