"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è MVP Telegram-–±–æ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö 4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import json
import csv
from datetime import datetime

import telebot
from telebot import types
from loguru import logger

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    import sys
    import os
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    from yandex_notifications import send_incident_notification, set_bot_instance
    NOTIFICATIONS_AVAILABLE = True
    logger.info("‚úÖ –ú–æ–¥—É–ª—å yandex_notifications —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    NOTIFICATIONS_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å yandex_notifications –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ bot (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ main.py)
bot_instance = None

def set_bot_instance(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot_instance
    bot_instance = bot

def log_activity(chat_id: int, username: str, action: str, payload: str = ""):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV"""
    try:
        log_file = 'logs/activity.csv'
        file_exists = os.path.exists(log_file)
        
        with open(log_file, 'a', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f)
            if not file_exists:
                writer.writerow(['timestamp', 'user_id', 'username', 'action', 'payload'])
            
            writer.writerow([
                datetime.now().isoformat(),
                chat_id,
                username,
                action,
                payload[:100]
            ])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ user_actions.log
        logger.bind(user_id=chat_id).info(f"Activity: {action} | {username} | {payload[:50]}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

def log_incident(chat_id: int, incident_data: dict):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ JSON"""
    try:
        log_file = 'logs/incidents.json'
        incidents = []
        
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8-sig') as f:
                incidents = json.load(f)
        
        incidents.append({
            'timestamp': datetime.now().isoformat(),
            'user_id': chat_id,
            'incident': incident_data
        })
        
        with open(log_file, 'w', encoding='utf-8-sig') as f:
            json.dump(incidents, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")

def log_suggestion(chat_id: int, suggestion_data: dict):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤ JSON"""
    try:
        log_file = 'logs/suggestions.json'
        suggestions = []
        
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8-sig') as f:
                suggestions = json.load(f)
        
        suggestions.append({
            'timestamp': datetime.now().isoformat(),
            'user_id': chat_id,
            'suggestion': suggestion_data
        })
        
        with open(log_file, 'w', encoding='utf-8-sig') as f:
            json.dump(suggestions, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")

def get_back_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return markup

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 4 –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
        types.KeyboardButton("üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ"),
        types.KeyboardButton("üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó"),
        types.KeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
    )
    return markup

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–°–û–û–ë–©–ò–¢–ï –û–ë –û–ü–ê–°–ù–û–°–¢–ò" ===

def handle_danger_report_text(message, user_data, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑ main.py
    try:
        from .main import sanitize_user_input, validate_user_input
        sanitized_text = sanitize_user_input(text)
        is_valid, validation_error = validate_user_input(sanitized_text, min_length=1, max_length=1000)
        
        if not is_valid:
            return "danger_report", f"‚ùå {validation_error}"
    except ImportError:
        # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        sanitized_text = text
    
    if sanitized_text == "–ù–∞–∑–∞–¥":
        return "main_menu", None
    
    step = user_data.get('step', 'description')
    
    if step == 'description':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
        if sanitized_text in ["üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ù–∞–∑–∞–¥", "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]:
            return "danger_report", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏"
        
        if len(sanitized_text) > 500:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤."
        
        if len(sanitized_text.strip()) < 10:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
        
        user_data['description'] = sanitized_text.strip()
        user_data['step'] = 'location'
        
        log_activity(chat_id, username, "danger_description", text[:50])
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
            types.KeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º"),
            types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
            types.KeyboardButton("–ù–∞–∑–∞–¥")
        )
        
        return "danger_report", {
            'text': "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:\n\n‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞\n‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'\n‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            'reply_markup': markup
        }
    
    elif step == 'location':
        if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_data['step'] = 'media'
            user_data['location_text'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            return "danger_report", {
                'text': "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':",
                'reply_markup': get_media_keyboard()
            }
        elif text == "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º":
            user_data['step'] = 'location_text'
            return "danger_report", {
                'text': "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):",
                'reply_markup': get_back_keyboard()
            }
        elif text == "–ù–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            user_data['step'] = 'description'
            return "danger_report", {
                'text': "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\nüìù –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
                'reply_markup': get_back_keyboard()
            }
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º
            if len(text) > 200:
                return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤."
            
            if len(text.strip()) < 3:
                return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
            
            user_data['location_text'] = text.strip()
            user_data['step'] = 'media'
            
            log_activity(chat_id, username, "danger_location_text", text[:50])
            
            return "danger_report", {
                'text': f"‚úÖ –ú–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–æ: {text.strip()}\n\nüì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':",
                'reply_markup': get_media_keyboard()
            }
    
    elif step == 'location_text':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
        if text in ["üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]:
            return "danger_report", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏"
        elif text == "–ù–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–∞
            user_data['step'] = 'location'
            return "danger_report", {
                'text': "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:",
                'reply_markup': get_location_keyboard()
            }
        
        if len(text) > 200:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤."
        
        if len(text.strip()) < 3:
            return "danger_report", "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
        
        user_data['location_text'] = text.strip()
        user_data['step'] = 'media'
        
        log_activity(chat_id, username, "danger_location_text", text[:50])
        
        return "danger_report", {
            'text': f"‚úÖ –ú–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–æ: {text.strip()}\n\nüì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':",
            'reply_markup': get_media_keyboard()
        }
    
    elif step == 'media':
        if text == "üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            return finish_danger_report(message, user_data, placeholders)
        elif text == "üìç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ":
            user_data['step'] = 'location'
            return "danger_report", {
                'text': "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:",
                'reply_markup': get_location_keyboard()
            }
        elif text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
            user_data['step'] = 'description'
            return "danger_report", {
                'text': "‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\nüìù –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
                'reply_markup': get_back_keyboard()
            }
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            user_data.clear()
            return "main_menu", {
                'text': "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                'reply_markup': get_main_menu_keyboard()
            }
        elif text == "–ù–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–∞
            user_data['step'] = 'location'
            return "danger_report", {
                'text': "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:",
                'reply_markup': get_location_keyboard()
            }
        else:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π
            return "danger_report", "‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é"

def handle_danger_report_location(message, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    user_data['location'] = {
        'latitude': message.location.latitude,
        'longitude': message.location.longitude
    }
    user_data['step'] = 'media'
    
    log_activity(chat_id, username, "danger_location", f"lat: {message.location.latitude}, lon: {message.location.longitude}")
    
    return {
        'text': "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!\nüì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':",
        'reply_markup': get_media_keyboard()
    }

def handle_danger_report_media(message, user_data, max_file_size_mb, max_video_size_mb):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    file_size = 0
    if message.photo:
        file_size = message.photo[-1].file_size
        max_size = max_file_size_mb * 1024 * 1024
    elif message.video:
        file_size = message.video.file_size
        max_size = max_video_size_mb * 1024 * 1024
    elif message.document:
        file_size = message.document.file_size
        max_size = max_file_size_mb * 1024 * 1024
    
    if file_size > max_size:
        return f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º: {max_file_size_mb} –ú–ë –¥–ª—è —Ñ–æ—Ç–æ, {max_video_size_mb} –ú–ë –¥–ª—è –≤–∏–¥–µ–æ"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    if 'media' not in user_data:
        user_data['media'] = []
    
    if len(user_data['media']) >= 3:
        return "‚ùå –ú–∞–∫—Å–∏–º—É–º 3 –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞!"
    
    media_info = {
        'type': message.content_type,
        'file_id': message.photo[-1].file_id if message.photo else (message.video.file_id if message.video else message.document.file_id),
        'file_size': file_size
    }
    user_data['media'].append(media_info)
    
    log_activity(chat_id, username, "danger_media", f"type: {message.content_type}, size: {file_size}")
    
    remaining = 3 - len(user_data['media'])
    return f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(user_data['media'])}/3). –û—Å—Ç–∞–ª–æ—Å—å: {remaining}"

def finish_danger_report(message, user_data, placeholders):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    incident_data = {
        'description': user_data.get('description', ''),
        'location': user_data.get('location'),
        'location_text': user_data.get('location_text'),
        'media_count': len(user_data.get('media', [])),
        'media': user_data.get('media', []),  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        'user_id': chat_id,
        'username': username
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    log_incident(chat_id, incident_data)
    log_activity(chat_id, username, "danger_report_completed")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∞–¥–º–∏–Ω—É
        admin_chat_id = os.getenv('ADMIN_CHAT_ID')
        if admin_chat_id:
            admin_text = f"üö® –ù–û–í–´–ô –ò–ù–¶–ò–î–ï–ù–¢\n\n"
            admin_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {chat_id}\n"
            admin_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {incident_data['description']}\n"
            if incident_data['location']:
                admin_text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {incident_data['location']['latitude']}, {incident_data['location']['longitude']}\n"
            elif incident_data['location_text']:
                admin_text += f"üìç –ú–µ—Å—Ç–æ: {incident_data['location_text']}\n"
            else:
                admin_text += f"üìç –ú–µ—Å—Ç–æ: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
            admin_text += f"üì∑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {incident_data['media_count']}\n"
            admin_text += f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –≤ Telegram: {admin_text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç bot
            if bot_instance:
                try:
                    bot_instance.send_message(admin_chat_id, admin_text)
                    logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                except Exception as bot_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É –≤ Telegram: {bot_error}")
            else:
                logger.warning("‚ö†Ô∏è –û–±—ä–µ–∫—Ç bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É")
        else:
            logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if NOTIFICATIONS_AVAILABLE:
            notification_success, notification_message = send_incident_notification(incident_data)
            if notification_success:
                logger.info(f"‚úÖ –Ø–Ω–¥–µ–∫—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {notification_message}")
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_message}")
        else:
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ø–Ω–¥–µ–∫—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–≤–æ–Ω–∫–æ–≤
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–ª—É–∂–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
        types.KeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –æ—Ö—Ä–∞–Ω—É —Ç—Ä—É–¥–∞"),
        types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    
    response_text = (
        "‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ: {}\n"
        "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {}\n"
        "üì∑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {}\n\n"
        "üö® –°—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "üìû –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {}\n"
        "üìû –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞: {}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    ).format(
        incident_data['description'],
        "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {:.6f}, {:.6f}".format(incident_data['location']['latitude'], incident_data['location']['longitude']) if incident_data['location'] else (incident_data['location_text'] if incident_data['location_text'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        incident_data['media_count'],
        placeholders.get('contacts', {}).get('security', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        placeholders.get('contacts', {}).get('safety', '–ù–µ —É–∫–∞–∑–∞–Ω')
    )
    
    return "main_menu", {
        'text': response_text,
        'reply_markup': markup
    }

def get_location_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º"),
        types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return markup

def get_media_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üì∑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
        types.KeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ"),
        types.KeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
    )
    markup.add(
        types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    return markup

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–ë–õ–ò–ñ–ê–ô–®–ï–ï –£–ë–ï–ñ–ò–©–ï" ===

def handle_shelter_finder_text(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ —É–±–µ–∂–∏—â"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    if text == "–ù–∞–∑–∞–¥":
        return "main_menu", None
    elif text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–±–µ–∂–∏—â
        shelters = placeholders.get('shelters', [])
        return "shelter_finder", {
            'shelters': shelters,
            'action': 'show_shelters_with_photos'
        }
    else:
        return "shelter_finder", "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"



# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò" ===

def handle_safety_consultant_text(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    if text == "–ù–∞–∑–∞–¥":
        return "main_menu", None
    elif text == "üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
        return show_documents_list(message, placeholders)
    elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        return start_question_mode(message)
    else:
        return "safety_consultant", "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"

def show_documents_list(message, placeholders):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∞–ª—å–Ω—ã—Ö PDF"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "documents_list_shown")
    
    documents = placeholders.get('documents', [])
    
    if not documents:
        return "main_menu", {
            'text': "‚ùå –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            'reply_markup': get_main_menu_keyboard()
        }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF —Ñ–∞–π–ª–æ–≤
    return "safety_consultant", {
        'documents': documents,
        'action': 'send_documents'
    }

def start_question_mode(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    log_activity(chat_id, username, "question_mode_started")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    # –≠—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
    
    return "safety_consultant", {
        'text': "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n\n*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*\n‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ?\n‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n‚Ä¢ –ö–∞–∫ –Ω–∞–π—Ç–∏ —É–±–µ–∂–∏—â–µ?",
        'reply_markup': get_back_keyboard(),
        'parse_mode': 'Markdown'
    }

def handle_safety_question(message, placeholders):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    question = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
    if question in ["üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "üìÑ –û—Ç–∫—Ä—ã—Ç—å PDF", "‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", "–ù–∞–∑–∞–¥", "üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"]:
        return "safety_consultant", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏"
    
    if len(question.strip()) < 5:
        return "safety_consultant", "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤."
    
    log_activity(chat_id, username, "safety_question", question[:50])
    
    # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≥–ª—É—à–∫–∞—Ö
    responses = placeholders.get('safety_responses', [])
    answer = None
    source = None
    
    for response in responses:
        keywords = response.get('question_keywords', [])
        if any(keyword.lower() in question.lower() for keyword in keywords):
            answer = response['answer']
            source = response['source']
            break
    
    if not answer:
        answer = "–ó–∞–≥–ª—É—à–∫–∞-–æ—Ç–≤–µ—Ç –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É."
        source = "–î–æ–∫—É–º–µ–Ω—Ç ‚ÑñX, —Å—Ç—Ä. Y, –ø. Z (–∑–∞–≥–ª—É—à–∫–∞)."
    
    response_text = (
        "ü§ñ –û—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n\n"
        "üìù –û—Ç–≤–µ—Ç: {}\n\n"
        "üìö –ò—Å—Ç–æ—á–Ω–∏–∫: {}\n\n"
        "üîç [–ü–æ–¥—Ä–æ–±–Ω–µ–µ] | üìÑ [–û—Ç–∫—Ä—ã—Ç—å PDF]"
    ).format(answer, source)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ"),
        types.KeyboardButton("üìÑ –û—Ç–∫—Ä—ã—Ç—å PDF"),
        types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    
    return "safety_consultant", {
        'text': response_text,
        'reply_markup': markup,
        'parse_mode': 'Markdown'
    }

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ" ===

def handle_improvement_suggestion_text(message, placeholders, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    if text == "–ù–∞–∑–∞–¥" or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É":
        return "improvement_suggestion_choice", None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
    if text in ["‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ", "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó", "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"]:
        return "improvement_suggestion", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏"
    
    if len(text) > 1000:
        return "improvement_suggestion", "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤."
    
    if len(text.strip()) < 10:
        return "improvement_suggestion", "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    suggestion_data = {
        'text': text.strip(),
        'user_id': chat_id,
        'username': username,
        'timestamp': datetime.now().isoformat(),
        'votes': 0,
        'voters': [],
        'status': 'pending',  # pending, approved, rejected, voted
        'category': user_data.get(chat_id, {}).get('category', categorize_suggestion(text.strip()))
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    save_enhanced_suggestion(chat_id, suggestion_data)
    log_suggestion(chat_id, suggestion_data)
    log_activity(chat_id, username, "suggestion_submitted", text[:50])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
        types.KeyboardButton("üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
        types.KeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
        types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    
    response_text = (
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\n"
        "üìù –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {}\n\n"
        "üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n"
        "üïê –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {}\n"
        "üìä –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n"
        "üí° –ß—Ç–æ –¥–∞–ª—å—à–µ?\n"
        "‚Ä¢ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏\n"
        "‚Ä¢ –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã–Ω–æ—Å—è—Ç—Å—è –Ω–∞ –æ–±—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
        "üéØ –•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞?\n"
        "–í–∞—à–∏ –∏–¥–µ–∏ –ø–æ–º–æ–≥–∞—é—Ç —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ!"
    ).format(
        text,
        suggestion_data['category'],
        datetime.now().strftime('%d.%m.%Y %H:%M')
    )
    
    return "improvement_suggestion_menu", {
        'text': response_text,
        'reply_markup': markup
    }

def handle_improvement_suggestion_choice(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return "main_menu", None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
    category_map = {
        "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç–∞": {
            'category': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'prompt': "üõ°Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç–µ\n\n–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å:",
            'examples': [
                "‚Ä¢ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                "‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞"
            ]
        },
        "üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–∏–∑–∞–π–Ω": {
            'category': 'UI/UX',
            'prompt': "üé® –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∏ –¥–∏–∑–∞–π–Ω—É\n\n–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
            'examples': [
                "‚Ä¢ –ù–æ–≤—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã",
                "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω",
                "‚Ä¢ –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã"
            ]
        },
        "‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": {
            'category': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            'prompt': "‚ö° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:",
            'examples': [
                "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
                "‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                "‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                "‚Ä¢ –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö"
            ]
        },
        "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": {
            'category': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            'prompt': "üîî –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º\n\n–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å:",
            'examples': [
                "‚Ä¢ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                "‚Ä¢ Email-—Ä–∞—Å—Å—ã–ª–∫–∏",
                "‚Ä¢ SMS-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
                "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∞–ª–µ—Ä—Ç—ã"
            ]
        },
        "üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": {
            'category': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
            'prompt': "üîß –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n\n–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å:",
            'examples': [
                "‚Ä¢ –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏",
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"
            ]
        },
        "üí≠ –°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞": {
            'category': '–û–±—â–µ–µ',
            'prompt': "üí≠ –°–≤–æ–±–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞:",
            'examples': [
                "‚Ä¢ –õ—é–±—ã–µ –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é",
                "‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
                "‚Ä¢ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
            ]
        }
    }
    
    if text in category_map:
        category_info = category_map[text]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ user_data (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ main.py)
        # user_data –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ main.py
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" (–≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"))
        markup.add(types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        examples_text = "\n".join(category_info['examples'])
        
        response_text = (
            f"{category_info['prompt']}\n\n"
            f"üí° –ü—Ä–∏–º–µ—Ä—ã:\n{examples_text}\n\n"
            f"üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        
        log_activity(chat_id, username, "suggestion_category_chosen", text)
        
        return "improvement_suggestion", {
            'text': response_text,
            'reply_markup': markup,
            'category': category_info['category']
        }
    else:
        return "improvement_suggestion_choice", "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"

def categorize_suggestion(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    text_lower = text.lower()
    
    if any(word in text_lower for word in ['–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–∫–Ω–æ–ø–∫', '–º–µ–Ω—é', '–¥–∏–∑–∞–π–Ω', '–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥']):
        return 'UI/UX'
    elif any(word in text_lower for word in ['—Ñ—É–Ω–∫—Ü', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç', '–Ω–æ–≤—ã–π', '–¥–æ–±–∞–≤–∏—Ç—å']):
        return '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'
    elif any(word in text_lower for word in ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–∑–∞—â–∏—Ç–∞', '–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å']):
        return '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
    elif any(word in text_lower for word in ['—Å–∫–æ—Ä–æ—Å—Ç—å', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è']):
        return '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    elif any(word in text_lower for word in ['—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–∞–ª–µ—Ä—Ç', '–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ']):
        return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    else:
        return '–û–±—â–µ–µ'

def save_enhanced_suggestion(chat_id, suggestion_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        suggestions_file = 'logs/enhanced_suggestions.json'
        suggestions = []
        
        if os.path.exists(suggestions_file):
            with open(suggestions_file, 'r', encoding='utf-8-sig') as f:
                suggestions = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestion_data['id'] = len(suggestions) + 1
        suggestions.append(suggestion_data)
        
        with open(suggestions_file, 'w', encoding='utf-8') as f:
            json.dump(suggestions, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")

def handle_suggestion_menu(message, placeholders):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    text = message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return "main_menu", None
    elif text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è":
        return show_user_suggestions(message)
    elif text == "üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è":
        return show_popular_suggestions(message)
    elif text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ":
        return "improvement_suggestion", {
            'text': "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n\n"
                   "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –±—ã –≤—ã —É–ª—É—á—à–∏–ª–∏ –ø—Ä–æ–µ–∫—Ç. –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã–Ω–µ—Å–µ–Ω—ã –Ω–∞ –æ–±—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!",
            'reply_markup': get_back_keyboard()
        }
    else:
        return "improvement_suggestion_menu", "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"

def show_user_suggestions(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    
    try:
        suggestions_file = 'logs/enhanced_suggestions.json'
        if not os.path.exists(suggestions_file):
            return "improvement_suggestion_menu", {
                'text': "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞!",
                'reply_markup': get_back_keyboard()
            }
        
        with open(suggestions_file, 'r', encoding='utf-8-sig') as f:
            all_suggestions = json.load(f)
        
        user_suggestions = [s for s in all_suggestions if s['user_id'] == chat_id]
        
        if not user_suggestions:
            return "improvement_suggestion_menu", {
                'text': "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞!",
                'reply_markup': get_back_keyboard()
            }
        
        response_text = f"üìä –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({len(user_suggestions)}):\n\n"
        
        for i, suggestion in enumerate(user_suggestions[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
            timestamp = datetime.fromisoformat(suggestion['timestamp']).strftime('%d.%m %H:%M')
            votes = suggestion.get('votes', 0)
            status = suggestion['status']
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå',
                'voted': 'üó≥Ô∏è'
            }.get(status, '‚ùì')
            
            response_text += (
                f"{i}. {status_emoji} {suggestion['category']}\n"
                f"üìù {suggestion['text'][:60]}...\n"
                f"üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤: {votes} | üìÖ {timestamp}\n\n"
            )
        
        return "improvement_suggestion_menu", {
            'text': response_text,
            'reply_markup': get_back_keyboard()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return "improvement_suggestion_menu", {
            'text': "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            'reply_markup': get_back_keyboard()
        }

def show_popular_suggestions(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    chat_id = message.chat.id
    
    try:
        suggestions_file = 'logs/enhanced_suggestions.json'
        if not os.path.exists(suggestions_file):
            return "improvement_suggestion_menu", {
                'text': "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.",
                'reply_markup': get_back_keyboard()
            }
        
        with open(suggestions_file, 'r', encoding='utf-8-sig') as f:
            all_suggestions = json.load(f)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤
        popular_suggestions = sorted(all_suggestions, key=lambda x: x.get('votes', 0), reverse=True)
        
        response_text = "üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n"
        
        for i, suggestion in enumerate(popular_suggestions[:5], 1):
            votes = suggestion.get('votes', 0)
            username = suggestion.get('username', 'Unknown')
            category = suggestion['category']
            
            response_text += (
                f"{i}. üó≥Ô∏è {votes} –≥–æ–ª–æ—Å–æ–≤\n"
                f"üìù {suggestion['text'][:70]}...\n"
                f"üë§ @{username} | üè∑Ô∏è {category}\n\n"
            )
        
        if not popular_suggestions:
            response_text = "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
        
        return "improvement_suggestion_menu", {
            'text': response_text,
            'reply_markup': get_back_keyboard()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        return "improvement_suggestion_menu", {
            'text': "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            'reply_markup': get_back_keyboard()
    }
