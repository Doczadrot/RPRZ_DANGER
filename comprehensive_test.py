#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPRZ Safety Bot
–ü–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
"""

import os
import sys
import json
import time
import unittest
from unittest.mock import Mock, patch, MagicMock
from datetime import datetime
import tempfile
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bot'))

class TestRPRZBotComprehensive(unittest.TestCase):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è RPRZ Safety Bot"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.test_dir = tempfile.mkdtemp()
        os.makedirs(os.path.join(self.test_dir, 'logs'), exist_ok=True)
        
        # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é
        self.original_cwd = os.getcwd()
        os.chdir(self.test_dir)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from handlers import (
            get_main_menu_keyboard, get_back_keyboard, get_media_keyboard,
            handle_danger_report_text, handle_danger_report_location, handle_danger_report_media,
            handle_shelter_finder_text, handle_shelter_finder_location, show_shelters_list,
            handle_safety_consultant_text, show_documents_list, start_question_mode, handle_safety_question,
            handle_improvement_suggestion_text, finish_danger_report,
            log_activity, log_incident, log_suggestion
        )
        
        self.placeholders = {
            'shelters': [
                {
                    'name': '–¢–µ—Å—Ç–æ–≤–æ–µ —É–±–µ–∂–∏—â–µ 1',
                    'description': '–û–ø–∏—Å–∞–Ω–∏–µ —É–±–µ–∂–∏—â–∞ 1',
                    'lat': '55.7558',
                    'lon': '37.6176',
                    'photo_path': 'test_photo1.jpg',
                    'map_link': 'https://test.com/map1'
                },
                {
                    'name': '–¢–µ—Å—Ç–æ–≤–æ–µ —É–±–µ–∂–∏—â–µ 2',
                    'description': '–û–ø–∏—Å–∞–Ω–∏–µ —É–±–µ–∂–∏—â–∞ 2',
                    'lat': '55.7658',
                    'lon': '37.6276',
                    'photo_path': 'test_photo2.jpg',
                    'map_link': 'https://test.com/map2'
                }
            ],
            'documents': [
                {
                    'title': '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 1',
                    'description': '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 1',
                    'file_path': 'test_doc1.pdf'
                },
                {
                    'title': '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 2',
                    'description': '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 2',
                    'file_path': 'test_doc2.pdf'
                }
            ],
            'safety_responses': [
                {
                    'question_keywords': ['–ø–æ–∂–∞—Ä', '–æ–≥–æ–Ω—å'],
                    'answer': '–ü—Ä–∏ –ø–æ–∂–∞—Ä–µ –∑–≤–æ–Ω–∏—Ç–µ 112 –∏ –ø–æ–∫–∏–Ω—å—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
                    'source': '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
                },
                {
                    'question_keywords': ['–∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ', '—Ç—Ä—è—Å–∫–∞'],
                    'answer': '–ü—Ä–∏ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–∏ —É–∫—Ä–æ–π—Ç–µ—Å—å –ø–æ–¥ –ø—Ä–æ—á–Ω—ã–º —Å—Ç–æ–ª–æ–º',
                    'source': '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º –ø—Ä–∏ –ß–°'
                }
            ],
            'contacts': {
                'security': '+7 (495) 123-45-67',
                'safety': '+7 (495) 123-45-68'
            }
        }
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.chdir(self.original_cwd)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        if os.path.exists(self.test_dir):
            shutil.rmtree(self.test_dir)
    
    def create_mock_message(self, text, chat_id=12345, username="test_user", content_type="text"):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = Mock()
        message.chat = Mock()
        message.chat.id = chat_id
        message.from_user = Mock()
        message.from_user.username = username
        message.text = text
        message.content_type = content_type
        return message
    
    def test_1_keyboards_creation(self):
        """–¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        print("\n=== –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ===")
        
        from handlers import get_main_menu_keyboard, get_back_keyboard, get_media_keyboard
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        main_kb = get_main_menu_keyboard()
        self.assertIsNotNone(main_kb, "–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        self.assertEqual(len(main_kb.keyboard), 1, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
        self.assertEqual(len(main_kb.keyboard[0]), 4, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        button_texts = [btn.text for btn in main_kb.keyboard[0]]
        expected_buttons = ["‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ", 
                           "üßë‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó", "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"]
        self.assertEqual(button_texts, expected_buttons, "–ù–µ–≤–µ—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_kb = get_back_keyboard()
        self.assertIsNotNone(back_kb, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ '–ù–∞–∑–∞–¥' –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        self.assertEqual(len(back_kb.keyboard), 1, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ '–ù–∞–∑–∞–¥'")
        self.assertEqual(len(back_kb.keyboard[0]), 1, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ '–ù–∞–∑–∞–¥'")
        self.assertEqual(back_kb.keyboard[0][0].text, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'")
        
        # –ú–µ–¥–∏–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        media_kb = get_media_keyboard()
        self.assertIsNotNone(media_kb, "–ú–µ–¥–∏–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        self.assertEqual(len(media_kb.keyboard), 1, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –º–µ–¥–∏–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
        self.assertEqual(len(media_kb.keyboard[0]), 2, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–¥–∏–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
        
        print("‚úÖ –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_2_danger_report_flow(self):
        """–¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\n=== –¢–ï–°–¢ 2: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===")
        
        from handlers import handle_danger_report_text, handle_danger_report_location, handle_danger_report_media, finish_danger_report
        
        # –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        message = self.create_mock_message("‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        user_data = {'step': 'description', 'description': '', 'location': None, 'media': []}
        
        result = handle_danger_report_text(message, user_data, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertEqual(new_state, "danger_report", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        self.assertIn("–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ", response['text'], "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–∏—Å–∞–Ω–∏—è")
        
        # –®–∞–≥ 2: –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        message = self.create_mock_message("–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        user_data['step'] = 'description'
        
        result = handle_danger_report_text(message, user_data, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertEqual(new_state, "danger_report", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        self.assertIn("–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", response['text'], "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
        self.assertEqual(user_data['description'], "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # –®–∞–≥ 3: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        message = self.create_mock_message("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
        user_data['step'] = 'location'
        
        result = handle_danger_report_text(message, user_data, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertEqual(new_state, "danger_report", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        self.assertIn("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", response['text'], "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        
        # –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        message = self.create_mock_message("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
        message.location = Mock()
        message.location.latitude = 55.7558
        message.location.longitude = 37.6176
        user_data['step'] = 'location'
        
        result = handle_danger_report_location(message, user_data)
        self.assertIsInstance(result, dict, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        self.assertIn("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞", result['text'], "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        self.assertEqual(user_data['step'], 'media', "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        self.assertIsNotNone(user_data['location'], "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        
        # –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        message = self.create_mock_message("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
        message.content_type = "photo"
        message.photo = [Mock(file_id="test_file_id", file_size=1024*1024)]  # 1MB
        user_data['step'] = 'media'
        
        result = handle_danger_report_media(message, user_data, 20, 300)
        self.assertIn("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω", result, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞")
        self.assertEqual(len(user_data['media']), 1, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –®–∞–≥ 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        result = finish_danger_report(12345, user_data, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertEqual(new_state, "main_menu", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        self.assertIn("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", response['text'], "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_3_shelter_finder(self):
        """–¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —É–±–µ–∂–∏—â"""
        print("\n=== –¢–ï–°–¢ 3: –ü–æ–∏—Å–∫ —É–±–µ–∂–∏—â ===")
        
        from handlers import handle_shelter_finder_text, handle_shelter_finder_location, show_shelters_list
        
        # –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —É–±–µ–∂–∏—â
        message = self.create_mock_message("üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ")
        result = handle_shelter_finder_text(message, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertEqual(new_state, "shelter_finder", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        self.assertIn("shelters", response, "–°–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç")
        
        # –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —É–±–µ–∂–∏—â
        result = show_shelters_list(self.placeholders)
        self.assertIsInstance(result, dict, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        self.assertIn("text", result, "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        self.assertIn("reply_markup", result, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â
        message = self.create_mock_message("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
        message.location = Mock()
        message.location.latitude = 55.7558
        message.location.longitude = 37.6176
        
        result = handle_shelter_finder_location(message, self.placeholders)
        self.assertIsInstance(result, dict, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        self.assertIn("text", result, "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        self.assertIn("reply_markup", result, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print("‚úÖ –ü–æ–∏—Å–∫ —É–±–µ–∂–∏—â —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_4_safety_consultant(self):
        """–¢–µ—Å—Ç 4: –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\n=== –¢–ï–°–¢ 4: –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===")
        
        from handlers import handle_safety_consultant_text, show_documents_list, start_question_mode, handle_safety_question
        
        # –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        message = self.create_mock_message("üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        result = handle_safety_consultant_text(message, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertEqual(new_state, "safety_consultant", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        
        # –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        result = show_documents_list(self.placeholders)
        self.assertIsInstance(result, dict, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        self.assertIn("text", result, "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        self.assertIn("reply_markup", result, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        message = self.create_mock_message("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        result = handle_safety_consultant_text(message, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertEqual(new_state, "safety_consultant", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
        message = self.create_mock_message("–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ?")
        result = handle_safety_question(message, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertEqual(new_state, "safety_consultant", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        self.assertIn("–ø–æ–∂–∞—Ä", response['text'].lower(), "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
        
        print("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_5_improvement_suggestions(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        print("\n=== –¢–ï–°–¢ 5: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é ===")
        
        from handlers import handle_improvement_suggestion_text
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        message = self.create_mock_message("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
        result = handle_improvement_suggestion_text(message, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertEqual(new_state, "main_menu", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        self.assertIn("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", response['text'], "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        
        print("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_6_logging_system(self):
        """–¢–µ—Å—Ç 6: –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n=== –¢–ï–°–¢ 6: –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===")
        
        from handlers import log_activity, log_incident, log_suggestion
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        log_activity(12345, "test_user", "test_action", "test_payload")
        self.assertTrue(os.path.exists('logs/activity.csv'), "–§–∞–π–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        with open('logs/activity.csv', 'r', encoding='utf-8') as f:
            content = f.read()
            self.assertIn("test_action", content, "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥")
            self.assertIn("test_user", content, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥")
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        incident_data = {
            'description': '–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç',
            'location': {'latitude': 55.7558, 'longitude': 37.6176},
            'user_id': 12345,
            'username': 'test_user'
        }
        log_incident(12345, incident_data)
        self.assertTrue(os.path.exists('logs/incidents.json'), "–§–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        with open('logs/incidents.json', 'r', encoding='utf-8') as f:
            incidents = json.load(f)
            self.assertIsInstance(incidents, list, "–§–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫")
            self.assertEqual(len(incidents), 1, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
            self.assertEqual(incidents[0]['description'], '–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç', "–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestion_data = {
            'text': '–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
            'user_id': 12345,
            'username': 'test_user'
        }
        log_suggestion(12345, suggestion_data)
        self.assertTrue(os.path.exists('logs/suggestions.json'), "–§–∞–π–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        with open('logs/suggestions.json', 'r', encoding='utf-8') as f:
            suggestions = json.load(f)
            self.assertIsInstance(suggestions, list, "–§–∞–π–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫")
            self.assertEqual(len(suggestions), 1, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            self.assertEqual(suggestions[0]['text'], '–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', "–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–µ–Ω")
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_7_error_handling(self):
        """–¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        print("\n=== –¢–ï–°–¢ 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===")
        
        from handlers import handle_danger_report_text, handle_improvement_suggestion_text
        
        # –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        message = self.create_mock_message("x" * 501)  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_data = {'step': 'description', 'description': '', 'location': None, 'media': []}
        result = handle_danger_report_text(message, user_data, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertIn("—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ", response, "–ù–µ–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        message = self.create_mock_message("x" * 1001)  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        result = handle_improvement_suggestion_text(message, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        new_state, response = result
        self.assertIn("—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ", response, "–ù–µ–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_8_media_handling(self):
        """–¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        print("\n=== –¢–ï–°–¢ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ ===")
        
        from handlers import handle_danger_report_media
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
        message = self.create_mock_message("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
        message.content_type = "photo"
        message.photo = [Mock(file_id="test_file_id", file_size=1024*1024)]  # 1MB
        user_data = {'media': []}
        
        result = handle_danger_report_media(message, user_data, 20, 300)
        self.assertIn("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω", result, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞")
        self.assertEqual(len(user_data['media']), 1, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        user_data['media'] = [{'type': 'photo'}, {'type': 'photo'}, {'type': 'photo'}]
        result = handle_danger_report_media(message, user_data, 20, 300)
        self.assertIn("–ú–∞–∫—Å–∏–º—É–º 3 –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞", result, "–ù–µ–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞")
        
        # –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        message.photo = [Mock(file_id="test_file_id", file_size=25*1024*1024)]  # 25MB
        user_data['media'] = []
        result = handle_danger_report_media(message, user_data, 20, 300)
        self.assertIn("—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π", result, "–ù–µ–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞")
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_9_geolocation_handling(self):
        """–¢–µ—Å—Ç 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        print("\n=== –¢–ï–°–¢ 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ===")
        
        from handlers import handle_danger_report_location, handle_shelter_finder_location
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        message = self.create_mock_message("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
        message.location = Mock()
        message.location.latitude = 55.7558
        message.location.longitude = 37.6176
        user_data = {'step': 'location'}
        
        result = handle_danger_report_location(message, user_data)
        self.assertIsInstance(result, dict, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        self.assertIn("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞", result['text'], "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        self.assertEqual(user_data['step'], 'media', "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        self.assertIsNotNone(user_data['location'], "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â
        message = self.create_mock_message("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
        message.location = Mock()
        message.location.latitude = 55.7558
        message.location.longitude = 37.6176
        
        result = handle_shelter_finder_location(message, self.placeholders)
        self.assertIsInstance(result, dict, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        self.assertIn("text", result, "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        self.assertIn("reply_markup", result, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_10_integration_scenarios(self):
        """–¢–µ—Å—Ç 10: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
        print("\n=== –¢–ï–°–¢ 10: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ===")
        
        from handlers import (
            handle_danger_report_text, handle_danger_report_location, handle_danger_report_media,
            handle_shelter_finder_text, handle_safety_consultant_text, handle_improvement_suggestion_text
        )
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        user_data = {'step': 'description', 'description': '', 'location': None, 'media': []}
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        message = self.create_mock_message("–ü–æ–∂–∞—Ä –≤ –∑–¥–∞–Ω–∏–∏")
        result = handle_danger_report_text(message, user_data, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        
        # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
        message.location = Mock()
        message.location.latitude = 55.7558
        message.location.longitude = 37.6176
        user_data['step'] = 'location'
        result = handle_danger_report_location(message, user_data)
        self.assertIsInstance(result, dict, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        
        # –ú–µ–¥–∏–∞—Ñ–∞–π–ª
        message.content_type = "photo"
        message.photo = [Mock(file_id="test_file_id", file_size=1024*1024)]
        user_data['step'] = 'media'
        result = handle_danger_report_media(message, user_data, 20, 300)
        self.assertIn("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω", result, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–∏—Å–∫ —É–±–µ–∂–∏—â–∞
        message = self.create_mock_message("üè† –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ")
        result = handle_shelter_finder_text(message, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        message = self.create_mock_message("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        result = handle_safety_consultant_text(message, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        message = self.create_mock_message("–£–ª—É—á—à–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        result = handle_improvement_suggestion_text(message, self.placeholders)
        self.assertIsInstance(result, tuple, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º")
        
        print("‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def run_comprehensive_tests():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RPRZ Safety Bot")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestRPRZBotComprehensive)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 70)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(result.failures) + len(result.errors)}")
    print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    
    if result.failures:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback}")
    
    if result.errors:
        print(f"\nüí• –û—à–∏–±–∫–∏:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback}")
    
    success_rate = ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun) * 100
    print(f"\nüéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    if success_rate >= 95:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    elif success_rate >= 80:
        print("‚úÖ –•–û–†–û–®–û! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏")
        return True
    elif success_rate >= 60:
        print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False
    else:
        print("‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!")
        return False

if __name__ == '__main__':
    success = run_comprehensive_tests()
    sys.exit(0 if success else 1)

