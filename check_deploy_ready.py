#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway
"""

import os
import sys
from pathlib import Path

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

def check_file_exists(filename, required=True):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    exists = Path(filename).exists()
    status = "‚úÖ" if exists else ("‚ùå" if required else "‚ö†Ô∏è")
    print(f"{status} {filename}: {'–Ω–∞–π–¥–µ–Ω' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
    return exists or not required

def check_file_content(filename, should_not_contain=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
            if should_not_contain:
                for pattern in should_not_contain:
                    if pattern in content:
                        print(f"‚ùå {filename} —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}' - –£–î–ê–õ–ò–¢–ï!")
                        return False
        print(f"‚úÖ {filename} –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        return True
    except FileNotFoundError:
        print(f"‚ùå {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_gitignore():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...")
    required_patterns = ['.env', '*.log', 'bot.lock', 'bot.pid', '__pycache__']
    
    if not Path('.gitignore').exists():
        print("‚ùå .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open('.gitignore', 'r', encoding='utf-8') as f:
        content = f.read()
    
    all_good = True
    for pattern in required_patterns:
        if pattern in content:
            print(f"‚úÖ .gitignore —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}'")
        else:
            print(f"‚ùå .gitignore –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}'")
            all_good = False
    
    return all_good

def check_env_not_in_git():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ .env –Ω–µ –≤ Git"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ .env –Ω–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ git ls-files
    import subprocess
    try:
        result = subprocess.run(
            ['git', 'ls-files', '.env'],
            capture_output=True,
            text=True,
            timeout=5
        )
        
        if result.stdout.strip():  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–≤–æ–¥ - —Ñ–∞–π–ª –≤ Git
            print("‚ùå –ö–†–ò–¢–ò–ß–ù–û: .env —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏!")
            print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: git rm --cached .env")
            return False
        else:
            print("‚úÖ .env –Ω–µ –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
            return True
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Git: {e}")
        return True  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–µ–ø–ª–æ–π

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt...")
    
    required_packages = [
        'pyTelegramBotAPI',
        'python-dotenv',
        'loguru',
        'requests',
        'psutil'
    ]
    
    if not Path('requirements.txt').exists():
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open('requirements.txt', 'r', encoding='utf-8') as f:
        content = f.read()
    
    all_good = True
    for package in required_packages:
        if package in content:
            print(f"‚úÖ {package} –Ω–∞–π–¥–µ–Ω –≤ requirements.txt")
        else:
            print(f"‚ùå {package} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ requirements.txt")
            all_good = False
    
    return all_good

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("=" * 60)
    print("üöÇ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ –ù–ê RAILWAY")
    print("=" * 60)
    
    all_checks = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    all_checks.append(check_file_exists('Procfile', required=True))
    all_checks.append(check_file_exists('runtime.txt', required=True))
    all_checks.append(check_file_exists('requirements.txt', required=True))
    all_checks.append(check_file_exists('.gitignore', required=True))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    check_file_exists('railway.json', required=False)
    check_file_exists('.railwayignore', required=False)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Procfile
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ Procfile...")
    if Path('Procfile').exists():
        with open('Procfile', 'r', encoding='utf-8') as f:
            procfile_content = f.read()
            if 'python' in procfile_content and 'bot/main.py' in procfile_content:
                print("‚úÖ Procfile —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞")
                all_checks.append(True)
            else:
                print("‚ùå Procfile –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'python bot/main.py'")
                all_checks.append(False)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ runtime.txt
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ runtime.txt...")
    if Path('runtime.txt').exists():
        with open('runtime.txt', 'r', encoding='utf-8') as f:
            runtime_content = f.read().strip()
            if runtime_content.startswith('python-3.'):
                print(f"‚úÖ runtime.txt: {runtime_content}")
                all_checks.append(True)
            else:
                print(f"‚ùå runtime.txt –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Ä—Å–∏—é Python: {runtime_content}")
                all_checks.append(False)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
    all_checks.append(check_gitignore())
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –Ω–µ –≤ Git
    all_checks.append(check_env_not_in_git())
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
    all_checks.append(check_requirements())
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüóÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    all_checks.append(check_file_exists('bot/main.py', required=True))
    all_checks.append(check_file_exists('bot/handlers.py', required=True))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    if all(all_checks):
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. git add .")
        print("2. git commit -m '–ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é'")
        print("3. git push origin main")
        print("4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://railway.app")
        print("5. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        print("6. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, ADMIN_CHAT_ID)")
        return 0
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        print("\nüìñ –°–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: RAILWAY_DEPLOY_GUIDE.md")
        return 1

if __name__ == '__main__':
    sys.exit(main())
