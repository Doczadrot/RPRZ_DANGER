#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway
"""
import os
import sys
from pathlib import Path


def check_file_exists(filepath, required=True):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    exists = Path(filepath).exists()
    status = "‚úÖ" if exists else ("‚ùå" if required else "‚ö†Ô∏è")
    print(f"{status} {filepath}: {'–Ω–∞–π–¥–µ–Ω' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
    return exists


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç .env —Ñ–∞–π–ª"""
    print("\n" + "=" * 50)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞: .env —Ñ–∞–π–ª (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
    print("=" * 50)

    if Path(".env").exists():
        print("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(".env", "r", encoding="utf-8") as f:
            content = f.read()

        has_token = (
            "BOT_TOKEN=" in content
            and len(content.split("BOT_TOKEN=")[1].split("\n")[0].strip()) > 20
        )
        has_admin = (
            "ADMIN_CHAT_ID=" in content
            and len(content.split("ADMIN_CHAT_ID=")[1].split("\n")[0].strip()) > 5
        )

        if has_token:
            print("  ‚úÖ BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("  ‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")

        if has_admin:
            print("  ‚úÖ ADMIN_CHAT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("  ‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")

        return has_token and has_admin
    else:
        print("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Railway –¥–µ–ø–ª–æ—è)")
        print("  ‚ÑπÔ∏è –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ .env –∏–∑ env.example")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Railway


def check_gitignore():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç .gitignore"""
    print("\n" + "=" * 50)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞: .gitignore (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)")
    print("=" * 50)

    if not Path(".gitignore").exists():
        print("‚ùå .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open(".gitignore", "r", encoding="utf-8") as f:
        content = f.read()

    checks = {
        ".env": ".env" in content,
        "*.log": "*.log" in content,
        "__pycache__": "__pycache__" in content,
        "*.key": "*.key" in content or "*.pem" in content,
    }

    all_good = True
    for item, exists in checks.items():
        status = "‚úÖ" if exists else "‚ùå"
        print(f"{status} {item} –≤ .gitignore: {'–¥–∞' if exists else '–ù–ï–¢ - –î–û–ë–ê–í–¨–¢–ï!'}")
        if not exists:
            all_good = False

    return all_good


def check_railway_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è Railway"""
    print("\n" + "=" * 50)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞: –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway")
    print("=" * 50)

    files = {
        "Procfile": True,
        "railway.json": True,
        "nixpacks.toml": True,
        "runtime.txt": True,
        "requirements.txt": True,
    }

    all_good = True
    for filepath, required in files.items():
        if not check_file_exists(filepath, required):
            all_good = False

    return all_good


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç requirements.txt"""
    print("\n" + "=" * 50)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞: requirements.txt")
    print("=" * 50)

    if not Path("requirements.txt").exists():
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open("requirements.txt", "r", encoding="utf-8") as f:
        content = f.read()

    required_packages = [
        "pyTelegramBotAPI",
        "python-dotenv",
        "loguru",
        "flask",
        "psutil",
    ]

    all_good = True
    for package in required_packages:
        if package.lower() in content.lower():
            print(f"‚úÖ {package} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {package} –ù–ï –ù–ê–ô–î–ï–ù!")
            all_good = False

    return all_good


def check_main_py():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç bot/main.py"""
    print("\n" + "=" * 50)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞: bot/main.py")
    print("=" * 50)

    if not Path("bot/main.py").exists():
        print("‚ùå bot/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    print("‚úÖ bot/main.py –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    with open("bot/main.py", "r", encoding="utf-8") as f:
        content = f.read()

    checks = {
        "telebot": "import telebot" in content,
        "Flask": "from flask import Flask" in content,
        "load_dotenv": "from dotenv import load_dotenv" in content,
    }

    all_good = True
    for item, exists in checks.items():
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} –ò–º–ø–æ—Ä—Ç {item}: {'–¥–∞' if exists else '–ù–ï–¢'}")
        if not exists:
            all_good = False

    return all_good


def check_directory_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\n" + "=" * 50)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    print("=" * 50)

    dirs = {
        "bot": True,
        "configs": True,
        "logs": False,
        "assets": False,
    }

    for dirpath, required in dirs.items():
        exists = Path(dirpath).exists()
        status = "‚úÖ" if exists else ("‚ö†Ô∏è" if not required else "‚ùå")
        print(f"{status} {dirpath}/: {'–Ω–∞–π–¥–µ–Ω' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")

    return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\n" + "=" * 50)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö RAILWAY –î–ï–ü–õ–û–Æ")
    print("=" * 50)

    checks = [
        ("–§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway", check_railway_files),
        ("requirements.txt", check_requirements),
        (".gitignore (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)", check_gitignore),
        (".env —Ñ–∞–π–ª", check_env_file),
        ("bot/main.py", check_main_py),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", check_directory_structure),
    ]

    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
            results.append((name, False))

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò")
    print("=" * 50)

    failed = []
    for name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {name}")
        if not result:
            failed.append(name)

    print("\n" + "=" * 50)
    if not failed:
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("=" * 50)
        print("\nüöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—à—å—Ç–µ –∫–æ–¥ –≤ GitHub:")
        print("   git add .")
        print('   git commit -m "–ì–æ—Ç–æ–≤ –∫ Railway –¥–µ–ø–ª–æ—é"')
        print("   git push origin main")
        print("\n2. –û—Ç–∫—Ä–æ–π—Ç–µ https://railway.app")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        print("4. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: BOT_TOKEN, ADMIN_CHAT_ID")
        print("\nüìñ –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: RAILWAY_DEPLOY_GUIDE.md")
        print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: RAILWAY_QUICKSTART.md")
        return 0
    else:
        print("‚ùå –ü–†–û–í–ï–†–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê")
        print("=" * 50)
        print("\n–û—à–∏–±–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö:")
        for name in failed:
            print(f"  - {name}")
        print("\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞:")
        print("   python check_deploy_ready.py")
        return 1


if __name__ == "__main__":
    sys.exit(main())
