#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–≤–æ–π–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏
"""

import os
import sys
import time
import psutil
import signal
import json
import subprocess
from pathlib import Path
from datetime import datetime
from loguru import logger

class BotManager:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.lock_file = self.project_root / "bot.lock"
        self.pid_file = self.project_root / "bot.pid"
        self.log_file = self.project_root / "logs" / "bot_manager.log"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.add(
            self.log_file,
            rotation="1 day",
            retention="7 days",
            level="INFO",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}"
        )
    
    def check_running_processes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å –±–æ—Ç–æ–º"""
        running_bots = []
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
            try:
                if proc.info['name'] == 'python.exe' or 'python' in proc.info['name']:
                    cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–æ—Ç
                    if any(keyword in cmdline.lower() for keyword in ['bot', 'main.py', 'run_bot.py']):
                        running_bots.append({
                            'pid': proc.info['pid'],
                            'cmdline': cmdline,
                            'create_time': datetime.fromtimestamp(proc.info['create_time']).isoformat()
                        })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        return running_bots
    
    def kill_bot_processes(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
        running_bots = self.check_running_processes()
        
        if not running_bots:
            logger.info("–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
        
        logger.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(running_bots)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞")
        
        for bot in running_bots:
            try:
                process = psutil.Process(bot['pid'])
                process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                try:
                    process.wait(timeout=5)
                    logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {bot['pid']} –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except psutil.TimeoutExpired:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
                    process.kill()
                    logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {bot['pid']} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except psutil.NoSuchProcess:
                logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {bot['pid']} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {bot['pid']}: {e}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        remaining_bots = self.check_running_processes()
        if remaining_bots:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å {len(remaining_bots)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            return False
        
        logger.info("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        return True
    
    def create_lock(self, pid):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        lock_data = {
            'pid': pid,
            'started_at': datetime.now().isoformat(),
            'project_path': str(self.project_root)
        }
        
        try:
            with open(self.lock_file, 'w', encoding='utf-8') as f:
                json.dump(lock_data, f, indent=2, ensure_ascii=False)
            
            with open(self.pid_file, 'w', encoding='utf-8') as f:
                f.write(str(pid))
            
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è PID {pid}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def remove_lock(self):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            if self.lock_file.exists():
                self.lock_file.unlink()
            
            if self.pid_file.exists():
                self.pid_file.unlink()
            
            logger.info("–§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def check_lock(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if not self.lock_file.exists():
            return None
        
        try:
            with open(self.lock_file, 'r', encoding='utf-8') as f:
                lock_data = json.load(f)
            
            pid = lock_data.get('pid')
            started_at = lock_data.get('started_at')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω
            if pid:
                try:
                    process = psutil.Process(int(pid))
                    if process.is_running():
                        return {
                            'pid': pid,
                            'started_at': started_at,
                            'process': process
                        }
                except psutil.NoSuchProcess:
                    # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
                    self.remove_lock()
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            self.remove_lock()
            return None
    
    def system_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
        logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
        python_version = sys.version_info
        if python_version < (3, 8):
            logger.error(f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {python_version.major}.{python_version.minor}")
            return False
        
        logger.info(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_file = self.project_root / ".env"
        if not env_file.exists():
            logger.error("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        logger.info("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        try:
            import telebot
            import psutil
            import loguru
            logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
            return False
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
        required_dirs = ['logs', 'bot', 'assets', 'configs']
        for dir_name in required_dirs:
            dir_path = self.project_root / dir_name
            if not dir_path.exists():
                logger.error(f"‚ùå –ü–∞–ø–∫–∞ {dir_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        
        logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        running_bots = self.check_running_processes()
        if running_bots:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(running_bots)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞")
            for bot in running_bots:
                logger.warning(f"  - PID {bot['pid']}: {bot['cmdline']}")
            return False
        
        logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_info = self.check_lock()
        if lock_info:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç PID {lock_info['pid']}")
            return False
        
        logger.info("‚úÖ –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.info("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if not self.system_check():
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if not self.kill_bot_processes():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        current_pid = os.getpid()
        if not self.create_lock(current_pid):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")
            return False
        
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        return True
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if not self.kill_bot_processes():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            return False
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if not self.remove_lock():
            logger.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            return False
        
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    
    def status(self):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        running_bots = self.check_running_processes()
        if running_bots:
            logger.info(f"üî¥ –ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞: {len(running_bots)}")
            for bot in running_bots:
                logger.info(f"  - PID {bot['pid']}: {bot['cmdline']}")
        else:
            logger.info("üü¢ –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_info = self.check_lock()
        if lock_info:
            logger.info(f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: PID {lock_info['pid']}")
        else:
            logger.info("üü¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if self.system_check():
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            logger.info("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python bot_manager.py start  - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        print("  python bot_manager.py stop   - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
        print("  python bot_manager.py status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        print("  python bot_manager.py check  - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        return
    
    manager = BotManager()
    command = sys.argv[1].lower()
    
    if command == "start":
        if manager.start_bot():
            logger.info("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            sys.exit(1)
    
    elif command == "stop":
        if manager.stop_bot():
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
            sys.exit(1)
    
    elif command == "status":
        manager.status()
    
    elif command == "check":
        if manager.system_check():
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
        else:
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞")
            sys.exit(1)
    
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)

if __name__ == "__main__":
    main()
