"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""
import os
import sys
import asyncio
from unittest.mock import Mock, AsyncMock
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append('.')

from bot.main_refactored import BotApplication
from bot.utils.activity_logger import ActivityLogger
from bot.utils.state_manager import StateManager
from bot.utils.file_manager import FileManager
from bot.utils.keyboard_factory import KeyboardFactory


class MockUpdate:
    """–ú–æ–∫ –¥–ª—è Update –æ–±—ä–µ–∫—Ç–∞"""
    def __init__(self, user_id=12345, username="test_user", text="", message_type="text"):
        self.effective_user = Mock()
        self.effective_user.id = user_id
        self.effective_user.username = username
        
        self.message = Mock()
        self.message.text = text
        self.message.reply_text = AsyncMock()
        self.message.reply_photo = AsyncMock()
        self.message.reply_document = AsyncMock()
        
        if message_type == "photo":
            photo_mock = Mock()
            photo_mock.file_id = "test_photo_id"
            photo_mock.file_size = 1024 * 1024  # 1 –ú–ë
            self.message.photo = [photo_mock]
            self.message.video = None
        elif message_type == "video":
            self.message.video = Mock()
            self.message.video.file_id = "test_video_id"
            self.message.video.file_size = 10 * 1024 * 1024  # 10 –ú–ë
            self.message.photo = None
        elif message_type == "location":
            self.message.location = Mock()
            self.message.location.latitude = 55.7558
            self.message.location.longitude = 37.6173
        else:
            self.message.photo = None
            self.message.video = None
            self.message.location = None


class MockContext:
    """–ú–æ–∫ –¥–ª—è Context –æ–±—ä–µ–∫—Ç–∞"""
    def __init__(self):
        self.bot = Mock()
        self.bot.send_message = AsyncMock()
        self.bot.send_photo = AsyncMock()
        self.bot.send_video = AsyncMock()
        self.bot_data = {'admin_chat_id': 'ADMIN_ID_PLACEHOLDER'}


async def test_start_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start...")
    
    app = BotApplication()
    update = MockUpdate(text="/start")
    context = MockContext()
    
    await app.start_command(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    assert update.message.reply_text.called
    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def test_danger_report_flow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ '–°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'...")
    
    app = BotApplication()
    context = MockContext()
    
    # –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    update1 = MockUpdate(text="üö®‚ùó –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    await app.handle_message(update1, context)
    print("‚úÖ –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    # –®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ
    update2 = MockUpdate(text="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    await app.handle_message(update2, context)
    print("‚úÖ –®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    # –®–∞–≥ 3: –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    update3 = MockUpdate(text="–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    await app.handle_message(update3, context)
    print("‚úÖ –®–∞–≥ 3: –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    
    # –®–∞–≥ 4: –ü—Ä–æ–ø—É—Å–∫ –º–µ–¥–∏–∞
    update4 = MockUpdate(text="‚è≠Ô∏è‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    await app.handle_message(update4, context)
    print("‚úÖ –®–∞–≥ 4: –ü—Ä–æ–ø—É—Å–∫ –º–µ–¥–∏–∞")
    
    # –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    update5 = MockUpdate(text="‚úÖüì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await app.handle_message(update5, context)
    print("‚úÖ –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")


async def test_shelter_finder():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —É–±–µ–∂–∏—â"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —É–±–µ–∂–∏—â...")
    
    app = BotApplication()
    update = MockUpdate(text="üè†üõ°Ô∏è –ë–ª–∏–∂–∞–π—à–µ–µ —É–∫—Ä—ã—Ç–∏–µ")
    context = MockContext()
    
    await app.handle_message(update, context)
    print("‚úÖ –ü–æ–∏—Å–∫ —É–±–µ–∂–∏—â —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def test_consultant():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    app = BotApplication()
    update = MockUpdate(text="üßë‚Äçüè´üìö –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–ü–†–ó")
    context = MockContext()
    
    await app.handle_message(update, context)
    print("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def test_history_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /my_history"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /my_history...")
    
    app = BotApplication()
    update = MockUpdate(text="/my_history")
    context = MockContext()
    
    await app.my_history_command(update, context)
    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /my_history —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def test_media_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...")
    
    app = BotApplication()
    context = MockContext()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞
    app.state_manager.set_user_state(12345, {
        'state': 'danger_media',
        'data': {}
    })
    
    # –¢–µ—Å—Ç —Ñ–æ—Ç–æ
    update_photo = MockUpdate(message_type="photo")
    await app.handle_media(update_photo, context)
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–Ω–æ–≤–∞ –¥–ª—è –≤–∏–¥–µ–æ
    app.state_manager.clear_user_state(12345)
    app.state_manager.set_user_state(12345, {
        'state': 'danger_media',
        'data': {}
    })
    
    # –¢–µ—Å—Ç –≤–∏–¥–µ–æ
    update_video = MockUpdate(message_type="video")
    await app.handle_media(update_video, context)
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def test_location_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...")
    
    app = BotApplication()
    context = MockContext()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    app.state_manager.set_user_state(12345, {
        'state': 'shelter_location',
        'data': {}
    })
    
    update = MockUpdate(message_type="location")
    await app.handle_location(update, context)
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def test_spam_protection():
    """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞...")
    
    app = BotApplication()
    context = MockContext()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
    for i in range(15):  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –≤ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        update = MockUpdate(text=f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}")
        await app.handle_message(update, context)
    
    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
    last_update = MockUpdate(text="–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await app.handle_message(last_update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø–∞–º–µ
    assert last_update.message.reply_text.called
    print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def test_utilities():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã...")
    
    # –¢–µ—Å—Ç ActivityLogger
    logger = ActivityLogger('logs/test_activity.csv')
    logger.log_activity(12345, "test_user", "test_action", "test_payload")
    print("‚úÖ ActivityLogger —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç StateManager
    state_manager = StateManager()
    state_manager.set_user_state(12345, {'state': 'test', 'data': {}})
    state = state_manager.get_user_state(12345)
    assert state['state'] == 'test'
    print("‚úÖ StateManager —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç FileManager
    file_manager = FileManager()
    test_data = {'test': 'data'}
    test_file = 'logs/test.json'
    file_manager.save_json(test_file, test_data)
    loaded_data = file_manager.load_json(test_file)
    assert loaded_data == test_data
    print("‚úÖ FileManager —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç KeyboardFactory
    keyboard_factory = KeyboardFactory()
    main_menu = keyboard_factory.create_main_menu()
    assert main_menu is not None
    print("‚úÖ KeyboardFactory —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    if os.path.exists('logs/test.json'):
        os.remove('logs/test.json')
    if os.path.exists('logs/test_activity.csv'):
        os.remove('logs/test_activity.csv')


async def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞...\n")
    
    try:
        await test_start_command()
        await test_danger_report_flow()
        await test_shelter_finder()
        await test_consultant()
        await test_history_command()
        await test_media_handling()
        await test_location_handling()
        await test_spam_protection()
        await test_utilities()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(run_all_tests())
