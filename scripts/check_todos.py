#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–°–∫—Ä–∏–ø—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ TODO/FIXME –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞.
"""

import re
import sys
from pathlib import Path
from typing import Dict, List, Tuple

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    import codecs

    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, "strict")
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.buffer, "strict")

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
TODO_PATTERNS = [
    r"#\s*TODO[:\s]+(.*)",
    r"#\s*FIXME[:\s]+(.*)",
    r"#\s*HACK[:\s]+(.*)",
    r"#\s*XXX[:\s]+(.*)",
    r"#\s*BUG[:\s]+(.*)",
    r"#\s*NOTE[:\s]+(.*)",
]

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
EXCLUDE_DIRS = {
    "__pycache__",
    ".git",
    ".pytest_cache",
    "htmlcov",
    "venv",
    "env",
    ".venv",
    "node_modules",
    "logs",
    ".github",
}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
INCLUDE_EXTENSIONS = {".py", ".yml", ".yaml", ".md", ".txt", ".sh"}


def find_todos_in_file(file_path: Path) -> List[Tuple[int, str, str]]:
    """–ò—â–µ—Ç TODO/FIXME –≤ —Ñ–∞–π–ª–µ."""
    todos = []

    try:
        with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
            for line_num, line in enumerate(f, start=1):
                for pattern in TODO_PATTERNS:
                    match = re.search(pattern, line, re.IGNORECASE)
                    if match:
                        todo_type = (
                            line[match.start() : match.start() + 10]
                            .strip("#")
                            .strip()
                            .split()[0]
                        )
                        todo_text = (
                            match.group(1).strip() if match.groups() else line.strip()
                        )
                        todos.append((line_num, todo_type, todo_text))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}", file=sys.stderr)

    return todos


def scan_directory(root_dir: Path) -> Dict[str, List[Tuple[int, str, str]]]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ TODO/FIXME."""
    results = {}

    for file_path in root_dir.rglob("*"):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
        if file_path.is_dir():
            continue

        if any(excluded in file_path.parts for excluded in EXCLUDE_DIRS):
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if file_path.suffix not in INCLUDE_EXTENSIONS:
            continue

        todos = find_todos_in_file(file_path)
        if todos:
            relative_path = str(file_path.relative_to(root_dir))
            results[relative_path] = todos

    return results


def print_report(results: Dict[str, List[Tuple[int, str, str]]]):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö TODO/FIXME."""
    total_count = sum(len(todos) for todos in results.values())

    print("\n" + "=" * 60)
    print("üîç –û–¢–ß–ï–¢ –û TODO/FIXME –í –ö–û–î–ï")
    print("=" * 60)

    if not results:
        print("\n‚úÖ TODO/FIXME –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("=" * 60 + "\n")
        return

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ TODO/FIXME: {total_count}")
    print(f"üìÅ –§–∞–π–ª–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {len(results)}")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    type_counts = {}
    for todos in results.values():
        for _, todo_type, _ in todos:
            type_counts[todo_type] = type_counts.get(todo_type, 0) + 1

    print("\nüìà –ü–æ —Ç–∏–ø–∞–º:")
    for todo_type, count in sorted(type_counts.items(), key=lambda x: -x[1]):
        print(f"  - {todo_type}: {count}")

    # –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∞–π–ª–∞–º
    print("\nüìã –î–µ—Ç–∞–ª–∏:")
    print("-" * 60)

    for file_path, todos in sorted(results.items()):
        print(f"\nüìÑ {file_path}")
        for line_num, todo_type, todo_text in todos:
            print(f"  L{line_num:4d} [{todo_type}] {todo_text[:70]}")

    print("\n" + "=" * 60)

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if total_count > 20:
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
    elif total_count > 10:
        print("\nüí° –°–æ–≤–µ—Ç: –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å—Ç—Ä–∞–Ω—è–π—Ç–µ TODO –≤ –∫–æ–¥–µ")
    else:
        print("\n‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º")

    print()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    root_dir = Path.cwd()

    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ scripts/, –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤—ã—à–µ
    if root_dir.name == "scripts":
        root_dir = root_dir.parent

    print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {root_dir}")
    print(f"üìÇ –ò—Å–∫–ª—é—á–µ–Ω—ã: {', '.join(sorted(EXCLUDE_DIRS))}")
    print(f"üìù –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è: {', '.join(sorted(INCLUDE_EXTENSIONS))}")

    # –°–∫–∞–Ω–∏—Ä—É–µ–º
    results = scan_directory(root_dir)

    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    print_report(results)

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 - —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è
    return 0


if __name__ == "__main__":
    sys.exit(main())
