#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ CI/CD pipeline –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞.
"""

import sys
import xml.etree.ElementTree as ET
from pathlib import Path

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (%)
MINIMUM_COVERAGE = 70.0

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    import codecs

    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, "strict")
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.buffer, "strict")


def parse_coverage_xml(xml_path):
    """–ü–∞—Ä—Å–∏—Ç coverage.xml –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è."""
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()

        # –ò—â–µ–º –æ–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
        coverage_element = root.find(".")
        if coverage_element is not None:
            line_rate = float(coverage_element.get("line-rate", 0))
            return line_rate * 100

        return 0.0
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {xml_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pytest --cov=bot --cov-report=xml")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {xml_path}: {e}")
        return None


def get_package_coverage(xml_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –ø–∞–∫–µ—Ç–∞–º."""
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()

        packages = {}
        for package in root.findall(".//package"):
            name = package.get("name", "unknown")
            line_rate = float(package.get("line-rate", 0))
            packages[name] = line_rate * 100

        return packages
    except Exception:
        return {}


def print_coverage_report(total_coverage, package_coverage):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏."""
    print("\n" + "=" * 60)
    print("üìä –û–¢–ß–ï–¢ –û –ü–û–ö–†–´–¢–ò–ò –ö–û–î–ê –¢–ï–°–¢–ê–ú–ò")
    print("=" * 60)

    print(f"\nüìà –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {total_coverage:.2f}%")
    print(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: {MINIMUM_COVERAGE:.2f}%")

    if total_coverage >= MINIMUM_COVERAGE:
        print("‚úÖ –£–°–ü–ï–•: –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!")
        status = "PASS"
    else:
        diff = MINIMUM_COVERAGE - total_coverage
        print(f"‚ùå –ü–†–û–í–ê–õ: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {diff:.2f}% –ø–æ–∫—Ä—ã—Ç–∏—è")
        status = "FAIL"

    # –î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞–∫–µ—Ç–∞–º
    if package_coverage:
        print("\nüì¶ –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –ø–∞–∫–µ—Ç–∞–º:")
        print("-" * 60)
        for package, coverage in sorted(package_coverage.items(), key=lambda x: x[1]):
            status_icon = "‚úÖ" if coverage >= MINIMUM_COVERAGE else "‚ö†Ô∏è"
            print(f"{status_icon} {package:40} {coverage:6.2f}%")

    print("=" * 60 + "\n")
    return status == "PASS"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü—É—Ç—å –∫ coverage.xml (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ –∏–ª–∏ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö)
    possible_paths = ["coverage.xml", "../coverage.xml", "./coverage.xml"]

    coverage_xml = None
    for path in possible_paths:
        if Path(path).exists():
            coverage_xml = path
            break

    if not coverage_xml:
        print("‚ùå –§–∞–π–ª coverage.xml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞:")
        print("  pytest --cov=bot --cov-report=xml")
        return 1

    # –ü–∞—Ä—Å–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    total_coverage = parse_coverage_xml(coverage_xml)
    if total_coverage is None:
        return 1

    package_coverage = get_package_coverage(coverage_xml)

    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    success = print_coverage_report(total_coverage, package_coverage)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if success:
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!")
        return 0
    else:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!")
        print(
            f"\nüí° –°–æ–≤–µ—Ç: –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {MINIMUM_COVERAGE}% –ø–æ–∫—Ä—ã—Ç–∏—è"
        )
        return 1


if __name__ == "__main__":
    sys.exit(main())
