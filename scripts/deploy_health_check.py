#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Health check —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ CI/CD –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è.
"""

import os
import sys
import time
from typing import Optional

import requests

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    import codecs

    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, "strict")
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.buffer, "strict")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_API_BASE = "https://api.telegram.org/bot"
HEALTH_CHECK_TIMEOUT = 30  # —Å–µ–∫—É–Ω–¥
MAX_RETRIES = 3
RETRY_DELAY = 5  # —Å–µ–∫—É–Ω–¥


def get_bot_token() -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    return token


def check_bot_info(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —á–µ—Ä–µ–∑ getMe API."""
    url = f"{TELEGRAM_API_BASE}{token}/getMe"

    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get("ok"):
                bot_info = data.get("result", {})
                username = bot_info.get("username", "unknown")
                first_name = bot_info.get("first_name", "unknown")
                print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{username} ({first_name})")
                return True
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('description', 'unknown')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False


def check_bot_updates(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    url = f"{TELEGRAM_API_BASE}{token}/getUpdates"

    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get("ok"):
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {data.get('description', 'unknown')}"
                )
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ getUpdates: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return False


def check_webhook_info(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)."""
    url = f"{TELEGRAM_API_BASE}{token}/getWebhookInfo"

    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get("ok"):
                webhook_info = data.get("result", {})
                webhook_url = webhook_info.get("url", "")

                if webhook_url:
                    print(f"‚ÑπÔ∏è Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {webhook_url}")
                    pending = webhook_info.get("pending_update_count", 0)
                    print(f"‚ÑπÔ∏è –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pending} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                else:
                    print("‚ÑπÔ∏è Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling)")

                return True
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å webhook: {e}")
        return False


def run_health_check_with_retry() -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç health check —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    token = get_bot_token()
    if not token:
        return False

    for attempt in range(1, MAX_RETRIES + 1):
        print(f"\nüîç –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{MAX_RETRIES}")
        print("-" * 60)

        # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - getMe
        if check_bot_info(token):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            check_bot_updates(token)
            check_webhook_info(token)
            return True

        if attempt < MAX_RETRIES:
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {RETRY_DELAY} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(RETRY_DELAY)

    return False


def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    print("\n" + "=" * 60)
    print("üè• HEALTH CHECK - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞")
    print("=" * 60)


def print_footer(success: bool):
    """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏."""
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ HEALTH CHECK PASSED - –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        print("üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω!")
    else:
        print("‚ùå HEALTH CHECK FAILED - –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ rollback!")
    print("=" * 60 + "\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print_header()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    success = run_health_check_with_retry()

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print_footer(success)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
